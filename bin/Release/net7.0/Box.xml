<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Box</name>
    </assembly>
    <members>
        <member name="T:Box.Attributes.ServiceAttribute">
            <summary>
            Specifies that the decorated class requires a service instance of the given type.
            This allows the engine to automatically inject service dependencies into matching fields or properties.
            </summary>
        </member>
        <member name="P:Box.Attributes.ServiceAttribute.SingletonType">
            <summary>
            Gets the type of the singleton required by the target class.
            </summary>
        </member>
        <member name="M:Box.Attributes.ServiceAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Box.Attributes.ServiceAttribute"/> class with the specified singleton type.
            </summary>
            <param name="singletonType">The type of singleton to be injected into the target class.</param>
        </member>
        <member name="T:Box.Attributes.ServiceIgnoreAttribute">
            <summary>
            Prevents the engine from injecting a service instance into a decorated field or property,
            even if the containing class is marked with <see cref="T:Box.Attributes.ServiceAttribute"/>.
            </summary>
            <remarks>
            This attribute is useful when you want to manually assign or mock a service dependency,
            or when the field/property name matches a singleton type but should not be injected automaticlly.
            </remarks>
        </member>
        <member name="T:Box.Coroutines.Coroutine">
            <summary>
            A container for running multiple routines in parallel. Coroutines can be nested.
            </summary>
        </member>
        <member name="P:Box.Coroutines.Coroutine.Count">
            <summary>
            Gets the number of currently running coroutines in this container.
            </summary>
        </member>
        <member name="M:Box.Coroutines.Coroutine.RunDelayed(System.Single,System.Collections.IEnumerator)">
            <summary>
            Run a coroutine.
            </summary>
            <returns>A handle to the new coroutine.</returns>
            <param name="delay">How many seconds to delay before starting.</param>
            <param name="routine">The routine to run.</param>
        </member>
        <member name="M:Box.Coroutines.Coroutine.Run(System.Collections.IEnumerator)">
            <summary>
            Run a coroutine.
            </summary>
            <returns>A handle to the new coroutine.</returns>
            <param name="routine">The routine to run.</param>
        </member>
        <member name="M:Box.Coroutines.Coroutine.Stop(System.Collections.IEnumerator)">
            <summary>
            Stop the specified routine.
            </summary>
            <returns>True if the routine was actually stopped.</returns>
            <param name="routine">The routine to stop.</param>
        </member>
        <member name="M:Box.Coroutines.Coroutine.Stop(Box.Coroutines.CoroutineHandle)">
            <summary>
            Stop the specified routine.
            </summary>
            <returns>True if the routine was actually stopped.</returns>
            <param name="routine">The routine to stop.</param>
        </member>
        <member name="M:Box.Coroutines.Coroutine.StopAll">
            <summary>
            Stop all running routines.
            </summary>
        </member>
        <member name="M:Box.Coroutines.Coroutine.IsRunning(System.Collections.IEnumerator)">
            <summary>
            Check if the routine is currently running.
            </summary>
            <returns>True if the routine is running.</returns>
            <param name="routine">The routine to check.</param>
        </member>
        <member name="M:Box.Coroutines.Coroutine.IsRunning(Box.Coroutines.CoroutineHandle)">
            <summary>
            Check if the routine is currently running.
            </summary>
            <returns>True if the routine is running.</returns>
            <param name="routine">The routine to check.</param>
        </member>
        <member name="M:Box.Coroutines.Coroutine.Update">
            <summary>
            Updates the coroutine system, processing active coroutines and handling their state.
            </summary>
            <remarks>
            This method is called every frame to update all active coroutines. It checks the progress of each coroutine,
            and manages their execution or termination based on their state.
            </remarks>
        </member>
        <member name="T:Box.Coroutines.CoroutineHandle">
            <summary>
            A handle to a (potentially running) coroutine.
            </summary>
        </member>
        <member name="P:Box.Coroutines.CoroutineHandle.Enumerator">
            <summary>
            Reference to the routine's enumerator.
            </summary>
        </member>
        <member name="P:Box.Coroutines.CoroutineHandle.IsRunning">
            <summary>
            True if the enumerator is currently running.
            </summary>
        </member>
        <member name="M:Box.Coroutines.CoroutineHandle.Stop">
            <summary>
            Stop this coroutine if it is running.
            </summary>
            <returns>True if the coroutine was stopped.</returns>
        </member>
        <member name="M:Box.Coroutines.CoroutineHandle.Wait">
            <summary>
            A routine to wait until this coroutine has finished running.
            </summary>
            <returns>The wait enumerator.</returns>
        </member>
        <member name="M:Box.Coroutines.CoroutineHandle.op_Equality(Box.Coroutines.CoroutineHandle,Box.Coroutines.CoroutineHandle)">
            <summary>
            Checks if two coroutine handles are equal.
            </summary>
            <param name="left">The left-hand side coroutine handle.</param>
            <param name="right">The right-hand side coroutine handle.</param>
            <returns>True if the coroutine handles are equal, false otherwise.</returns>
        </member>
        <member name="M:Box.Coroutines.CoroutineHandle.op_Inequality(Box.Coroutines.CoroutineHandle,Box.Coroutines.CoroutineHandle)">
            <summary>
            Checks if two coroutine handles are not equal.
            </summary>
            <param name="left">The left-hand side coroutine handle.</param>
            <param name="right">The right-hand side coroutine handle.</param>
            <returns>True if the coroutine handles are not equal, false otherwise.</returns>
        </member>
        <member name="M:Box.Coroutines.CoroutineHandle.Equals(Box.Coroutines.CoroutineHandle)">
            <summary>
            Checks if this coroutine handle is equal to another coroutine handle.
            </summary>
            <param name="other">The coroutine handle to compare.</param>
            <returns>True if this coroutine handle is equal to the specified coroutine handle, false otherwise.</returns>
        </member>
        <member name="M:Box.Coroutines.CoroutineHandle.Equals(System.Object)">
            <summary>
            Checks if this coroutine handle is equal to another object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if this coroutine handle is equal to the specified object, false otherwise.</returns>
        </member>
        <member name="M:Box.Coroutines.CoroutineHandle.GetHashCode">
            <summary>
            Returns the hash code for this coroutine handle.
            </summary>
            <returns>A hash code value for this coroutine handle.</returns>
        </member>
        <member name="M:Box.Coroutines.CoroutineHandle.ToString">
            <summary>
            Returns a string representation of this coroutine handle.
            </summary>
            <returns>A string that represents this coroutine handle.</returns>
        </member>
        <member name="T:Box.Engine">
            <summary>
            The game engine responsible for managing all systems and subsystems to facilitate game development.
            </summary>
        </member>
        <member name="P:Box.Engine.Service">
            <summary>
            Gets or sets the <see cref="T:Box.Services.ServiceManager"/> instance used by the engine.
            </summary>
            <remarks>
            This property provides access to the <see cref="T:Box.Services.ServiceManager"/> which is responsible for managing the
            services, including registration and resolution, within the engine. The property is set internally, but it can
            be accessed externally for interacting with the engine's services.
            </remarks>
        </member>
        <member name="F:Box.Engine.OnExiting">
            <summary>
            Delegate used to detect when the application is exiting.
            </summary>
        </member>
        <member name="P:Box.Engine.IsActive">
            <summary>
            Determines whether the game window has focus.
            </summary>
        </member>
        <member name="P:Box.Engine.EngineFont">
            <summary>
            The embedded engine font.
            </summary>
        </member>
        <member name="M:Box.Engine.GetService``1">
            <summary>
            Retrieves a singleton game data object of the specified type.
            </summary>
            <remarks>
            Singletons can be used within entities and screens without needing to wrap data around the engine.
            For other types, use Engine.GetSingleton to access data or important methods.
            </remarks>
            <typeparam name="T">The type of the singleton to retrieve.</typeparam>
            <returns>The singleton object if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Box.Engine.GetSingletonAsObject(System.Type)">
            <summary>
            Retrieves a singleton service as an object based on the specified type.
            </summary>
            <param name="singleton">The type of the singleton service to retrieve.</param>
            <returns>
            An instance of the singleton service, or <c>null</c> if no matching service is found.
            </returns>
            <remarks>
            This method searches through the registered services and returns the first instance that matches the specified type.
            If no matching service is found, it returns <c>null</c>.
            </remarks>
        </member>
        <member name="P:Box.Engine.AppFolder">
            <summary>
            Retrieves the application data folder path based on the current operating system.
            <para>Example paths:</para>
            <para>Windows: C:/Users/[UserName]/AppData/Roaming</para>
            <para>MacOS: Library/Application Support</para>
            <para>Linux or BSD: Typically ~/.config</para>
            </summary>
            <returns>The path to the operating system's application data folder.</returns>
        </member>
        <member name="P:Box.Engine.AppContent">
            <summary>
            Retrieves the application content root folder path. For MacOS bundles, it accesses resources within the bundle.
            <para>Note: Uses the EngineSettings.ContentRoot to determine the content root folder path.</para>
            </summary>
            <returns>The string path of the content root folder.</returns>
        </member>
        <member name="P:Box.Engine.AppSaveFolder">
            <summary>
            Retrieves the application content root folder for the save folder.
            <para>Note: You can change the save root folder within EngineSettings.AppSaveRoot.</para>
            </summary>
        </member>
        <member name="P:Box.Engine.AppLogFolder">
            <summary>
            Retrieves the application content root folder for the log folder.
            <para>Note: You can change the log root folder within EngineSettings.AppLogRoot.</para>
            </summary>
        </member>
        <member name="P:Box.Engine.SettingsPath">
            <summary>
            Retrieves the application content root folder for the settings file.
            <para>Note: You can change the settings file within EngineSettings.AppSettings.</para>
            </summary>
        </member>
        <member name="P:Box.Engine.VersionHash">
            <summary>
            Generates a hash value based on the combination of AppVersion and AppName.
            <para>Note: Some prefer using hashed values instead of the original string values.</para>
            </summary>
        </member>
        <member name="P:Box.Engine.Input">
            <summary>
            Current active input map.
            </summary>
        </member>
        <member name="P:Box.Engine.Fullscreen">
            <summary>
            Gets or sets whether the window is in full-screen mode.
            <para>Note: This method does not automatically set your window to full-screen or windowed mode. 
            You need to call ApplyChanges to apply the full-screen settings.</para>
            </summary>
        </member>
        <member name="P:Box.Engine.WindowSize">
            <summary>
            Gets or sets the size of the window.
            <para>Note: Changing this property does not immediately resize the window. 
            Call ApplyChanges to apply the new window size.</para>
            </summary>
        </member>
        <member name="M:Box.Engine.ApplyChanges">
            <summary>
            Applies all video or window-related settings.
            <para>Note: Changes to fullscreen mode, window size, vsync, or other monitor-related settings require calling ApplyChanges.</para>
            </summary>
        </member>
        <member name="M:Box.Engine.#ctor(Box.Services.ServiceManager)">
            <summary>
            Initializes the game engine with the specified settings.
            </summary>
            <param name="serviceManager">
            A <see cref="T:Box.Services.ServiceManager"/> containing various engine configurations such as window size, viewport size, 
            culling settings, and other services needed for the engine to operate. The <see cref="T:Box.Services.ServiceManager"/> manages 
            the lifecycle and resolution of services used throughout the engine.
            </param>
        </member>
        <member name="M:Box.Engine.Finalize">
            <summary>
            Destructor for the Engine.
            </summary>
        </member>
        <member name="M:Box.Engine.Start">
            <summary>
            Starts the game engine.
            </summary>
        </member>
        <member name="M:Box.Engine.Quit">
            <summary>
            Shuts down the game engine and exits the application.
            </summary>
        </member>
        <member name="M:Box.Engine.GetSupportedMonitors(System.Int32,System.Int32)">
            <summary>
            Retrieves the supported monitor resolutions that match the specified aspect ratio.
            </summary>
            <param name="aspectWidth">The aspect ratio width.</param>
            <param name="aspectHeight">The aspect ratio height.</param>
            <returns>A list of supported resolutions based on the given aspect ratio.</returns>
        </member>
        <member name="M:Box.Engine.GetSupportedMonitors">
            <summary>
            Retrieves all supported monitor sizes that your video card supports.
            </summary>
            <returns>A list of supported monitor sizes.</returns>
        </member>
        <member name="M:Box.Engine.GetCurrentMonitor">
            <summary>
            Retrieves the size of your current active monitor.
            <para>Note: For multi-monitors, it selects the primary monitor based on your operating system's configuration.</para>
            </summary>
            <returns>The size of your active monitor.</returns>
        </member>
        <member name="M:Box.Engine.IsMonitorSupported(System.Int32,System.Int32)">
            <summary>
            Checks if a monitor size is supported.
            </summary>
            <param name="width">The width in pixels.</param>
            <param name="height">The height in pixels.</param>
            <returns>True if the monitor size is supported; otherwise, false.</returns>
        </member>
        <member name="M:Box.Engine.IsMonitorSupported(Box.Systems.Vect2)">
            <summary>
            Checks if a monitor size is supported.
            </summary>
            <param name="size">The width and height in pixels.</param>
            <returns>True if the monitor size is supported; otherwise, false.</returns>
        </member>
        <member name="M:Box.Engine.Dispose(System.Boolean)">
            <summary>
            Explicitly disposes of the object.
            </summary>
            <param name="disposing">True if the engine is disposing; otherwise, false.</param>
        </member>
        <member name="M:Box.Engine.Dispose">
            <summary>
            Explicitly disposes of the object.
            </summary>
        </member>
        <member name="T:Box.EngineSettings">
            <summary>
            Engine settings used to configure window size, viewport size, vsync, culling, and other options.
            </summary>
        </member>
        <member name="P:Box.EngineSettings.AppTitle">
            <summary>
            Title of the application to be displayed on the game window.
            <para>Default value: Game</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithAppTitle(System.String)">
            <summary>
            Sets the application title for the engine.
            </summary>
            <param name="value">The title to be set for the application window.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="value"/> is empty or null.
            </exception>
            <remarks>
            This method allows you to set the title of the application window. It returns the current instance of the 
            <see cref="T:Box.EngineSettings"/> class to support a fluent interface, enabling multiple settings to be configured in a chain.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.AppName">
            <summary>
            Folder or name used for ApplicationData.
            <para>Default value: Game</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithAppName(System.String)">
            <summary>
            Sets the application name for the engine.
            </summary>
            <param name="value">The name to be set for the application.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="value"/> is empty or null.
            </exception>
            <remarks>
            This method allows you to set the name of the application. It returns the current instance of the 
            <see cref="T:Box.EngineSettings"/> class, enabling multiple settings to be configured in a fluent, chained manner.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.AppContentRoot">
            <summary>
            Root folder for game content used for loading assets.
            <para>Default value: Content</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithAppContentRoot(System.String)">
            <summary>
            Sets the root directory for the application's content files.
            </summary>
            <param name="value">The directory path for the application's content root.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="value"/> is empty or null.
            </exception>
            <remarks>
            This method allows you to set the root directory for the application’s content, such as textures, models,
            and other assets. It returns the current instance of the <see cref="T:Box.EngineSettings"/> class, enabling
            fluent configuration of engine settings.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.AppSaveRoot">
            <summary>
            Main folder for storing and accessing game saves.
            <para>Default value: Save</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithAppSaveRoot(System.String)">
            <summary>
            Sets the root directory for the application's save data.
            </summary>
            <param name="value">The directory path for the application's save data root.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="value"/> is empty or null.
            </exception>
            <remarks>
            This method allows you to set the root directory where the application’s save data will be stored.
            It returns the current instance of the <see cref="T:Box.EngineSettings"/> class, enabling fluent configuration of settings.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.AppLogRoot">
            <summary>
            Main folder for storing and accessing game logs.
            <para>Default value: Logs</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithAppLogRoot(System.String)">
            <summary>
            Sets the root directory for the application's log files.
            </summary>
            <param name="value">The directory path for the application's log files root.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="value"/> is empty or null.
            </exception>
            <remarks>
            This method allows you to set the root directory where the application’s log files will be stored.
            It returns the current instance of the <see cref="T:Box.EngineSettings"/> class, enabling fluent configuration of settings.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.AppSettings">
            <summary>
            File used for storing game settings.
            <para>Default value: settings.json</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithAppSettings(System.String)">
            <summary>
            Sets the file name for storing the application's settings.
            </summary>
            <param name="value">The file name for storing the application's settings.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="value"/> is empty or null.
            </exception>
            <remarks>
            This method allows you to set the file name where the application's settings will be stored. 
            It returns the current instance of the <see cref="T:Box.EngineSettings"/> class, enabling fluent configuration of settings.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.AppVersion">
            <summary>
            Version of the game application, also converted to a hash within the Engine.
            <para>Default value: 1.0</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithAppVersion(System.String)">
            <summary>
            Sets the version of the application.
            </summary>
            <param name="value">The version string to be set for the application.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="value"/> is empty or null.
            </exception>
            <remarks>
            This method allows you to set the version of the application. It returns the current instance of the 
            <see cref="T:Box.EngineSettings"/> class, enabling fluent configuration of settings.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.IsMacBundle">
            <summary>
            Specifies whether to use Mac bundles for asset loading instead of custom configurations.
            <para>Default value: false</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithIsMacBundle(System.Boolean)">
            <summary>
            Sets whether to use Mac bundles for asset loading instead of custom configurations.
            </summary>
            <param name="value">A boolean indicating whether to use Mac bundles (true) or custom configurations (false).</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <remarks>
            This method allows you to configure whether the engine should load assets using Mac bundles (true) or rely on 
            custom configurations (false). It returns the current instance of the <see cref="T:Box.EngineSettings"/> class, enabling
            fluent configuration of settings.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.UseApplicationData">
            <summary>
            Determines whether to use the current application folder or OS application data for saving game data and log files.
            <para>Default value: false</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithUseApplicationData(System.Boolean)">
            <summary>
            Sets whether to use the current application folder or OS application data for saving game data and log files.
            </summary>
            <param name="value">A boolean indicating whether to use application data (true) or the current application folder (false).</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <remarks>
            This method allows you to configure whether the engine should use the OS's application data folder (true) 
            or the current application folder (false) for saving game data and log files.
            It returns the current instance of the <see cref="T:Box.EngineSettings"/> class, enabling fluent configuration of settings.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.Fullscreen">
            <summary>
            Automatically switch the game to full screen mode on engine startup.
            <para>Default value: false</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithFullscreen(System.Boolean)">
            <summary>
            Sets whether to automatically switch the game to full-screen mode on engine startup.
            </summary>
            <param name="value">A boolean indicating whether the game should start in full-screen mode (true) or windowed mode (false).</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <remarks>
            This method allows you to configure whether the game should automatically switch to full-screen mode upon startup.
            It returns the current instance of the <see cref="T:Box.EngineSettings"/> class, enabling fluent configuration of settings.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.UseTextureHalfOffset">
            <summary>
            Used for pixelated or tile-based games to fix bleeding gaps in textures.
            <para>Default value: false</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithUseTextureHalfOffset(System.Boolean)">
            <summary>
            Sets whether to use a texture half offset to fix bleeding gaps in textures, typically used for pixelated or tile-based games.
            </summary>
            <param name="value">A boolean indicating whether to use a texture half offset (true) to prevent texture gaps, or not (false).</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <remarks>
            This method helps prevent **texture bleeding** issues in pixelated or tile-based games by applying a half offset to textures.
            It returns the current instance of the <see cref="T:Box.EngineSettings"/> class, enabling fluent configuration of settings.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.ClearColor">
            <summary>
            The clear color when the engine clears the screen.
            <para>Default value: CornFlowerBlue</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithClearColor(Box.Graphics.Color)">
            <summary>
            Sets the clear color used when the engine clears the screen.
            </summary>
            <param name="value">The <see cref="T:Box.Graphics.Color"/> to be used as the clear color for the engine's screen clearing process.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <remarks>
            This method allows you to set the clear color for the engine's screen clearing process, typically used as the background color
            when the screen is refreshed each frame. It returns the current instance of the <see cref="T:Box.EngineSettings"/> class, enabling
            fluent configuration of settings.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.Window">
            <summary>
            Represents the size of the game window.
            <para>Default value: 1280x720</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithWindow(System.Int32,System.Int32)">
            <summary>
            Sets the window size for the application.
            </summary>
            <param name="width">The width of the application window.</param>
            <param name="height">The height of the application window.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when either <paramref name="width"/> or <paramref name="height"/> is less than zero.
            </exception>
            <remarks>
            This method allows you to set the size of the application window. It ensures that the provided width and height
            are non-negative, and returns the current instance of the <see cref="T:Box.EngineSettings"/> class, enabling fluent configuration of settings.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.Viewport">
            <summary>
            Represents the game window's viewport size. Adjusts rendering quality based on window size relative to viewport.
            <para>Default value: 320x180</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithViewport(System.Int32,System.Int32)">
            <summary>
            Sets the viewport size for the application, which determines how content is rendered on the screen.
            </summary>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when either <paramref name="width"/> or <paramref name="height"/> is less than zero.
            </exception>
            <remarks>
            This method allows you to set the size of the application's viewport. The viewport defines the rendering area
            for the game’s content. It returns the current instance of the <see cref="T:Box.EngineSettings"/> class, enabling
            fluent configuration of settings.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.Screens">
            <summary>
            Specifies the screen to load when the engine starts.
            <para>Default value: null</para>
            </summary>
        </member>
        <member name="P:Box.EngineSettings.MaxDrawCalls">
            <summary>
            Maximum allowed draw calls to be drawn. Going too low may cut off drawn textures.
            <para>Default value: 128</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithMaxDrawCalls(System.Int32)">
            <summary>
            Sets the maximum number of draw calls allowed in the engine.
            </summary>
            <param name="value">The maximum number of draw calls.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="value"/> is less than 1.
            </exception>
            <remarks>
            This method allows you to configure the maximum number of draw calls that the engine can perform each frame. 
            Setting a value that is too low may cause performance issues or cut off drawn textures.
            It returns the current instance of the <see cref="T:Box.EngineSettings"/> class, enabling fluent configuration of settings.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.DebugDraw">
            <summary>
            Determines whether to display the shapes of all added entities.
            Useful for entities without visual surfaces or alignment panels.
            <para>Note: Enabling this may reduce framerate due to drawing overhead.</para>
            <para>Default value: false</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithDebugDraw(System.Boolean)">
            <summary>
            Sets whether to display the shapes of all added entities for debugging purposes.
            </summary>
            <param name="value">A boolean indicating whether to enable or disable the display of entity shapes (true to enable, false to disable).</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <remarks>
            This method allows you to enable or disable the display of shapes for all added entities. This is useful for debugging,
            particularly for entities that do not have visual surfaces or alignment panels. 
            <para>Note: Enabling this feature may reduce the framerate due to the additional drawing overhead.</para>
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.AntialiasingLevel">
            <summary>
            The level of Antialiasing used. The maximum level depends on your graphics card capabilities.
            <para>Default value: 0</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithAntialiasingLevel(System.Int32)">
            <summary>
            Sets the level of antialiasing to be used by the engine.
            </summary>
            <param name="value">The antialiasing level to be set. The valid range is from 0 (no antialiasing) to the maximum supported by the graphics hardware.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="value"/> is less than 0.
            </exception>
            <remarks>
            This method allows you to configure the level of antialiasing used by the engine to smooth out jagged edges in rendered graphics.
            Setting a higher value results in better visual quality but may impact performance. The valid range depends on the graphics card capabilities.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.VSync">
            <summary>
            Enables or disables Vertical Sync (Vsync). When Vsync is disabled, coroutines may require delta time adjustments to synchronize movements or other processes.
            <para>Default value: true</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithVSync(System.Boolean)">
            <summary>
            Sets whether to enable or disable vertical synchronization (V-Sync) for the engine.
            </summary>
            <param name="value">A boolean indicating whether to enable (true) or disable (false) V-Sync.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <remarks>
            This method allows you to configure whether the engine should synchronize its frame rate with the monitor’s refresh rate.
            Enabling V-Sync can help reduce screen tearing, but may also introduce input lag or affect performance.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.Mouse">
            <summary>
            Controls whether the mouse cursor is displayed within the viewport.
            <para>Default value: true</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithMouse(System.Boolean)">
            <summary>
            Sets whether the mouse cursor should be displayed within the viewport.
            </summary>
            <param name="value">A boolean indicating whether to display the mouse cursor (true) or hide it (false) within the viewport.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <remarks>
            This method allows you to configure whether the mouse cursor should be visible within the application’s viewport.
            Disabling the mouse cursor is useful in certain games or applications where the mouse is not required, such as first-person shooters or custom input systems.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.CullSize">
            <summary>
            Sets a cull size around the camera viewing area to prevent large entities from instantly appearing within the viewport.
            <para>Default value: 16</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithCullSize(System.Int32)">
            <summary>
            Sets the culling size around the camera viewing area to prevent large entities from instantly appearing in the viewport.
            </summary>
            <param name="value">The size of the cull area to be applied around the camera’s viewing area.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="value"/> is less than zero.
            </exception>
            <remarks>
            This method allows you to set the culling size around the camera’s viewing area. Culling is useful to prevent large
            or off-screen entities from being rendered instantly as they enter the viewport, which can help improve performance.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.SafeRegion">
            <summary>
            Sets the default gap for user interface (UI) entities. Can also be used with Renderer alignments.
            <para>Default value: 8</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithSafeRegion(System.Int32)">
            <summary>
            Sets the default gap for user interface (UI) entities to ensure they stay within a safe region.
            </summary>
            <param name="value">The gap size (in pixels) around the UI elements to maintain a safe region.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="value"/> is less than zero.
            </exception>
            <remarks>
            This method sets a gap around the user interface elements, preventing UI elements from overlapping the screen edges
            or from being obscured by the edges of the window. It returns the current instance of the <see cref="T:Box.EngineSettings"/> class,
            enabling fluent configuration of settings.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.GamepadDeadzone">
            <summary>
            Defines the dead zone for gamepad thumbsticks and trigger buttons. 
            <para>Note: Setting it too low may trigger unintended inputs, while setting it too high may fail to detect inputs.</para>
            <para>Valid range: 0.0 to 1.0.</para>
            <para>Default value: 0.2</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithGamepadDeadzone(System.Single)">
            <summary>
            Sets the dead zone for the gamepad's thumbsticks and trigger buttons.
            </summary>
            <param name="value">The dead zone value between 0.0 and 1.0. A value closer to 0.0 will make the thumbsticks and triggers more sensitive, while a value closer to 1.0 will make them less sensitive.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <remarks>
            This method allows you to configure the sensitivity threshold for gamepad input. It ensures that small movements of the thumbsticks
            or trigger buttons don't result in unintended actions, by setting a dead zone where input below the threshold is ignored.
            The value is clamped between 0.0 and 1.0 to prevent invalid input values.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.InputMap">
            <summary>
            Specifies the input used for the engine.
            <para>Note: Multiple inputs can be defined, but only one active input can be used at a time.</para>
            <para>Default value: DefaultInputMap</para>
            </summary>
        </member>
        <member name="P:Box.EngineSettings.LogSignalEvents">
            <summary>
            Specifies whether signals should be logged and displayed through the engine.
            <para>Default value: false</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithLogSignalEvents(System.Boolean)">
            <summary>
            Sets whether signal events should be logged by the engine.
            </summary>
            <param name="value">A boolean indicating whether to enable (true) or disable (false) logging of signal events.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <remarks>
            This method allows you to configure whether the engine should log signal events. Enabling this can be useful for debugging or
            monitoring the behavior of signals within the engine. It returns the current instance of the <see cref="T:Box.EngineSettings"/> class,
            enabling fluent configuration of settings.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.Singletons">
            <summary>
            Singletons are special classes that can be accessed globally within entities or screens.
            <para>Info: For components not associated with entities or screens, use 'Engine.GetSingleton'. Singletons are useful for storing data without needing to create additional instances.</para>
            </summary>
        </member>
        <member name="P:Box.EngineSettings.LogDateTime">
            <summary>
            Specifies whether logged messages should include the time and date.
            <para>Default value: true</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithLogDateTime(System.Boolean)">
            <summary>
            Sets whether to include the date and time in the logged messages.
            </summary>
            <param name="value">A boolean indicating whether to include (true) or exclude (false) the date and time in log messages.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <remarks>
            This method allows you to configure whether the log messages should include the current date and time. Enabling this can be useful for
            tracking events more accurately, especially for debugging or logging purposes. It returns the current instance of the <see cref="T:Box.EngineSettings"/> class,
            enabling fluent configuration of settings.
            </remarks>
        </member>
        <member name="P:Box.EngineSettings.OnError">
            <summary>
            Action to handle error or crash detection when the game crashes.
            <para>Info: It can be used for internal reporting to your game server or other reporting mechanisms for remote error fixing.</para>
            <para>Default value: null</para>
            </summary>
        </member>
        <member name="M:Box.EngineSettings.WithOnError(System.Action{Box.Engine,System.Exception})">
            <summary>
            Sets the error handler action to be called when an error or exception occurs in the engine.
            </summary>
            <param name="value">The action to handle errors, which takes the engine instance and the exception as parameters.</param>
            <returns>The current instance of <see cref="T:Box.EngineSettings"/> to allow method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="value"/> is null.
            </exception>
            <remarks>
            This method allows you to configure a custom error handler that will be triggered when the engine encounters an exception.
            The provided action receives the engine instance and the exception as parameters, allowing you to handle the error as needed.
            </remarks>
        </member>
        <member name="M:Box.EngineSettings.#ctor">
            <summary>
            Engine settings used to configure window size, viewport size, vsync, culling, and other options.
            </summary>
        </member>
        <member name="T:Box.Entities.Container.CanvasPanel">
            <summary>
            Represents a special type of panel that follows the camera. 
            </summary>
            <remarks>
            This panel is designed to keep its contents within the view of the camera, 
            ensuring that UI elements remain visible as the camera moves.
            </remarks>
        </member>
        <member name="P:Box.Entities.Container.CanvasPanel.Offset">
            <summary>
            Gets or sets the offset of the panel. 
            </summary>
            <remarks>
            This offset determines the position of the panel relative to the camera's view.
            </remarks>
        </member>
        <member name="M:Box.Entities.Container.CanvasPanel.#ctor(Box.Entities.Entity[])">
            <summary>
            Initializes a new instance of the <see cref="T:Box.Entities.Container.CanvasPanel"/> class with the specified children entities.
            </summary>
            <param name="children">An array of child entities to be added to the panel.</param>
        </member>
        <member name="M:Box.Entities.Container.CanvasPanel.Update">
            <summary>
            Updates the state of the <see cref="T:Box.Entities.Container.CanvasPanel"/>. 
            This method is called once per frame and is responsible for updating the panel's position 
            and its contents to follow the camera.
            </summary>
        </member>
        <member name="T:Box.Entities.Container.CenterPanel">
            <summary>
            Represents a panel that centers its child element within its own dimensions.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.CenterPanel.RoundedToPixel">
            <summary>
            Gets or sets whether the panel should be rounded to the nearest pixel.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.CenterPanel.Offset">
            <summary>
            Gets or sets the offset of the panel relative to its parent or container.
            </summary>
        </member>
        <member name="M:Box.Entities.Container.CenterPanel.#ctor(Box.Entities.Entity[])">
            <summary>
            Initializes a new instance of the CenterPanel class with the specified child entities.
            </summary>
            <param name="children">The child entities to be added to the panel.</param>
        </member>
        <member name="M:Box.Entities.Container.CenterPanel.Update">
            <summary>
            Updates the internal state of the panel based on layout changes or content updates.
            </summary>
        </member>
        <member name="M:Box.Entities.Container.CenterPanel.UpdateDirtyState">
            <summary>
            Updates the dirty state of the panel, indicating changes that require rendering or layout updates.
            </summary>
        </member>
        <member name="T:Box.Entities.Container.GridPanel">
            <summary>
            Represents a grid panel that arranges child entities by column count instead of width.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.GridPanel.Columns">
            <summary>
            Gets or sets the number of columns in the grid layout.
            <para>This defines how many items are placed per row before wrapping to the next row.</para>
            </summary>
        </member>
        <member name="P:Box.Entities.Container.GridPanel.HorizontalSpacing">
            <summary>
            Gets or sets the spacing in pixels between entities along the horizontal axis.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.GridPanel.VerticalSpacing">
            <summary>
            Gets or sets the spacing in pixels between entities along the vertical axis.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.GridPanel.AutoSize">
            <summary>
            Gets or sets a value indicating whether the grid box automatically resizes based on its content.
            <para>When enabled, the container will expand to fit all visible children.</para>
            </summary>
        </member>
        <member name="P:Box.Entities.Container.GridPanel.HAlign">
            <summary>
            Gets or sets the horizontal alignment of each entity within its cell.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.GridPanel.VAlign">
            <summary>
            Gets or sets the vertical alignment of each entity within its cell.
            </summary>
        </member>
        <member name="M:Box.Entities.Container.GridPanel.#ctor(System.Int32,Box.Entities.Entity[])">
            <summary>
            Initializes a new instance of the <see cref="T:Box.Entities.Container.GridPanel"/> class using the specified number of columns and optional child entities.
            </summary>
            <param name="columns">The number of columns to layout entities in.</param>
            <param name="children">The child entities to add to the grid.</param>
        </member>
        <member name="M:Box.Entities.Container.GridPanel.UpdateDirtyState">
            <summary>
            Updates the layout of the grid box when the state is marked as dirty.
            <para>This repositions children and resizes the container if <see cref="P:Box.Entities.Container.GridPanel.AutoSize"/> is enabled.</para>
            </summary>
        </member>
        <member name="T:Box.Entities.Container.HPanel">
            <summary>
            Represents a panel that aligns entities horizontally within its layout.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.HPanel.AutoSize">
            <summary>
            Gets or sets a value indicating whether the panel adjusts its size based on its content.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.HPanel.VAlign">
            <summary>
            Gets or sets the vertical alignment of the panel within its layout space.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.HPanel.HAlign">
            <summary>
            Gets or sets the horizontal alignment of the panel within its layout space.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.HPanel.Spacing">
            <summary>
            Gets or sets the horizontal alignment of the panel within its layout space.
            </summary>
        </member>
        <member name="M:Box.Entities.Container.HPanel.#ctor(System.Int32,Box.Entities.Entity[])">
            <summary>
            Initializes a new instance of the HPanel class with the specified spacing and child entities.
            </summary>
            <param name="spacing">The spacing between child entities.</param>
            <param name="children">The child entities to be added to the panel.</param>
        </member>
        <member name="M:Box.Entities.Container.HPanel.#ctor(Box.Entities.Entity[])">
            <summary>
            Initializes a new instance of the HPanel class with the default spacing and specified child entities.
            </summary>
            <param name="children">The child entities to be added to the panel.</param>
        </member>
        <member name="M:Box.Entities.Container.HPanel.UpdateDirtyState">
            <summary>
            Updates the internal state of the panel based on changes to its layout or content.
            </summary>
        </member>
        <member name="T:Box.Entities.Container.ListviewItem">
            <summary>
            Represents a base class for creating items in a list view.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.ListviewItem.Listview">
            <summary>
            Gets the list view associated with this list view item.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.ListviewItem.Selected">
            <summary>
            Gets or sets a value indicating whether the list view item is selected.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.ListviewItem.Color">
            <summary>
            Gets or sets the color of the selected list item.
            </summary>
        </member>
        <member name="M:Box.Entities.Container.ListviewItem.OnEnter">
            <summary>
            Called when the list view item enters a selected state.
            </summary>
        </member>
        <member name="T:Box.Entities.Container.Listview">
            <summary>
            Represents a custom list view control entity.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.Listview.UseDiffered">
            <summary>
            Determines whether to use deferred rendering for the list view.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.Listview.ChildCount">
            <summary>
            Gets the number of child items in the list view container.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.Listview.SelectedIndex">
            <summary>
            Gets the index of the currently selected item in the list view.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.Listview.SelectedItem">
            <summary>
            Gets the currently selected item in the list view.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.Listview.AtTop">
            <summary>
            Indicates whether the list view is scrolled to the top.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.Listview.AtBottom">
            <summary>
            Indicates whether the list view is scrolled to the bottom.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.Listview.ScrollIndex">
            <summary>
            Gets the current scroll index of the list view.
            </summary>
        </member>
        <member name="F:Box.Entities.Container.Listview.InputTimeoutDelay">
            <summary>
            Specifies the delay in seconds before input timeout occurs.
            </summary>
        </member>
        <member name="M:Box.Entities.Container.Listview.SelectedItemAs``1">
            <summary>
            Retrieves the currently selected list view item cast as type T.
            </summary>
            <typeparam name="T">The type to cast the selected item to, must derive from ListviewItem.</typeparam>
            <returns>The currently selected item cast as type T, or default if no item is selected.</returns>
        </member>
        <member name="M:Box.Entities.Container.Listview.#ctor(System.Int32,Box.Entities.Container.ListviewItem[])">
            <summary>
            Initializes a new instance of the Listview class with the specified maximum items and child items.
            </summary>
            <param name="maxItems">The maximum number of items visible in the list view.</param>
            <param name="children">Child items to initialize the list view with.</param>
        </member>
        <member name="M:Box.Entities.Container.Listview.OnEnter">
            <summary>
            Called when the list view item enters a selected state.
            </summary>
        </member>
        <member name="M:Box.Entities.Container.Listview.PreviousItem">
            <summary>
            Moves selection to the previous item in the list view.
            </summary>
        </member>
        <member name="M:Box.Entities.Container.Listview.NextItem">
            <summary>
            Moves selection to the next item in the list view.
            </summary>
        </member>
        <member name="M:Box.Entities.Container.Listview.Update">
            <summary>
            Updates the state and rendering of the list view.
            </summary>
        </member>
        <member name="M:Box.Entities.Container.Listview.AddChild(Box.Entities.Entity)">
            <summary>
            Adds a child entity to the list view.
            </summary>
            <param name="entity">The entity to add as a child.</param>
        </member>
        <member name="M:Box.Entities.Container.Listview.AddChild(Box.Entities.Entity[])">
            <summary>
            Adds multiple child entities to the list view.
            </summary>
            <param name="entities">The entities to add as children.</param>
        </member>
        <member name="M:Box.Entities.Container.Listview.AddChild``1(Box.Entities.Entity[])">
            <summary>
            Adds a child entity of type T to the list view.
            </summary>
            <typeparam name="T">The type of child entity to add.</typeparam>
            <param name="entity">The entity to add as a child.</param>
            <returns>The added child entity cast to type T.</returns>
        </member>
        <member name="M:Box.Entities.Container.Listview.InsertChild(System.Int32,Box.Entities.Entity)">
            <summary>
            Inserts a child entity into the list view at the specified index.
            </summary>
            <param name="index">The zero-based index at which the entity should be inserted.</param>
            <param name="entity">The entity to insert as a child.</param>
        </member>
        <member name="M:Box.Entities.Container.Listview.GetChild``1(System.Int32)">
            <summary>
            Gets a child entity at the specified index from the list view.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="index">The zero-based index of the child entity.</param>
            <returns>The child entity at the specified index, cast to type T.</returns>
        </member>
        <member name="M:Box.Entities.Container.Listview.HasChild``1">
            <summary>
            Checks if the list view has a child entity of the specified type.
            </summary>
            <typeparam name="T">The type of entity to check for.</typeparam>
            <returns>True if a child of the specified type exists; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Container.Listview.HasChild(Box.Entities.Entity)">
            <summary>
            Checks if the list view contains the specified child entity.
            </summary>
            <param name="entity">The entity to search for.</param>
            <returns>True if the entity is a child of the list view; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Container.Listview.RemoveChild(Box.Entities.Entity)">
            <summary>
            Removes the specified child entity from the list view.
            </summary>
            <param name="entity">The entity to remove from the list view.</param>
            <returns>True if the entity was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Container.Listview.RemoveChild(Box.Entities.Entity[])">
            <summary>
            Removes multiple child entities from the list view.
            </summary>
            <param name="entities">The entities to remove from the list view.</param>
            <returns>True if all specified entities were successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Container.Listview.ClearChildren">
            <summary>
            Removes all child entities from the list view.
            </summary>
        </member>
        <member name="T:Box.Entities.Container.Panel">
            <summary>
            Represents a generic panel that serves as a container for UI elements.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.Panel.IsDirty">
            <summary>
            Gets or sets a value indicating whether the panel is in a dirty state,
            indicating that its content or layout has changed and needs updating.
            </summary>
        </member>
        <member name="M:Box.Entities.Container.Panel.#ctor(Box.Entities.Entity[])">
            <summary>
            Initializes a new instance of the Panel class with the specified child entities.
            </summary>
            <param name="children">The child entities to be added to the panel.</param>
        </member>
        <member name="M:Box.Entities.Container.Panel.OnEnter">
            <summary>
            Called when the panel enters the active state.
            </summary>
        </member>
        <member name="M:Box.Entities.Container.Panel.Update">
            <summary>
            Updates the panel's state and behavior.
            </summary>
        </member>
        <member name="M:Box.Entities.Container.Panel.UpdateDirtyState">
            <summary>
            Updates the dirty state of the panel.
            </summary>
        </member>
        <member name="M:Box.Entities.Container.Panel.AddChild(Box.Entities.Entity)">
            <summary>
            Adds children entity to the panel.
            </summary>
            <param name="entity">Entities to add as children.</param>
        </member>
        <member name="M:Box.Entities.Container.Panel.AddChild(Box.Entities.Entity[])">
            <summary>
            Adds children entities to the panel.
            </summary>
            <param name="children">Entities to add as children.</param>
        </member>
        <member name="M:Box.Entities.Container.Panel.AddChild``1(Box.Entities.Entity[])">
            <summary>
            Adds children entities to the panel and returns the added child panel of type T.
            </summary>
            <typeparam name="T">Type of panel to add.</typeparam>
            <param name="children">Entities to add as children.</param>
            <returns>The added child panel of type T.</returns>
        </member>
        <member name="M:Box.Entities.Container.Panel.InsertChild(System.Int32,Box.Entities.Entity)">
            <summary>
            Inserts an entity at the specified index in the panel's children collection.
            </summary>
            <param name="index">The index at which to insert the entity.</param>
            <param name="entity">The entity to insert.</param>
        </member>
        <member name="M:Box.Entities.Container.Panel.RemoveChild(Box.Entities.Entity)">
            <summary>
            Removes the specified entity from the panel's children collection.
            </summary>
            <param name="entity">The entity to remove.</param>
            <returns><c>true</c> if the entity was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Box.Entities.Container.Panel.RemoveChild(Box.Entities.Entity[])">
            <summary>
            Removes the specified entities from the panel's children collection.
            </summary>
            <param name="children">The entities to remove.</param>
            <returns><c>true</c> if all entities were successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Box.Entities.Container.Panel.ClearChildren">
            <summary>
            Clears all children from the panel.
            </summary>
        </member>
        <member name="T:Box.Entities.Container.VPanel">
            <summary>
            Represents a panel that aligns entities vertically within its layout.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.VPanel.AutoSize">
            <summary>
            Gets or sets a value indicating whether the panel adjusts its size based on its content.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.VPanel.VAlign">
            <summary>
            Gets or sets the vertical alignment of the panel within its layout space.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.VPanel.HAlign">
            <summary>
            Gets or sets the horizontal alignment of the panel within its layout space.
            </summary>
        </member>
        <member name="P:Box.Entities.Container.VPanel.Spacing">
            <summary>
            Gets or sets the horizontal alignment of the panel within its layout space.
            </summary>
        </member>
        <member name="M:Box.Entities.Container.VPanel.#ctor(System.Int32,Box.Entities.Entity[])">
            <summary>
            Initializes a new instance of the VPanel class with the specified spacing and child entities.
            </summary>
            <param name="spacing">The spacing between child entities.</param>
            <param name="children">The child entities to be added to the panel.</param>
        </member>
        <member name="M:Box.Entities.Container.VPanel.#ctor(Box.Entities.Entity[])">
            <summary>
            Initializes a new instance of the VPanel class with the default spacing and specified child entities.
            </summary>
            <param name="children">The child entities to be added to the panel.</param>
        </member>
        <member name="M:Box.Entities.Container.VPanel.UpdateDirtyState">
            <summary>
            Updates the internal state of the panel based on changes to its layout or content.
            </summary>
        </member>
        <member name="T:Box.Entities.Entity">
            <summary>
            Represents a base class for game entities.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Children">
            <summary>
            Gets the collection of child entities associated with this entity.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.IsExiting">
            <summary>
            Gets or sets whether the entity is currently in the process of exiting.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Parent">
            <summary>
            Gets the parent entity that contains this entity.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.IsParent">
            <summary>
            Determines if this entity has a parent.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.IsChild">
            <summary>
            Determines if this entity is a child of another entity.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Screen">
            <summary>
            Gets the screen that contains this entity.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.KeepAlive">
            <summary>
            Gets or sets whether the entity should be kept alive even if not currently not visible to the screen.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Camera">
            <summary>
            Gets the camera associated with the screen that contains this entity.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.ChildCount">
            <summary>
            Gets the number of child entities that this entity contains.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Center">
            <summary>
            Gets the center point of the entity as a <see cref="T:Box.Systems.Vect2"/>.
            </summary>
            <remarks>
            The center is calculated as half the size of the entity, assuming the size is represented as a 2D vector.
            </remarks>
        </member>
        <member name="P:Box.Entities.Entity.ChildIndex">
            <summary>
            Gets the index of this entity among its parent's child entities, if it has a parent; otherwise, returns -1.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.LocalBounds">
            <summary>
            Gets the local bounding rectangle of the entity relative to its own position and size.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Bounds">
            <summary>
            Gets the bounding rectangle of the entity in global coordinates.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.GlobalBounds">
            <summary>
            Gets the global bounding rectangle of the entity, considering its parent-child hierarchy if applicable.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Name">
            <summary>
            Gets or sets the name of the entity. If not explicitly set, a unique name is generated based on existing names.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Visible">
            <summary>
            Gets or sets a value indicating whether the entity is visible.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Layer">
            <summary>
            Gets or sets the layer index of the entity.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.LocalPosition">
            <summary>
            Gets or sets the local position relative to the parent entity.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Position">
            <summary>
            Gets or sets the position relative to the screen or world coordinates.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.GlobalPosition">
            <summary>
            Gets the global position of the entity in the world coordinates.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Width">
            <summary>
            Gets the width of the entity.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Height">
            <summary>
            Gets the height of the entity.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Size">
            <summary>
            Gets or sets the size of the entity.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.ScreenManager">
            <summary>
            Gets the instance of the screen manager.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Assets">
            <summary>
            Gets the instance of the assets manager.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Engine">
            <summary>
            Gets the instance of the game engine.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Input">
            <summary>
            Gets the input map from the game engine.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Clock">
            <summary>
            Gets the instance of the game clock.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Signal">
            <summary>
            Gets the instance of the signal manager.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Coroutine">
            <summary>
            Gets the instance of the coroutine manager.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Renderer">
            <summary>
            Gets the instance of the renderer.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Rand">
            <summary>
            Gets the instance of the random number generator.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.SoundManager">
            <summary>
            Gets the instance of the sound manager.
            </summary>
        </member>
        <member name="P:Box.Entities.Entity.Log">
            <summary>
            Gets the instance of the logging system.
            </summary>
        </member>
        <member name="M:Box.Entities.Entity.GetService``1">
            <summary>
            Gets a singleton instance of a specified type.
            </summary>
            <typeparam name="T">The type of singleton to retrieve.</typeparam>
            <returns>The singleton instance of type T.</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetSurface(System.String)">
            <summary>
            Retrieves a Surface object by name from the Assets manager.
            </summary>
            <param name="name">The name of the Surface.</param>
            <returns>The Surface object associated with the name.</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetSurface(System.Enum)">
            <summary>
            Retrieves a Surface object by enum value from the Assets manager.
            </summary>
            <param name="name">The enum value representing the name of the Surface.</param>
            <returns>The Surface object associated with the enum value.</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetSurfaceFromFile(System.String)">
            <summary>
            Retrieves a Surface object by filename from the Assets manager.
            </summary>
            <param name="filename">The filename of the Surface.</param>
            <returns>The Surface object loaded from the specified file.</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetSurfaceFromTileset(Box.Loaders.Maps.Data.MapTileset)">
            <summary>
            Retrieves a Surface object from a MapTileset object.
            </summary>
            <param name="tileset">The MapTileset containing the filename of the Surface.</param>
            <returns>The Surface object loaded from the tileset's filename.</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetSurfaceFromTileset(Box.Loaders.Maps.Data.Map,System.Int32)">
            <summary>
            Retrieves a <see cref="T:Box.Graphics.Surface"/> from a tileset in the given <see cref="T:Box.Loaders.Maps.Data.Map"/> by its unique tileset ID.
            </summary>
            <param name="map">The map containing the tileset collection.</param>
            <param name="id">The unique ID of the tileset to retrieve the surface for.</param>
            <returns>The <see cref="T:Box.Graphics.Surface"/> associated with the specified tileset ID.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if no tileset with the specified ID is found in the map.
            </exception>
        </member>
        <member name="M:Box.Entities.Entity.GetTilesetSurfaceFromPack(Box.Loaders.Maps.Data.MapTileset)">
            <summary>
            Retrieves a Surface object from a MapTileset object from BoxPack.
            </summary>
            <param name="tileset">The MapTileset containing the filename of the Surface.</param>
            <returns>The Surface object loaded from the tileset's filename.</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetMap(System.String)">
            <summary>
            Retrieves a Map object by name from the Assets manager.
            </summary>
            <param name="name">The name of the Map.</param>
            <returns>The Map object associated with the name.</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetMap(System.Enum)">
            <summary>
            Retrieves a Map object by enum value from the Assets manager.
            </summary>
            <param name="name">The enum value representing the name of the Map.</param>
            <returns>The Map object associated with the enum value.</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetSound(System.String)">
            <summary>
            Retrieves a Sound object by name from the Assets manager.
            </summary>
            <param name="name">The name of the Sound.</param>
            <returns>The Sound object associated with the name.</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetSound(System.Enum)">
            <summary>
            Retrieves a Sound object by enum value from the Assets manager.
            </summary>
            <param name="name">The enum value representing the name of the Sound.</param>
            <returns>The Sound object associated with the enum value.</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetFont(System.String)">
            <summary>
            Retrieves a Font object by name from the Assets manager.
            </summary>
            <param name="name">The name of the Font.</param>
            <returns>The Font object associated with the name.</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetFont(System.Enum)">
            <summary>
            Retrieves a Font object by enum value from the Assets manager.
            </summary>
            <param name="name">The enum value representing the name of the Font.</param>
            <returns>The Font object associated with the enum value.</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetSheet(System.String)">
            <summary>
            Retrieves a Spritesheet object by name from the Assets manager.
            </summary>
            <param name="name">The name of the Spritesheet.</param>
            <returns>The Spritesheet object associated with the name.</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetSheet(System.Enum)">
            <summary>
            Retrieves a Spritesheet object by enum value from the Assets manager.
            </summary>
            <param name="name">The enum value representing the name of the Spritesheet.</param>
            <returns>The Spritesheet object associated with the enum value.</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetGlobalPosition(Box.Entities.Entity)">
            <summary>
            Gets the global position of the specified entity.
            </summary>
            <param name="entity">The entity to get the global position for.</param>
            <returns>The global position as a Vect2 (assuming Vect2 is a vector type).</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetGlobalPosition(Box.Systems.Vect2)">
            <summary>
            Calculates the global position of the current entity by combining its local position with the specified global position vector.
            </summary>
            <param name="position">The local position of the entity as a <see cref="T:Box.Systems.Vect2"/>.</param>
            <returns>The global position of the entity as a <see cref="T:Box.Systems.Vect2"/>.</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetLocalPosition(Box.Entities.Entity)">
            <summary>
            Gets the local position of the specified entity.
            </summary>
            <param name="entity">The entity to get the local position for.</param>
            <returns>The local position as a Vect2 (assuming Vect2 is a vector type).</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetLocalPosition(Box.Systems.Vect2)">
            <summary>
            Calculates the local position of the current entity relative to a specified global position vector.
            </summary>
            <param name="position">The global position of the entity as a <see cref="T:Box.Systems.Vect2"/>.</param>
        </member>
        <member name="M:Box.Entities.Entity.AnyParentOfType``1(``0@)">
            <summary>
            Checks if there is any parent of the specified type T.
            </summary>
            <typeparam name="T">The type of parent entity to check for.</typeparam>
            <param name="result">If found, returns the parent entity of type T.</param>
            <returns>True if a parent of type T was found, false otherwise.</returns>
        </member>
        <member name="M:Box.Entities.Entity.GetParents``1">
            <summary>
            Retrieves all parents of the specified type T for this entity.
            </summary>
            <typeparam name="T">The type of parent entities to retrieve.</typeparam>
            <returns>An enumerable collection of parent entities of type T.</returns>
        </member>
        <member name="M:Box.Entities.Entity.LoadBitmapFont(System.String,System.Int32,System.Int32)">
            <summary>
            Loads a bitmap font from the specified file path.
            </summary>
            <param name="path">The file path to the bitmap font.</param>
            <param name="spacing">The spacing between characters. Default is 0.</param>
            <param name="linespacing">The spacing between lines of text. Default is 0.</param>
            <returns>A <see cref="T:Box.Graphics.Fonts.BitmapFont"/> object representing the loaded font.</returns>
        </member>
        <member name="M:Box.Entities.Entity.LoadFont(System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Loads a generic font with the specified settings.
            </summary>
            <param name="path">The file path to the font.</param>
            <param name="size">The size of the font.</param>
            <param name="useSmoothing">Whether to use smoothing. Default is false.</param>
            <param name="bold">Whether to render the font as bold. Default is false.</param>
            <param name="thickness">The thickness of the font. Default is 0.</param>
            <param name="spacing">The spacing between characters. Default is 0.</param>
            <param name="lineSpacing">The spacing between lines of text. Default is 0.</param>
            <returns>A <see cref="T:Box.Graphics.Fonts.GenericFont"/> object representing the loaded font.</returns>
        </member>
        <member name="M:Box.Entities.Entity.LoadMap(System.String)">
            <summary>
            Loads a map from the specified file path.
            </summary>
            <param name="path">The file path to the map.</param>
            <returns>A <see cref="T:Box.Loaders.Maps.Data.Map"/> object representing the loaded map.</returns>
        </member>
        <member name="M:Box.Entities.Entity.LoadPack(System.String)">
            <summary>
            Loads a pack of assets from the specified file path.
            </summary>
            <param name="path">The file path to the asset pack.</param>
        </member>
        <member name="M:Box.Entities.Entity.LoadSound(System.String)">
            <summary>
            Loads a sound from the specified file path.
            </summary>
            <param name="path">The file path to the sound.</param>
            <returns>A <see cref="T:Box.Sounds.Sound"/> object representing the loaded sound.</returns>
        </member>
        <member name="M:Box.Entities.Entity.LoadSpriteSheet(System.String)">
            <summary>
            Loads a sprite sheet from the specified file path.
            </summary>
            <param name="path">The file path to the sprite sheet.</param>
            <returns>A <see cref="T:Box.Loaders.Spritesheets.Spritesheet"/> object representing the loaded sprite sheet.</returns>
        </member>
        <member name="M:Box.Entities.Entity.LoadSubSurface(System.String,Box.Systems.Rect2,System.Boolean,System.Boolean)">
            <summary>
            Loads a subsection of a surface (texture) from the specified file path and region.
            </summary>
            <param name="path">The file path to the texture.</param>
            <param name="region">The rectangular region of the surface to load.</param>
            <param name="repeat">Whether the texture should repeat. Default is false.</param>
            <param name="smooth">Whether to use smoothing on the texture. Default is false.</param>
            <returns>A <see cref="T:Box.Graphics.Surface"/> object representing the loaded subsection.</returns>
        </member>
        <member name="M:Box.Entities.Entity.LoadSurface(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads a surface (texture) from the specified file path.
            </summary>
            <param name="path">The file path to the texture.</param>
            <param name="repeat">Whether the texture should repeat. Default is false.</param>
            <param name="smooth">Whether to use smoothing on the texture. Default is false.</param>
            <returns>A <see cref="T:Box.Graphics.Surface"/> object representing the loaded texture.</returns>
        </member>
        <member name="M:Box.Entities.Entity.ChildrenAs``1">
            <summary>
            Casts the child entities to the specified type.
            </summary>
            <typeparam name="T">The target type to cast the children to. Must be a subclass of <see cref="T:Box.Entities.Entity"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the children cast to the specified type.</returns>
            <exception cref="T:System.InvalidCastException">
            Thrown if any child entity cannot be cast to the specified type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Box.Entities.Entity.Update">
            <summary>
            Update method to be overridden by subclasses for per-frame update logic and draw logic.
            </summary>
        </member>
        <member name="M:Box.Entities.Entity.OnEnter">
            <summary>
            Method to be overridden by subclasses for handling entry into a state or context.
            </summary>
        </member>
        <member name="M:Box.Entities.Entity.OnExit">
            <summary>
            Method to be overridden by subclasses for handling exit from a state or context.
            </summary>
        </member>
        <member name="M:Box.Entities.Entity.AddChild(Box.Entities.Entity)">
            <summary>
            Adds a single child entity to this parent entity.
            </summary>
            <param name="entity">The child entity to add.</param>
        </member>
        <member name="M:Box.Entities.Entity.AddChild(Box.Entities.Entity[])">
            <summary>
            Adds multiple child entities to this parent entity.
            </summary>
            <param name="entities">The array of child entities to add.</param>
        </member>
        <member name="M:Box.Entities.Entity.AddChild``1(Box.Entities.Entity[])">
            <summary>
            Adds multiple child entities of type T to this parent entity.
            </summary>
            <typeparam name="T">The type of child entities to add.</typeparam>
            <param name="entities">The array of child entities to add.</param>
            <returns>The first child entity of type T added.</returns>
        </member>
        <member name="M:Box.Entities.Entity.InsertChild(System.Int32,Box.Entities.Entity)">
            <summary>
            Inserts a child entity at the specified index in this parent entity.
            </summary>
            <param name="index">The index at which to insert the child entity.</param>
            <param name="entity">The child entity to insert.</param>
        </member>
        <member name="M:Box.Entities.Entity.GetChild``1(System.Int32)">
            <summary>
            Retrieves the child entity of type T at the specified index.
            </summary>
            <typeparam name="T">The type of child entity to retrieve.</typeparam>
            <param name="index">The index of the child entity to retrieve.</param>
            <returns>The child entity of type T at the specified index, or null if not found.</returns>
        </member>
        <member name="M:Box.Entities.Entity.HasChild``1">
            <summary>
            Checks if the parent entity has any child of type T.
            </summary>
            <typeparam name="T">The type of child entity to check for.</typeparam>
            <returns>True if the parent entity has a child of type T, false otherwise.</returns>
        </member>
        <member name="M:Box.Entities.Entity.HasChild(Box.Entities.Entity)">
            <summary>
            Checks if the parent entity contains the specified child entity.
            </summary>
            <param name="entity">The child entity to check for.</param>
            <returns>True if the parent entity contains the specified child entity, false otherwise.</returns>
        </member>
        <member name="M:Box.Entities.Entity.RemoveChild(Box.Entities.Entity)">
            <summary>
            Removes a specific child entity from the parent entity.
            </summary>
            <param name="entity">The child entity to remove.</param>
            <returns>True if the child entity was successfully removed; false if the child entity was not found.</returns>
        </member>
        <member name="M:Box.Entities.Entity.RemoveChild(Box.Entities.Entity[])">
            <summary>
            Removes multiple child entities from the parent entity.
            </summary>
            <param name="entities">The array of child entities to remove.</param>
            <returns>True if all specified child entities were successfully removed; false if any of the child entities were not found.</returns>
        </member>
        <member name="M:Box.Entities.Entity.ClearChildren">
            <summary>
            Clears all child entities from the parent entity.
            </summary>
        </member>
        <member name="M:Box.Entities.Entity.Destroy">
            <summary>
            Destroys the parent entity and its children, cleaning up resources.
            </summary>
        </member>
        <member name="M:Box.Entities.Entity.StartRoutineDelayed(System.Single,System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine with a delay.
            </summary>
            <param name="delay">The delay in seconds before starting the coroutine.</param>
            <param name="routine">The IEnumerator coroutine routine to start.</param>
            <returns>A handle to the coroutine, which can be used for further management.</returns>
        </member>
        <member name="M:Box.Entities.Entity.StartRoutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine immediately.
            </summary>
            <param name="routine">The IEnumerator coroutine routine to start.</param>
            <returns>A handle to the coroutine, which can be used for further management.</returns>
        </member>
        <member name="M:Box.Entities.Entity.HasRoutine(Box.Coroutines.CoroutineHandle)">
            <summary>
            Checks if a coroutine with the specified handle is currently running.
            </summary>
            <param name="handle">The handle of the coroutine to check.</param>
            <returns>True if the coroutine with the specified handle is running; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Entity.HasRoutine(System.Collections.IEnumerator)">
            <summary>
            Checks if a coroutine with the specified IEnumerator is currently running.
            </summary>
            <param name="enumerator">The IEnumerator coroutine to check.</param>
            <returns>True if the coroutine with the specified IEnumerator is running; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Entity.StopRoutine(Box.Coroutines.CoroutineHandle)">
            <summary>
            Stops a coroutine with the specified handle.
            </summary>
            <param name="handle">The handle of the coroutine to stop.</param>
            <returns>True if the coroutine was successfully stopped; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Entity.StopRoutine(System.Collections.IEnumerator)">
            <summary>
            Stops a coroutine with the specified IEnumerator.
            </summary>
            <param name="handle">The IEnumerator of the coroutine to stop.</param>
            <returns>True if the coroutine was successfully stopped; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Entity.ClearRoutines">
            <summary>
            Clears all running coroutines.
            </summary>
        </member>
        <member name="M:Box.Entities.Entity.Connect(System.String,System.Action{Box.Signals.SignalHandle})">
            <summary>
            Connects a handler function to a signal identified by name.
            </summary>
            <param name="name">The name of the signal to connect to.</param>
            <param name="handle">The action (handler) to be called when the signal is emitted.</param>
        </member>
        <member name="M:Box.Entities.Entity.Connect(System.Enum,System.Action{Box.Signals.SignalHandle})">
            <summary>
            Connects a handler function to a signal identified by an enum value.
            </summary>
            <param name="name">The enum value representing the signal to connect to.</param>
            <param name="handle">The action (handler) to be called when the signal is emitted.</param>
        </member>
        <member name="M:Box.Entities.Entity.Emit(System.String,System.Object[])">
            <summary>
            Emits (triggers) a signal identified by name, passing optional data to its handlers.
            </summary>
            <param name="name">The name of the signal to emit.</param>
            <param name="data">Optional data to pass to the signal handlers.</param>
        </member>
        <member name="M:Box.Entities.Entity.Emit(System.Enum,System.Object[])">
            <summary>
            Emits (triggers) a signal identified by an enum value, passing optional data to its handlers.
            </summary>
            <param name="name">The enum value representing the signal to emit.</param>
            <param name="data">Optional data to pass to the signal handlers.</param>
        </member>
        <member name="M:Box.Entities.Entity.EmitDelayed(System.Single,System.String,System.Object[])">
            <summary>
            Emits (triggers) a signal with a delay, identified by its name, passing optional data to its handlers.
            </summary>
            <param name="delay">The delay in seconds before emitting the signal.</param>
            <param name="name">The name of the signal to emit.</param>
            <param name="data">Optional data to pass to the signal handlers.</param>
        </member>
        <member name="M:Box.Entities.Entity.EmitDelayed(System.Single,System.Enum,System.Object[])">
            <summary>
            Emits (triggers) a signal with a delay, identified by an enum value, passing optional data to its handlers.
            </summary>
            <param name="delay">The delay in seconds before emitting the signal.</param>
            <param name="name">The enum value representing the signal to emit.</param>
            <param name="data">Optional data to pass to the signal handlers.</param>
        </member>
        <member name="M:Box.Entities.Entity.HasSignal(System.String)">
            <summary>
            Checks if a signal with the specified name has any connected handlers.
            </summary>
            <param name="name">The name of the signal to check.</param>
            <returns>True if there are handlers connected to the signal; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Entity.HasSignal(System.Enum)">
            <summary>
            Checks if a signal identified by an enum value has any connected handlers.
            </summary>
            <param name="name">The enum value representing the signal to check.</param>
            <returns>True if there are handlers connected to the signal; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Entity.Disconnect(System.String)">
            <summary>
            Disconnects (removes) all handlers connected to a signal identified by its name.
            </summary>
            <param name="name">The name of the signal to disconnect from.</param>
            <returns>True if handlers were disconnected successfully; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Entity.Disconnect(System.Enum)">
            <summary>
            Disconnects (removes) all handlers connected to a signal identified by an enum value.
            </summary>
            <param name="name">An enum value representing the signal to disconnect from.</param>
            <returns>True if handlers were disconnected successfully; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Entity.ClearSignals">
            <summary>
            Clears (removes) all signals and their connected handlers.
            </summary>
        </member>
        <member name="M:Box.Entities.Entity.StartTimer(System.String,System.Single,System.Boolean,System.Action)">
            <summary>
            Adds a timer with a specified name, delay, repeat flag, and action to execute.
            </summary>
            <param name="name">The name of the timer.</param>
            <param name="delay">The delay in seconds before the timer action is executed.</param>
            <param name="repeat">True if the timer should repeat; false otherwise.</param>
            <param name="action">The action to execute when the timer expires.</param>
        </member>
        <member name="M:Box.Entities.Entity.StartTimer(System.Enum,System.Single,System.Boolean,System.Action)">
            <summary>
            Adds a timer with a specified enum name, delay, repeat flag, and action to execute.
            </summary>
            <param name="name">An enum value representing the name of the timer.</param>
            <param name="delay">The delay in seconds before the timer action is executed.</param>
            <param name="repeat">True if the timer should repeat; false otherwise.</param>
            <param name="action">The action to execute when the timer expires.</param>
        </member>
        <member name="M:Box.Entities.Entity.StartTimer(System.Single,System.Boolean,System.Action)">
            <summary>
            Adds a timer with an automatically generated name, specified delay, repeat flag, and action to execute.
            </summary>
            <param name="delay">The delay in seconds before the timer action is executed.</param>
            <param name="repeat">True if the timer should repeat; false otherwise.</param>
            <param name="action">The action to execute when the timer expires.</param>
        </member>
        <member name="M:Box.Entities.Entity.TimerExists(System.String)">
            <summary>
            Checks if a timer with the specified name exists.
            </summary>
            <param name="name">The name of the timer to check.</param>
            <returns>True if a timer with the specified name exists; false otherwise.</returns>
        </member>
        <member name="M:Box.Entities.Entity.TimerExists(System.Enum)">
            <summary>
            Checks if a timer identified by an enum value exists.
            </summary>
            <param name="name">An enum value representing the name of the timer to check.</param>
            <returns>True if a timer with the specified enum name exists; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Entity.StopTimer(System.String)">
            <summary>
            Stops (removes) a timer identified by its name.
            </summary>
            <param name="name">The name of the timer to stop.</param>
            <returns>True if the timer was successfully stopped; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Entity.StopTimer(System.Enum)">
            <summary>
            Stops (removes) a timer identified by an enum value.
            </summary>
            <param name="name">An enum value representing the name of the timer to stop.</param>
            <returns>True if the timer was successfully stopped; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Entity.ClearTimers">
            <summary>
            Clears (removes) all timers associated with the entity.
            </summary>
        </member>
        <member name="T:Box.Entities.Graphics.Animation">
            <summary>
            Struct representing an animation.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.Animation.Name">
            <summary>
            Gets the name of the animation.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.Animation.Surface">
            <summary>
            Gets the surface associated with the animation.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.Animation.Frames">
            <summary>
            Gets the frames of the animation represented as an array of rectangles.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.Animation.Speed">
            <summary>
            Gets the speed of the animation.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.Animation.Looped">
            <summary>
            Gets a value indicating whether the animation is looped.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.Animation.IsEmpty">
            <summary>
            Gets a value indicating whether the animation is considered empty.
            An animation is considered empty if it has no frames or its speed is zero.
            </summary>
        </member>
        <member name="M:Box.Entities.Graphics.Animation.ToString">
            <summary>
            Converts the animation to its string representation.
            </summary>
            <returns>A string that represents the current animation.</returns>
        </member>
        <member name="T:Box.Entities.Graphics.AnimatedSprite">
            <summary>
            Represents an animated sprite entity.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.AnimatedSprite.Color">
            <summary>
            Represents the color of the animated sprite.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.AnimatedSprite.VAlign">
            <summary>
            Represents the vertical alignment of the sprite within its container.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.AnimatedSprite.HAlign">
            <summary>
            Represents the horizontal alignment of the sprite within its container.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.AnimatedSprite.Effect">
            <summary>
            Represents the surface effects applied to the animated sprite.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.AnimatedSprite.State">
            <summary>
            Gets the current state of the animation.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.AnimatedSprite.IsPlaying">
            <summary>
            Gets a value indicating whether the animation is currently playing.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.AnimatedSprite.IsStopped">
            <summary>
            Gets a value indicating whether the animation is currently stopped.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.AnimatedSprite.Size">
            <summary>
            Represents the size of the sprite.
            </summary>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.Add(System.String,Box.Graphics.Surface,Box.Systems.Vect2,System.Int32[],System.Single,System.Boolean)">
            <summary>
            Adds a new animation to the animated sprite.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="surface">The surface containing the animation frames.</param>
            <param name="cellSize">The size of each cell in the animation frames.</param>
            <param name="frames">An array of frame indices representing the animation sequence.</param>
            <param name="speed">The speed of the animation.</param>
            <param name="looped">True if the animation should loop; otherwise, false.</param>
            <returns>The updated instance of AnimatedSprite with the added animation.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.Add(System.Enum,Box.Graphics.Surface,Box.Systems.Vect2,System.Int32[],System.Single,System.Boolean)">
            <summary>
            Adds a new animation to the animated sprite using an enum value as the name.
            </summary>
            <param name="name">The enum value representing the name of the animation.</param>
            <param name="surface">The surface containing the animation frames.</param>
            <param name="cellSize">The size of each cell in the animation frames.</param>
            <param name="frames">An array of frame indices representing the animation sequence.</param>
            <param name="speed">The speed of the animation.</param>
            <param name="looped">True if the animation should loop; otherwise, false.</param>
            <returns>The updated instance of AnimatedSprite with the added animation.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.Add(System.String,Box.Graphics.Surface,Box.Systems.Vect2,System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            Adds a new animation to the animated sprite using frame indices range.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="surface">The surface containing the animation frames.</param>
            <param name="cellSize">The size of each cell in the animation frames.</param>
            <param name="start">The starting frame index of the animation sequence.</param>
            <param name="end">The ending frame index of the animation sequence.</param>
            <param name="speed">The speed of the animation.</param>
            <param name="looped">True if the animation should loop; otherwise, false.</param>
            <returns>The updated instance of AnimatedSprite with the added animation.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.Add(System.Enum,Box.Graphics.Surface,Box.Systems.Vect2,System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            Adds a new animation to the animated sprite using an enum value as the name and frame indices range.
            </summary>
            <param name="name">The enum value representing the name of the animation.</param>
            <param name="surface">The surface containing the animation frames.</param>
            <param name="cellSize">The size of each cell in the animation frames.</param>
            <param name="start">The starting frame index of the animation sequence.</param>
            <param name="end">The ending frame index of the animation sequence.</param>
            <param name="speed">The speed of the animation.</param>
            <param name="looped">True if the animation should loop; otherwise, false.</param>
            <returns>The updated instance of AnimatedSprite with the added animation.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.Add(System.String,Box.Graphics.Surface,Box.Systems.Vect2,System.Int32,System.Single,System.Boolean)">
            <summary>
            Adds a new animation to the animated sprite using a single frame index.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="surface">The surface containing the animation frames.</param>
            <param name="cellSize">The size of each cell in the animation frames.</param>
            <param name="frame">The frame index of the animation sequence.</param>
            <param name="speed">The speed of the animation.</param>
            <param name="looped">True if the animation should loop; otherwise, false.</param>
            <returns>The updated instance of AnimatedSprite with the added animation.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.Add(System.Enum,Box.Graphics.Surface,Box.Systems.Vect2,System.Int32,System.Single,System.Boolean)">
            <summary>
            Adds a new animation to the animated sprite using an enum value as the name and a single frame index.
            </summary>
            <param name="name">The enum value representing the name of the animation.</param>
            <param name="surface">The surface containing the animation frames.</param>
            <param name="cellSize">The size of each cell in the animation frames.</param>
            <param name="frame">The frame index of the animation sequence.</param>
            <param name="speed">The speed of the animation.</param>
            <param name="looped">True if the animation should loop; otherwise, false.</param>
            <returns>The updated instance of AnimatedSprite with the added animation.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.Remove(System.String)">
            <summary>
            Removes an animation from the animated sprite by name.
            </summary>
            <param name="name">The name of the animation to remove.</param>
            <returns>True if the animation was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.Remove(System.Enum)">
            <summary>
            Removes an animation from the animated sprite by enum name.
            </summary>
            <param name="name">The enum value representing the name of the animation to remove.</param>
            <returns>True if the animation was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.Exists(System.String)">
            <summary>
            Checks if an animation exists in the animated sprite by name.
            </summary>
            <param name="name">The name of the animation to check.</param>
            <returns>True if the animation exists; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.Exists(System.Enum)">
            <summary>
            Checks if an animation exists in the animated sprite by enum name.
            </summary>
            <param name="name">The enum value representing the name of the animation to check.</param>
            <returns>True if the animation exists; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.Get(System.String)">
            <summary>
            Gets the animation with the specified name.
            </summary>
            <param name="name">The name of the animation to retrieve.</param>
            <returns>The animation object if found; otherwise, null.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.Get(System.Enum)">
            <summary>
            Gets the animation with the specified enum name.
            </summary>
            <param name="name">The enum value representing the name of the animation to retrieve.</param>
            <returns>The animation object if found; otherwise, null.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.TryGet(System.String,Box.Entities.Graphics.Animation@)">
            <summary>
            Tries to retrieve the animation with the specified name.
            </summary>
            <param name="name">The name of the animation to retrieve.</param>
            <param name="animation">When this method returns, contains the animation associated with the specified name, if the animation exists; otherwise, null.</param>
            <returns>True if the animation was successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.TryGet(System.Enum,Box.Entities.Graphics.Animation@)">
            <summary>
            Tries to retrieve the animation with the specified enum name.
            </summary>
            <param name="name">The enum value representing the name of the animation to retrieve.</param>
            <param name="animation">When this method returns, contains the animation associated with the specified enum name, if the animation exists; otherwise, null.</param>
            <returns>True if the animation was successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.Play(System.String,System.Boolean)">
            <summary>
            Plays the animation with the specified name.
            </summary>
            <param name="name">The name of the animation to play.</param>
            <param name="reset">True to reset the animation frames to zero if currently playing; otherwise, false.</param>
            <returns>The current instance of AnimatedSprite.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.Play(System.Enum,System.Boolean)">
            <summary>
            Plays the animation with the specified enum name.
            </summary>
            <param name="name">The enum value representing the name of the animation to play.</param>
            <param name="reset">True to reset the animation frames to zero if currently playing; otherwise, false.</param>
            <returns>The current instance of AnimatedSprite.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.AnimatedSprite.Update">
            <summary>
            Updates the state of the AnimatedSprite, typically called once per frame.
            </summary>
        </member>
        <member name="T:Box.Entities.Graphics.ColorRect">
            <summary>
            Represents a rectangular entity with color attributes.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.ColorRect.Color">
            <summary>
            The color of the rectangle.
            </summary>
        </member>
        <member name="M:Box.Entities.Graphics.ColorRect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Box.Entities.Graphics.ColorRect"/> class with default color (white).
            </summary>
        </member>
        <member name="M:Box.Entities.Graphics.ColorRect.OnEnter">
            <summary>
            Called when the entity enters the active state.
            </summary>
        </member>
        <member name="M:Box.Entities.Graphics.ColorRect.Update">
            <summary>
            Updates the entity's state in each frame.
            </summary>
        </member>
        <member name="T:Box.Entities.Graphics.Label">
            <summary>
            Represents a graphical label control for displaying text with specified alignment.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.Label.VAlign">
            <summary>
            Vertical alignment of the label within its container.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.Label.HAlign">
            <summary>
            Horizontal alignment of the label within its container.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.Label.Color">
            <summary>
            Color of the label text.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.Label.Offset">
            <summary>
            Offset position of the label relative to its default position.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.Label.Length">
            <summary>
            Gets the length of the displayed text in the label.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.Label.Shadow">
            <summary>
            Determines whether shadow effect is applied to the label text.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.Label.ShadowColor">
            <summary>
            Color of the shadow applied to the label text.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.Label.ShadowOffset">
            <summary>
            Offset of the shadow relative to the text's position.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.Label.VisibleLength">
            <summary>
            Gets or sets the visible length of the displayed text in the label.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.Label.Size">
            <summary>
            Gets or sets the size of the label, represented as a 2D vector.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.Label.Text">
            <summary>
            Gets or sets the text content displayed by the label.
            </summary>
        </member>
        <member name="M:Box.Entities.Graphics.Label.#ctor(Box.Graphics.Fonts.Font)">
            <summary>
            Initializes a new instance of the Label class with the specified font.
            </summary>
            <param name="font">The font used for displaying text in the label.</param>
        </member>
        <member name="M:Box.Entities.Graphics.Label.Update">
            <summary>
            Updates the label's internal state and appearance.
            </summary>
        </member>
        <member name="T:Box.Entities.Graphics.Ninepatch">
            <summary>
            Represents a nine-patch entity used for scalable UI elements.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.Ninepatch.Color">
            <summary>
            The color of the nine-patch entity, defaulting to white.
            </summary>
        </member>
        <member name="M:Box.Entities.Graphics.Ninepatch.#ctor(Box.Graphics.Surface,Box.Systems.Rect2,Box.Systems.Rect2)">
            <summary>
            Constructs a nine-patch entity from the specified surface and source rectangle, with defined corner patches.
            </summary>
            <param name="surface">The surface used for rendering.</param>
            <param name="source">The source rectangle defining the area of the surface to render.</param>
            <param name="corners">The rectangle defining the corners of the nine-patch.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="surface"/> is null.</exception>
        </member>
        <member name="M:Box.Entities.Graphics.Ninepatch.#ctor(Box.Graphics.Surface,Box.Loaders.Spritesheets.Spritesheet,System.String)">
            <summary>
            Constructs a nine-patch entity from the specified surface, spritesheet, and sprite name.
            </summary>
            <param name="surface">The surface used for rendering.</param>
            <param name="sheet">The spritesheet from which to fetch the sprite.</param>
            <param name="name">The name of the sprite in the spritesheet.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="surface"/>, <paramref name="sheet"/>, or <paramref name="name"/> is null.</exception>
        </member>
        <member name="M:Box.Entities.Graphics.Ninepatch.Update">
            <summary>
            Updates the nine-patch entity.
            </summary>
        </member>
        <member name="T:Box.Entities.Graphics.Progressbar">
            <summary>
            Represents a graphical progress bar entity.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.Progressbar.BgColor">
            <summary>
            Background color of the progress bar.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.Progressbar.FgColor">
            <summary>
            Foreground color of the progress bar.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.Progressbar.Type">
            <summary>
            Type of the progress bar (direction of progress).
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.Progressbar.Min">
            <summary>
            Minimum value of the progress bar.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.Progressbar.Max">
            <summary>
            Maximum value of the progress bar.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.Progressbar.Value">
            <summary>
            Current value of the progress bar.
            </summary>
        </member>
        <member name="M:Box.Entities.Graphics.Progressbar.#ctor">
            <summary>
            Constructor for the Progressbar.
            </summary>
        </member>
        <member name="M:Box.Entities.Graphics.Progressbar.OnEnter">
            <summary>
            Method called when the entity enters its active state.
            </summary>
        </member>
        <member name="M:Box.Entities.Graphics.Progressbar.Update">
            <summary>
            Update method called every frame to update the entity's state.
            </summary>
        </member>
        <member name="T:Box.Entities.Graphics.RenderTarget">
            <summary>
            Represents a rendering target that inherits from the Entity class.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.RenderTarget.IsRendering">
            <summary>
            Gets a value indicating whether rendering is currently active.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.RenderTarget.Smoothing">
            <summary>
            Gets or sets a value indicating whether smoothing is enabled.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.RenderTarget.Offset">
            <summary>
            Gets or sets the offset for rendering.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.RenderTarget.Color">
            <summary>
            Gets or sets the color of the render target.
            </summary>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.#ctor(Box.Entities.Entity[])">
            <summary>
            Initializes a new instance of the RenderTarget class with the specified children.
            </summary>
            <param name="children">The child entities to associate with this render target.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.OnEnter">
            <summary>
            Called when the entity enters the scene.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when a parent entity already contains a render target.</exception>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.AddChild(Box.Entities.Entity)">
            <summary>
            Adds a single child entity to this rendering target.
            </summary>
            <param name="entity">The entity to add as a child.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.AddChild(Box.Entities.Entity[])">
            <summary>
            Adds multiple child entities to this rendering target.
            </summary>
            <param name="entities">The entities to add as children.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.AddChild``1(Box.Entities.Entity[])">
            <summary>
            Adds multiple child entities of a specific type to this rendering target.
            </summary>
            <typeparam name="T">The type of the child entities.</typeparam>
            <param name="entity">The entities to add as children.</param>
            <returns>The current instance of the rendering target.</returns>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.Update">
            <summary>
            Updates the state of the entity.
            </summary>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawSurface(Box.Graphics.Surface,Box.Systems.Vect2,Box.Graphics.Color)">
            <summary>
            Draws the specified surface at the given position with the specified color.
            </summary>
            <param name="surface">The surface to draw.</param>
            <param name="positon">The position to draw the surface at.</param>
            <param name="color">The color tint to apply to the surface.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawSurface(Box.Graphics.Surface,Box.Systems.Rect2,Box.Graphics.Color)">
            <summary>
            Draws the specified region of a surface with the given color.
            </summary>
            <param name="surface">The surface to draw.</param>
            <param name="region">The region within the surface to draw.</param>
            <param name="color">The color tint to apply to the surface.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawSurface(Box.Graphics.Surface,Box.Systems.Vect2,Box.Enums.SurfaceEffects,Box.Graphics.Color)">
            <summary>
            Draws a surface at the specified position with the specified effects and color.
            </summary>
            <param name="surface">The surface to draw.</param>
            <param name="positon">The position at which to draw the surface.</param>
            <param name="effects">The effects to apply to the surface drawing (e.g., None, Vertical, Horizontal).</param>
            <param name="color">The color tint to apply to the surface.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawSurface(Box.Graphics.Surface,Box.Systems.Vect2,Box.Systems.Rect2,Box.Graphics.Color)">
            <summary>
            Draws a portion of a surface at the specified position with a color tint.
            </summary>
            <param name="surface">The surface to draw.</param>
            <param name="positon">The position at which to draw the surface.</param>
            <param name="srcRect">The source rectangle defining the portion of the surface to draw.</param>
            <param name="color">The color tint to apply to the surface.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawSurface(Box.Graphics.Surface,Box.Systems.Vect2,Box.Systems.Rect2,Box.Enums.SurfaceEffects,Box.Graphics.Color)">
            <summary>
            Draws a portion of a surface at the specified position with effects and a color tint.
            </summary>
            <param name="surface">The surface to draw.</param>
            <param name="positon">The position at which to draw the surface.</param>
            <param name="srcRect">The source rectangle defining the portion of the surface to draw.</param>
            <param name="effects">The effects to apply when drawing the surface (e.g., flipping).</param>
            <param name="color">The color tint to apply to the surface.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawSurface(Box.Graphics.Surface,Box.Systems.Rect2,Box.Systems.Rect2,Box.Graphics.Color)">
            <summary>
            Draws a portion of a surface onto another surface, specifying both destination and source rectangles, with a color tint applied.
            </summary>
            <param name="surface">The destination surface on which to draw.</param>
            <param name="dstRect">The destination rectangle defining where to draw on the destination surface.</param>
            <param name="srcRect">The source rectangle defining the portion of the source surface to draw.</param>
            <param name="color">The color tint to apply to the drawn portion.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawSurface(Box.Graphics.Surface,Box.Systems.Rect2,Box.Systems.Rect2,Box.Enums.SurfaceEffects,Box.Graphics.Color)">
            <summary>
            Draws a portion of a surface onto another surface with specified effects, using both destination and source rectangles, and applying a color tint.
            </summary>
            <param name="surface">The destination surface on which to draw.</param>
            <param name="dstRect">The destination rectangle defining where to draw on the destination surface.</param>
            <param name="srcRect">The source rectangle defining the portion of the source surface to draw.</param>
            <param name="effects">The surface effects to apply during drawing.</param>
            <param name="color">The color tint to apply to the drawn portion.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawPoint(Box.Systems.Vect2,Box.Graphics.Color)">
            <summary>
            Draws a point at the specified position with the given color.
            </summary>
            <param name="position">The position to draw the point.</param>
            <param name="color">The color of the point.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawLine(Box.Systems.Vect2,Box.Systems.Vect2,Box.Graphics.Color)">
            <summary>
            Draws a line from the specified start position to the end position with the given color.
            </summary>
            <param name="start">The starting position of the line.</param>
            <param name="end">The ending position of the line.</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawRectangle(Box.Systems.Rect2,Box.Graphics.Color)">
            <summary>
            
            </summary>
            <param name="rectangle"></param>
            <param name="color"></param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawRectangle(System.Single,System.Single,System.Single,System.Single,Box.Graphics.Color)">
            <summary>
            Draws a filled rectangle with the specified dimensions and color at the specified position.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="color">The color of the rectangle.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawRectangleFill(Box.Systems.Rect2,Box.Graphics.Color)">
            <summary>
            Draws the outline of a rectangle with the specified bounds and color.
            </summary>
            <param name="rectangle">The bounds of the rectangle to draw.</param>
            <param name="color">The color of the rectangle outline.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawRectangleFill(System.Single,System.Single,System.Single,System.Single,Box.Graphics.Color)">
            <summary>
            Draws the outline of a rectangle with the specified position, dimensions, and color.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="color">The color of the rectangle outline.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawCircle(System.Single,System.Single,System.Single,System.Int32,Box.Graphics.Color)">
            <summary>
            Draws a filled circle with the specified center coordinates, radius, number of segments, and color.
            </summary>
            <param name="x">The x-coordinate of the center of the circle.</param>
            <param name="y">The y-coordinate of the center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="segments">The number of segments used to approximate the circle.</param>
            <param name="color">The color of the circle.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawCircle(Box.Systems.Vect2,System.Single,System.Int32,Box.Graphics.Color)">
            <summary>
            Draws a filled circle with the specified center position, radius, number of segments, and color.
            </summary>
            <param name="position">The center position of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="segments">The number of segments used to approximate the circle.</param>
            <param name="color">The color of the circle.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawCircleFill(System.Single,System.Single,System.Single,System.Int32,Box.Graphics.Color)">
            <summary>
            Draws a filled circle with the specified center coordinates, radius, number of segments, and color.
            </summary>
            <param name="x">The x-coordinate of the center of the circle.</param>
            <param name="y">The y-coordinate of the center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="segments">The number of segments used to approximate the circle.</param>
            <param name="color">The color of the circle.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawCircleFill(Box.Systems.Vect2,System.Single,System.Int32,Box.Graphics.Color)">
            <summary>
            Draws a filled circle with the specified center position, radius, number of segments, and color.
            </summary>
            <param name="position">The center position of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="segments">The number of segments used to approximate the circle.</param>
            <param name="color">The color of the circle.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawText(Box.Graphics.Fonts.Font,System.String,Box.Systems.Vect2,Box.Graphics.Color)">
            <summary>
            Draws the specified text using the given font at the specified position and color.
            </summary>
            <param name="font">The font used to render the text.</param>
            <param name="text">The text to render.</param>
            <param name="position">The position where the text should be drawn.</param>
            <param name="color">The color of the text.</param>
        </member>
        <member name="M:Box.Entities.Graphics.RenderTarget.DrawText(Box.Graphics.Fonts.Font,System.String,System.Single,System.Single,Box.Graphics.Color)">
            <summary>
            Draws the specified text using the given font at the specified position and color.
            </summary>
            <param name="font">The font used to render the text.</param>
            <param name="text">The text to render.</param>
            <param name="x">The x-coordinate of the position where the text should be drawn.</param>
            <param name="y">The y-coordinate of the position where the text should be drawn.</param>
            <param name="color">The color of the text.</param>
        </member>
        <member name="T:Box.Entities.Graphics.Sprite">
            <summary>
            Represents a graphical sprite entity.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.Sprite.Color">
            <summary>
            Represents the color of the sprite.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.Sprite.Effects">
            <summary>
            Represents the surface effects applied to the sprite.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.Sprite.VAlign">
            <summary>
            Represents the vertical alignment of the sprite within its container.
            </summary>
        </member>
        <member name="F:Box.Entities.Graphics.Sprite.HAlign">
            <summary>
            Represents the horizontal alignment of the sprite within its container.
            </summary>
        </member>
        <member name="P:Box.Entities.Graphics.Sprite.Size">
            <summary>
            Represents the size of the sprite.
            </summary>
        </member>
        <member name="M:Box.Entities.Graphics.Sprite.#ctor(Box.Graphics.Surface,Box.Systems.Rect2)">
            <summary>
            Represents a sprite rendered from a surface with a specified source rectangle.
            </summary>
            <param name="surface">The surface to render as a sprite.</param>
            <param name="source">The source rectangle defining the area of the surface to render.</param>
        </member>
        <member name="M:Box.Entities.Graphics.Sprite.#ctor(Box.Graphics.Surface)">
            <summary>
            Initializes a sprite using the given surface. The size of the sprite may stretch or tile the surface.
            </summary>
            <param name="surface">The surface to use for initializing the sprite.</param>
            <remarks>
            Note: Using this constructor without providing a size may result in the entity having no size. 
            This constructor is primarily used for tiling sprites or background sprites.
            </remarks>
        </member>
        <member name="M:Box.Entities.Graphics.Sprite.#ctor(Box.Graphics.Surface,Box.Loaders.Spritesheets.Spritesheet,System.String)">
            <summary>
            Initializes a sprite using a specific region defined by the sprite sheet.
            </summary>
            <param name="surface">The surface to render as a sprite.</param>
            <param name="sheet">The sprite sheet containing the region definitions.</param>
            <param name="name">The name of the region within the sprite sheet.</param>
        </member>
        <member name="M:Box.Entities.Graphics.Sprite.#ctor(Box.Graphics.Surface,Box.Systems.Vect2,System.Int32)">
            <summary>
            Initializes a sprite using a specific cell index from a grid of cells within the surface.
            </summary>
            <param name="surface">The surface to render as a sprite.</param>
            <param name="cellSize">The size of each cell in the grid.</param>
            <param name="index">The index of the cell to use as the source.</param>
        </member>
        <member name="M:Box.Entities.Graphics.Sprite.Update">
            <summary>
            Updates the state or behavior of the object during each frame or update cycle.
            </summary>
        </member>
        <member name="T:Box.Entities.Inputs.BaseButton">
            <summary>
            A basic button that contains no texture but useful to detect mouse enter, mouse exit, pressed, and released events.
            </summary>
        </member>
        <member name="F:Box.Entities.Inputs.BaseButton.ClickState">
            <summary>
            Represents the click state triggered on press or release events.
            </summary>
        </member>
        <member name="F:Box.Entities.Inputs.BaseButton.Click">
            <summary>
            Occurs when the button is clicked.
            </summary>
        </member>
        <member name="P:Box.Entities.Inputs.BaseButton.Enabled">
            <summary>
            Gets or sets a value indicating whether the button is enabled.
            </summary>
        </member>
        <member name="M:Box.Entities.Inputs.BaseButton.OnNormal">
            <summary>
            Called when the button is released or normal button state.
            </summary>
        </member>
        <member name="M:Box.Entities.Inputs.BaseButton.OnDown">
            <summary>
            Called when the button is pressed.
            </summary>
        </member>
        <member name="M:Box.Entities.Inputs.BaseButton.OnDisabled">
            <summary>
            Called when the button is disabled.
            </summary>
        </member>
        <member name="M:Box.Entities.Inputs.BaseButton.OnHoverEnter">
            <summary>
            Called when the mouse pointer hovers over the button.
            </summary>
        </member>
        <member name="M:Box.Entities.Inputs.BaseButton.OnHoverExit">
            <summary>
            Called when the mouse pointer exits the button's area.
            </summary>
        </member>
        <member name="M:Box.Entities.Inputs.BaseButton.OnClick">
            <summary>
            Called when the button is clicked.
            </summary>
        </member>
        <member name="M:Box.Entities.Inputs.BaseButton.OnEnter">
            <summary>
            Called when the entity is added to the screen.
            </summary>
        </member>
        <member name="M:Box.Entities.Inputs.BaseButton.Update">
            <summary>
            Updates the button's state.
            </summary>
        </member>
        <member name="T:Box.Entities.Triggers.SignalTrigger">
            <summary>
            When a signal is raised, it will trigger this entity to do some action.
            </summary>
        </member>
        <member name="T:Box.Entities.Triggers.TimerTrigger">
            <summary>
            Triggers an action after a specified amount of time has passed. Can be configured to trigger once or repeatedly.
            </summary>
        </member>
        <member name="P:Box.Entities.Triggers.TimerTrigger.Time">
            <summary>
            Gets the total duration of the timer in seconds.
            </summary>
        </member>
        <member name="P:Box.Entities.Triggers.TimerTrigger.Elapsed">
            <summary>
            Gets the time elapsed since the timer started.
            </summary>
        </member>
        <member name="P:Box.Entities.Triggers.TimerTrigger.IsRunning">
            <summary>
            Indicates whether the timer is currently running.
            </summary>
        </member>
        <member name="M:Box.Entities.Triggers.TimerTrigger.#ctor(System.Single,System.Action,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Box.Entities.Triggers.TimerTrigger"/> class.
            </summary>
            <param name="time">The time in seconds after which the trigger will activate.</param>
            <param name="onTriggered">The action to invoke when the timer completes.</param>
            <param name="oneShot">Whether the trigger should fire only once.</param>
            <param name="autoStart">Whether the timer should start immediately upon creation.</param>
        </member>
        <member name="M:Box.Entities.Triggers.TimerTrigger.Start">
            <summary>
            Starts or restarts the timer from zero.
            Useful for triggering the timer manually or restarting after a stop.
            </summary>
            <returns>Returns the current <see cref="T:Box.Entities.Triggers.TimerTrigger"/> instance for chaining.</returns>
        </member>
        <member name="M:Box.Entities.Triggers.TimerTrigger.Stop">
            <summary>
            Stops the timer, preventing it from triggering until restarted.
            </summary>
            <returns>Returns the current <see cref="T:Box.Entities.Triggers.TimerTrigger"/> instance for chaining.</returns>
        </member>
        <member name="M:Box.Entities.Triggers.TimerTrigger.Restart">
            <summary>
            Stops and immediately restarts the timer from zero.
            This is a shortcut for calling <see cref="M:Box.Entities.Triggers.TimerTrigger.Stop"/> followed by <see cref="M:Box.Entities.Triggers.TimerTrigger.Start"/>.
            </summary>
            <returns>Returns the current <see cref="T:Box.Entities.Triggers.TimerTrigger"/> instance for chaining.</returns>
        </member>
        <member name="M:Box.Entities.Triggers.TimerTrigger.Update">
            <summary>
            Updates the timer. Should be called each frame.
            </summary>
        </member>
        <member name="T:Box.Enums.ActiveInputState">
            <summary>
            Represents the active input states for controlling the game.
            </summary>
        </member>
        <member name="F:Box.Enums.ActiveInputState.Keyboard">
            <summary>
            Keyboard input control.
            </summary>
        </member>
        <member name="F:Box.Enums.ActiveInputState.Gamepad">
            <summary>
            Gamepad input control.
            </summary>
        </member>
        <member name="T:Box.Enums.AnimationState">
            <summary>
            Enum representing the state of an animation.
            </summary>
        </member>
        <member name="F:Box.Enums.AnimationState.Playing">
            <summary>
            The animation is currently playing.
            </summary>
        </member>
        <member name="F:Box.Enums.AnimationState.Stopped">
            <summary>
            The animation is stopped.
            </summary>
        </member>
        <member name="T:Box.Enums.BaseButtonClickState">
            <summary>
            Represents the state of a button click.
            </summary>
        </member>
        <member name="F:Box.Enums.BaseButtonClickState.Pressed">
            <summary>
            The button is currently pressed.
            </summary>
        </member>
        <member name="F:Box.Enums.BaseButtonClickState.Released">
            <summary>
            The button has been released.
            </summary>
        </member>
        <member name="T:Box.Enums.DefaultInputs">
            <summary>
            Represents the default input mappings. If the player doesn't create their own input map, this set is used.
            </summary>
        </member>
        <member name="F:Box.Enums.DefaultInputs.MoveLeft">
            <summary>
            Move left input action.
            </summary>
        </member>
        <member name="F:Box.Enums.DefaultInputs.MoveRight">
            <summary>
            Move right input action.
            </summary>
        </member>
        <member name="F:Box.Enums.DefaultInputs.MoveUp">
            <summary>
            Move up input action.
            </summary>
        </member>
        <member name="F:Box.Enums.DefaultInputs.MoveDown">
            <summary>
            Move down input action.
            </summary>
        </member>
        <member name="F:Box.Enums.DefaultInputs.Accept">
            <summary>
            Accept input action.
            </summary>
        </member>
        <member name="F:Box.Enums.DefaultInputs.Cancel">
            <summary>
            Cancel input action.
            </summary>
        </member>
        <member name="F:Box.Enums.DefaultInputs.Other">
            <summary>
            Other unspecified input action.
            </summary>
        </member>
        <member name="T:Box.Enums.EaseType">
            <summary>
            Represents various types of easing functions for interpolation.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.Linear">
            <summary>
            Represents a linear ease function.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.QuadIn">
            <summary>
            Quadratic ease-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.QuadOut">
            <summary>
            Quadratic ease-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.QuadInOut">
            <summary>
            Quadratic ease-in-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.QuadOutIn">
            <summary>
            Quadratic ease-out-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.CubicIn">
            <summary>
            Cubic ease-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.CubicOut">
            <summary>
            Cubic ease-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.CubicInOut">
            <summary>
            Cubic ease-in-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.CubicOutIn">
            <summary>
            Cubic ease-out-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.QuartIn">
            <summary>
            Quartic ease-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.QuartOut">
            <summary>
            Quartic ease-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.QuartInOut">
            <summary>
            Quartic ease-in-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.QuartOutIn">
            <summary>
            Quartic ease-out-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.QuintIn">
            <summary>
            Quintic ease-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.QuintOut">
            <summary>
            Quintic ease-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.QuintInOut">
            <summary>
            Quintic ease-in-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.QuintOutIn">
            <summary>
            Quintic ease-out-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.SineIn">
            <summary>
            Sine wave ease-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.SineOut">
            <summary>
            Sine wave ease-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.SineInOut">
            <summary>
            Sine wave ease-in-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.SineOutIn">
            <summary>
            Sine wave ease-out-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.ExpoIn">
            <summary>
            Exponential ease-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.ExpoOut">
            <summary>
            Exponential ease-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.ExpoInOut">
            <summary>
            Exponential ease-in-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.ExpoOutIn">
            <summary>
            Exponential ease-out-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.CircIn">
            <summary>
            Circular ease-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.CircOut">
            <summary>
            Circular ease-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.CircInOut">
            <summary>
            Circular ease-in-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.CircOutIn">
            <summary>
            Circular ease-out-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.ElasticIn">
            <summary>
            Elastic ease-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.ElasticOut">
            <summary>
            Elastic ease-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.ElasticInOut">
            <summary>
            Elastic ease-in-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.ElasticOutIn">
            <summary>
            Elastic ease-out-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.BackIn">
            <summary>
            Back ease-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.BackOut">
            <summary>
            Back ease-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.BackInOut">
            <summary>
            Back ease-in-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.BackOutIn">
            <summary>
            Back ease-out-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.BounceIn">
            <summary>
            Bounce ease-in.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.BounceOut">
            <summary>
            Bounce ease-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.BounceInOut">
            <summary>
            Bounce ease-in-out.
            </summary>
        </member>
        <member name="F:Box.Enums.EaseType.BounceOutIn">
            <summary>
            Bounce ease-out-in.
            </summary>
        </member>
        <member name="T:Box.Enums.EngineSignals">
            <summary>
            Enumeration of signals used within the engine for communication or event triggering.
            </summary>
        </member>
        <member name="F:Box.Enums.EngineSignals.WindowSizeChanged">
            <summary>
            0: Vect2 (New size state)
            </summary>    
        </member>
        <member name="F:Box.Enums.EngineSignals.ScreenDirty">
            <summary>
            0: Screen
            </summary>
        </member>
        <member name="F:Box.Enums.EngineSignals.WindowFullscreenChanged">
            <summary>
            0: Bool (New fullscreen state)
            </summary>
        </member>
        <member name="F:Box.Enums.EngineSignals.EntityAdded">
            <summary>
            0: Entity,
            1: Parent
            </summary>
        </member>
        <member name="F:Box.Enums.EngineSignals.EntityRemoved">
            <summary>
            0: Entity,
            1: Parent
            </summary>
        </member>
        <member name="F:Box.Enums.EngineSignals.SoundChannelVolumeChanged">
            <summary>
            0: AudioChannel
            </summary>
        </member>
        <member name="F:Box.Enums.EngineSignals.SoundChannelPitchChanged">
            <summary>
            0: AudioChannel
            </summary>
        </member>
        <member name="F:Box.Enums.EngineSignals.AnimatedSpriteStarted">
            <summary>
            0: AniatedSprite
            1: Animation
            </summary>
        </member>
        <member name="F:Box.Enums.EngineSignals.AnimatedSpriteFinished">
            <summary>
            0: AniatedSprite
            1: Animation
            </summary>
        </member>
        <member name="F:Box.Enums.EngineSignals.ListviewSoundFx">
            <summary>
            0: Listview
            </summary>
        </member>
        <member name="F:Box.Enums.EngineSignals.ListviewSelected">
            <summary>
            0: Listview
            1: ListviewItem
            2: int (SelectedIndex)
            </summary>
        </member>
        <member name="F:Box.Enums.EngineSignals.EntityNameChanged">
            <summary>
            0: Entity
            1: String (new name)
            </summary>
        </member>
        <member name="F:Box.Enums.EngineSignals.SoundStarted">
            <summary>
            0: SoundChannel
            1: Sound
            </summary>
        </member>
        <member name="F:Box.Enums.EngineSignals.SoundRemoved">
            <summary>
            0: SoundChannel
            1: Sound
            </summary>
        </member>
        <member name="F:Box.Enums.EngineSignals.SoundChannelPanChanged">
            <summary>
            0: AudioChannel
            </summary>
        </member>
        <member name="T:Box.Enums.GamepadButton">
            <summary>
            Represents various buttons and controls on a gamepad.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.None">
            <summary>
            No specific button.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.LeftThumbstickButton">
            <summary>
            Left thumbstick button.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.LeftThumbstickLeft">
            <summary>
            Left thumbstick left direction.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.LeftThumbstickRight">
            <summary>
            Left thumbstick right direction.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.LeftThumbstickUp">
            <summary>
            Left thumbstick up direction.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.LeftThumbstickDown">
            <summary>
            Left thumbstick down direction.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.RightThumbstickButton">
            <summary>
            Right thumbstick button.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.RightThumbstickLeft">
            <summary>
            Right thumbstick left direction.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.RightThumbstickRight">
            <summary>
            Right thumbstick right direction.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.RightThumbstickUp">
            <summary>
            Right thumbstick up direction.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.RightThumbstickDown">
            <summary>
            Right thumbstick down direction.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.DpadLeft">
            <summary>
            D-pad left direction.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.DpadRight">
            <summary>
            D-pad right direction.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.DpadUp">
            <summary>
            D-pad up direction.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.DpadDown">
            <summary>
            D-pad down direction.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.A">
            <summary>
            A button.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.B">
            <summary>
            B button.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.X">
            <summary>
            X button.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.Y">
            <summary>
            Y button.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.LeftTrigger">
            <summary>
            Left trigger button.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.RightTrigger">
            <summary>
            Right trigger button.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.LeftBumper">
            <summary>
            Left bumper button.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.RightBumper">
            <summary>
            Right bumper button.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.Back">
            <summary>
            Back button.
            </summary>
        </member>
        <member name="F:Box.Enums.GamepadButton.Start">
            <summary>
            Start button.
            </summary>
        </member>
        <member name="T:Box.Enums.HAlign">
            <summary>
            Horizontal alignment options.
            </summary>
        </member>
        <member name="F:Box.Enums.HAlign.Left">
            <summary>
            Aligns content to the left.
            </summary>
        </member>
        <member name="F:Box.Enums.HAlign.Center">
            <summary>
            Centers content horizontally.
            </summary>
        </member>
        <member name="F:Box.Enums.HAlign.Right">
            <summary>
            Aligns content to the right.
            </summary>
        </member>
        <member name="T:Box.Enums.KeyboardButton">
            <summary>
            Enum representing keyboard buttons.
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Unknown">
            <summary>
            Unhandled key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.A">
            <summary>
            The A key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.B">
            <summary>
            The B key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.C">
            <summary>
            The C key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.D">
            <summary>
            The D key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.E">
            <summary>
            The E key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.F">
            <summary>
            The F key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.G">
            <summary>
            The G key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.H">
            <summary>
            The H key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.I">
            <summary>
            The I key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.J">
            <summary>
            The J key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.K">
            <summary>
            The K key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.L">
            <summary>
            The L key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.M">
            <summary>
            The M key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.N">
            <summary>
            The N key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.O">
            <summary>
            The O key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.P">
            <summary>
            The P key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Q">
            <summary>
            The Q key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.R">
            <summary>
            The R key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.S">
            <summary>
            The S key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.T">
            <summary>
            The T key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.U">
            <summary>
            The U key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.V">
            <summary>
            The V key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.W">
            <summary>
            The W key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.X">
            <summary>
            The X key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Y">
            <summary>
            The Y key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Z">
            <summary>
            The Z key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Num0">
            <summary>
            The 0 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Num1">
            <summary>
            The 1 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Num2">
            <summary>
            The 2 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Num3">
            <summary>
            The 3 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Num4">
            <summary>
            The 4 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Num5">
            <summary>
            The 5 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Num6">
            <summary>
            The 6 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Num7">
            <summary>
            The 7 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Num8">
            <summary>
            The 8 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Num9">
            <summary>
            The 9 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Escape">
            <summary>
            The Escape key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.LControl">
            <summary>
            The left Control key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.LShift">
            <summary>
            The left Shift key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.LAlt">
            <summary>
            The left Alt key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.LSystem">
            <summary>
            The left OS specific key: window (Windows and Linux), apple (MacOS X), ...
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.RControl">
            <summary>
            The right Control key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.RShift">
            <summary>
            The right Shift key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.RAlt">
            <summary>
            The right Alt key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.RSystem">
            <summary>
            The right OS specific key: window (Windows and Linux), apple (MacOS X), ...
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Menu">
            <summary>
            The Menu key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.LBracket">
            <summary>
            The [ key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.RBracket">
            <summary>
            The ] key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Semicolon">
            <summary>
            The ; key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Comma">
            <summary>
            The , key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Period">
            <summary>
            The . key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Quote">
            <summary>
            The ' key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Slash">
            <summary>
            The / key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Backslash">
            <summary>
            The \ key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Tilde">
            <summary>
            The ~ key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Equal">
            <summary>
            The = key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Hyphen">
            <summary>
            The - key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Space">
            <summary>
            The Space key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Enter">
            <summary>
            The Return key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Backspace">
            <summary>
            The Backspace key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Tab">
            <summary>
            The Tabulation key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.PageUp">
            <summary>
            The Page up key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.PageDown">
            <summary>
            The Page down key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.End">
            <summary>
            The End key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Home">
            <summary>
            The Home key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Insert">
            <summary>
            The Insert key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Delete">
            <summary>
            The Delete key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Add">
            <summary>
            The + key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Subtract">
            <summary>
            The - key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Multiply">
            <summary>
            The * key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Divide">
            <summary>
            The / key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Left">
            <summary>
            Left arrow
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Right">
            <summary>
            Right arrow
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Up">
            <summary>
            Up arrow
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Down">
            <summary>
            Down arrow
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Numpad0">
            <summary>
            The numpad 0 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Numpad1">
            <summary>
            The numpad 1 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Numpad2">
            <summary>
            The numpad 2 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Numpad3">
            <summary>
            The numpad 3 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Numpad4">
            <summary>
            The numpad 4 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Numpad5">
            <summary>
            The numpad 5 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Numpad6">
            <summary>
            The numpad 6 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Numpad7">
            <summary>
            The numpad 7 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Numpad8">
            <summary>
            The numpad 8 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Numpad9">
            <summary>
            The numpad 9 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.F1">
            <summary>
            The F1 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.F2">
            <summary>
            The F2 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.F3">
            <summary>
            The F3 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.F4">
            <summary>
            The F4 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.F5">
            <summary>
            The F5 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.F6">
            <summary>
            The F6 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.F7">
            <summary>
            The F7 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.F8">
            <summary>
            The F8 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.F9">
            <summary>
            The F9 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.F10">
            <summary>
            The F10 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.F11">
            <summary>
            The F11 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.F12">
            <summary>
            The F12 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.F13">
            <summary>
            The F13 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.F14">
            <summary>
            The F14 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.F15">
            <summary>
            The F15 key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Pause">
            <summary>
            The Pause key
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.KeyCount">
            <summary>
            The total number of keyboard keys
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Dash">
            <summary>
            DEPRECATED: Use Hyphen
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.BackSpace">
            <summary>
            DEPRECATED: Use Backspace
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.Return">
            <summary>
            DEPRECATED: Use Enter
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.BackSlash">
            <summary>
            DEPRECATED: Use Backslash
            </summary>
        </member>
        <member name="F:Box.Enums.KeyboardButton.SemiColon">
            <summary>
            DEPRECATED: Use Semicolon
            </summary>
        </member>
        <member name="T:Box.Enums.MapLayerType">
            <summary>
            Represents the types of layers in a map.
            </summary>
        </member>
        <member name="F:Box.Enums.MapLayerType.IntGrid">
            <summary>
            Integer grid layer.
            </summary>
        </member>
        <member name="F:Box.Enums.MapLayerType.Entities">
            <summary>
            Entity layer.
            </summary>
        </member>
        <member name="F:Box.Enums.MapLayerType.Tiles">
            <summary>
            Tile layer.
            </summary>
        </member>
        <member name="F:Box.Enums.MapLayerType.AutoLayer">
            <summary>
            Auto-tile layer.
            </summary>
        </member>
        <member name="T:Box.Enums.MouseButton">
            <summary>
            Represents different mouse buttons.
            </summary>
        </member>
        <member name="F:Box.Enums.MouseButton.Left">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:Box.Enums.MouseButton.Right">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="F:Box.Enums.MouseButton.Middle">
            <summary>
            The middle (wheel) mouse button.
            </summary>
        </member>
        <member name="T:Box.Enums.ProgressBarType">
            <summary>
            Represents the direction types of a progress bar.
            </summary>
        </member>
        <member name="F:Box.Enums.ProgressBarType.LeftToRight">
            <summary>
            Progress bar fills from left to right.
            </summary>
        </member>
        <member name="F:Box.Enums.ProgressBarType.RightToLeft">
            <summary>
            Progress bar fills from right to left.
            </summary>
        </member>
        <member name="F:Box.Enums.ProgressBarType.TopToBottom">
            <summary>
            Progress bar fills from top to bottom.
            </summary>
        </member>
        <member name="F:Box.Enums.ProgressBarType.BottomToTop">
            <summary>
            Progress bar fills from bottom to top.
            </summary>
        </member>
        <member name="T:Box.Enums.SoundState">
            <summary>
            Represents the state of a sound.
            </summary>
        </member>
        <member name="F:Box.Enums.SoundState.Stopped">
            <summary>
            The sound is not currently playing.
            </summary>
        </member>
        <member name="F:Box.Enums.SoundState.Paused">
            <summary>
            The sound is currently paused.
            </summary>
        </member>
        <member name="F:Box.Enums.SoundState.Playing">
            <summary>
            The sound is currently playing.
            </summary>
        </member>
        <member name="T:Box.Enums.SurfaceEffects">
            <summary>
            Flags representing surface effects.
            </summary>
        </member>
        <member name="F:Box.Enums.SurfaceEffects.None">
            <summary>
            No effects applied.
            </summary>
        </member>
        <member name="F:Box.Enums.SurfaceEffects.Vertical">
            <summary>
            Applies a vertical effect.
            </summary>
        </member>
        <member name="F:Box.Enums.SurfaceEffects.Horizontal">
            <summary>
            Applies a horizontal effect.
            </summary>
        </member>
        <member name="T:Box.Enums.VAlign">
            <summary>
            Vertical alignment options.
            </summary>
        </member>
        <member name="F:Box.Enums.VAlign.Top">
            <summary>
            Aligns content to the top.
            </summary>
        </member>
        <member name="F:Box.Enums.VAlign.Center">
            <summary>
            Centers content vertically.
            </summary>
        </member>
        <member name="F:Box.Enums.VAlign.Bottom">
            <summary>
            Aligns content to the bottom.
            </summary>
        </member>
        <member name="T:Box.Graphics.Assets">
            <summary>
            Represents a class that manages assets within the application.
            </summary>
        </member>
        <member name="P:Box.Graphics.Assets.Count">
            <summary>
            Gets the number of assets currently managed.
            </summary>
        </member>
        <member name="P:Box.Graphics.Assets.Bytes">
            <summary>
            Gets or sets the total size of all assets in bytes.
            </summary>
        </member>
        <member name="M:Box.Graphics.Assets.Exists(System.String)">
            <summary>
            Checks if an asset with the specified name exists.
            </summary>
            <param name="name">The name of the asset to check.</param>
            <returns>True if an asset with the specified name exists; otherwise, false.</returns>
        </member>
        <member name="M:Box.Graphics.Assets.Exists(System.Enum)">
            <summary>
            Checks if an asset with the specified enum value exists.
            </summary>
            <param name="name">The enum value representing the asset to check.</param>
            <returns>True if an asset with the specified enum value exists; otherwise, false.</returns>
        </member>
        <member name="M:Box.Graphics.Assets.Add(System.String,Box.Interfaces.IAsset)">
            <summary>
            Adds an asset with the specified name.
            </summary>
            <param name="name">The name of the asset to add.</param>
            <param name="asset">The asset to add.</param>
        </member>
        <member name="M:Box.Graphics.Assets.Add(System.Enum,Box.Interfaces.IAsset)">
            <summary>
            Adds an asset with the specified enum value.
            </summary>
            <param name="name">The enum value representing the asset to add.</param>
            <param name="asset">The asset to add.</param>
        </member>
        <member name="M:Box.Graphics.Assets.Get``1(System.String)">
            <summary>
            Retrieves the asset of type T with the specified name.
            </summary>
            <typeparam name="T">The type of asset to retrieve, which must implement the IAsset interface.</typeparam>
            <param name="name">The name of the asset to retrieve.</param>
            <returns>The asset of type T with the specified name, if found; otherwise, default(T).</returns>
        </member>
        <member name="M:Box.Graphics.Assets.Get``1(System.Enum)">
            <summary>
            Retrieves the asset of type T with the specified enum value.
            </summary>
            <typeparam name="T">The type of asset to retrieve, which must implement the IAsset interface.</typeparam>
            <param name="name">The enum value representing the asset to retrieve.</param>
            <returns>The asset of type T with the specified enum value, if found; otherwise, default(T).</returns>
        </member>
        <member name="M:Box.Graphics.Assets.GetFromFile``1(System.String)">
            <summary>
            Retrieves the asset of type T from a file with the specified filename.
            </summary>
            <typeparam name="T">The type of asset to retrieve, which must implement the IAsset interface.</typeparam>
            <param name="filename">The filename of the asset to retrieve.</param>
            <returns>The asset of type T loaded from the specified file, if found; otherwise, default(T).</returns>
        </member>
        <member name="M:Box.Graphics.Assets.GetFromPack``1(System.String)">
            <summary>
            Retrieves the asset of type T from a file with the specified filename.
            </summary>
            <typeparam name="T">The type of asset to retrieve, which must implement the IAsset interface.</typeparam>
            <param name="filename">The filename of the asset to retrieve.</param>
            <returns>The asset of type T loaded from the specified file, if found; otherwise, default(T).</returns>
        </member>
        <member name="M:Box.Graphics.Assets.TryGet``1(System.String,``0@)">
            <summary>
            Attempts to retrieve the asset of type T with the specified name.
            </summary>
            <typeparam name="T">The type of asset to retrieve, which must implement the IAsset interface.</typeparam>
            <param name="name">The name of the asset to retrieve.</param>
            <param name="asset">When this method returns, contains the asset of type T with the specified name, if found; otherwise, default(T).</param>
            <returns>True if the asset with the specified name was retrieved successfully; otherwise, false.</returns>
        </member>
        <member name="M:Box.Graphics.Assets.TryGet``1(System.Enum,``0@)">
            <summary>
            Attempts to retrieve the asset of type T with the specified enum value.
            </summary>
            <typeparam name="T">The type of asset to retrieve, which must implement the IAsset interface.</typeparam>
            <param name="name">The enum value representing the asset to retrieve.</param>
            <param name="asset">When this method returns, contains the asset of type T with the specified enum value, if found; otherwise, default(T).</param>
            <returns>True if the asset with the specified enum value was retrieved successfully; otherwise, false.</returns>
        </member>
        <member name="M:Box.Graphics.Assets.Remove(System.String)">
            <summary>
            Removes the asset with the specified name.
            </summary>
            <param name="name">The name of the asset to remove.</param>
            <returns>True if the asset with the specified name was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Box.Graphics.Assets.Remove(System.Enum)">
            <summary>
            Removes the asset with the specified enum value.
            </summary>
            <param name="name">The enum value representing the asset to remove.</param>
            <returns>True if the asset with the specified enum value was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Box.Graphics.Assets.Clear">
            <summary>
            Clears all assets from the collection.
            </summary>
        </member>
        <member name="M:Box.Graphics.Assets.LoadPack(System.String)">
            <summary>
            Loads an asset pack from the specified file and overrides the content loading
            to use the pack instead of the local file system.
            </summary>
            <param name="filename">The path to the asset pack file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the filename is null or empty.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the specified file does not exist.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the file format is not supported.</exception>
        </member>
        <member name="M:Box.Graphics.Assets.LoadSurface(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads a surface from the specified file.
            </summary>
            <param name="filename">The filename of the surface file to load.</param>
            <param name="repeat">A boolean indicating whether the region should be repeated to fill the new surface. Default is <c>false</c>.</param>
            <param name="smooth">A boolean indicating whether the new surface should be smoothed (anti-aliased). Default is <c>false</c>.</param>
            <returns>The loaded Surface object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="filename"/> is null or empty.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the specified <paramref name="filename"/> does not exist.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the file type of <paramref name="filename"/> is not supported.</exception>
        </member>
        <member name="M:Box.Graphics.Assets.LoadSubSurface(System.String,Box.Systems.Rect2,System.Boolean,System.Boolean)">
            <summary>
            Loads a subsurface from the specified file based on the given region.
            </summary>
            <param name="filename">The filename of the image file to load.</param>
            <param name="region">The rectangular region specifying the area of the image to load.</param>
            <param name="repeat">A boolean indicating whether the region should be repeated to fill the new surface. Default is <c>false</c>.</param>
            <param name="smooth">A boolean indicating whether the new surface should be smoothed (anti-aliased). Default is <c>false</c>.</param>
            <returns>The loaded Surface object representing the subsurface.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="filename"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="region"/> is empty or invalid.</exception>
            <exception cref="T:System.Exception">Thrown when an error occurs during the subsurface loading process.</exception>
        </member>
        <member name="M:Box.Graphics.Assets.LoadSubSurface(Box.Graphics.Surface,Box.Loaders.Spritesheets.Spritesheet,System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads a subsurface from the specified spritesheet onto the given surface.
            </summary>
            <param name="surface">The Surface object onto which the subsurface will be loaded.</param>
            <param name="sheet">The Spritesheet containing the subsurface.</param>
            <param name="name">The name of the subsurface within the spritesheet.</param>
            <param name="repeat">A boolean indicating whether the region should be repeated to fill the new surface. Default is <c>false</c>.</param>
            <param name="smooth">A boolean indicating whether the new surface should be smoothed (anti-aliased). Default is <c>false</c>.</param>
            <returns>The loaded Surface object representing the subsurface.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown when:
            - <paramref name="surface"/> is null or empty.
            - <paramref name="sheet"/> is null or empty.
            - The specified <paramref name="name"/> does not exist within the <paramref name="sheet"/>.
            </exception>
        </member>
        <member name="M:Box.Graphics.Assets.LoadFont(System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Loads a generic font from the specified file with optional parameters for customization.
            </summary>
            <param name="filename">The filename of the font file to load.</param>
            <param name="size">The size of the font.</param>
            <param name="useSmoothing">Optional. Indicates whether to use smoothing for the font.</param>
            <param name="bold">Optional. Indicates whether the font should be bold.</param>
            <param name="thickness">Optional. Specifies the thickness of the font.</param>
            <param name="spacing">Optional. Specifies the spacing of the font.</param>
            <param name="lineSpacing">Optional. Specifies the line spacing of the font.</param>
            <returns>The loaded GenericFont object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="filename"/> is null or empty.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the specified <paramref name="filename"/> does not exist.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the font file type is not supported.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="size"/> is zero.</exception>
        </member>
        <member name="M:Box.Graphics.Assets.LoadBitmapFont(System.String,System.Int32,System.Int32)">
            <summary>
            Loads a bitmap font from the specified file with optional parameters for customization.
            </summary>
            <param name="filename">The filename of the bitmap font file to load.</param>
            <param name="spacing">Optional. Specifies the spacing of the bitmap font.</param>
            <param name="lineSpacing">Optional. Specifies the line spacing of the bitmap font.</param>
            <returns>The loaded BitmapFont object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="filename"/> is null or empty.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the specified <paramref name="filename"/> does not exist.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the bitmap font file type is not supported.</exception>
        </member>
        <member name="M:Box.Graphics.Assets.LoadSound(System.String,System.Boolean)">
            <summary>
            Loads a sound from the specified file.
            </summary>
            <param name="filename">The filename of the sound file to load.</param>
            <param name="looped">A flag indicating whether the sound should loop when played. Default is <c>false</c>.</param>
            <returns>The loaded <see cref="T:Box.Sounds.Sound"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="filename"/> is null or empty.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the specified <paramref name="filename"/> does not exist.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the sound file type is not supported.</exception>
            <remarks>
            This method attempts to load a sound file either from the local file system or a packed asset file.
            If the sound is found in a packed file, it is loaded from there. Otherwise, it is loaded from the file system.
            The sound file must be of a supported type, and the filename must not be empty or null.
            </remarks>
        </member>
        <member name="M:Box.Graphics.Assets.LoadMap(System.String)">
            <summary>
            Loads a map from the specified file.
            </summary>
            <param name="filename">The filename of the map file to load.</param>
            <returns>The loaded Map object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="filename"/> is null or empty.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the specified <paramref name="filename"/> does not exist.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the map file type is not supported.</exception>
        </member>
        <member name="M:Box.Graphics.Assets.LoadSpriteSheet(System.String)">
            <summary>
            Loads a spritesheet from the specified file.
            </summary>
            <param name="filename">The filename of the spritesheet file to load.</param>
            <returns>The loaded Spritesheet object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="filename"/> is null or empty.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the specified <paramref name="filename"/> does not exist.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the spritesheet file type is not supported.</exception>
        </member>
        <member name="M:Box.Graphics.Assets.GetSurface(System.String)">
            <summary>
            Retrieves a Surface object by its name.
            </summary>
            <param name="name">The name of the Surface object to retrieve.</param>
            <returns>The Surface object identified by the specified name.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified name does not correspond to an existing Surface object.</exception>
        </member>
        <member name="M:Box.Graphics.Assets.GetMap(System.String)">
            <summary>
            Retrieves a Map object by its name.
            </summary>
            <param name="name">The name of the Map object to retrieve.</param>
            <returns>The Map object identified by the specified name.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified name does not correspond to an existing Map object.</exception>
        </member>
        <member name="M:Box.Graphics.Assets.GetSound(System.String)">
            <summary>
            Retrieves a Sound object by its name.
            </summary>
            <param name="name">The name of the Sound object to retrieve.</param>
            <returns>The Sound object identified by the specified name.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified name does not correspond to an existing Sound object.</exception>
        </member>
        <member name="M:Box.Graphics.Assets.GetFont(System.String)">
            <summary>
            Retrieves a Font object by its name.
            </summary>
            <param name="name">The name of the Font object to retrieve.</param>
            <returns>The Font object identified by the specified name.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified name does not correspond to an existing Font object.</exception>
        </member>
        <member name="M:Box.Graphics.Assets.GetSheet(System.String)">
            <summary>
            Retrieves a Spritesheet object by its name.
            </summary>
            <param name="name">The name of the Spritesheet object to retrieve.</param>
            <returns>The Spritesheet object identified by the specified name.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the specified name does not correspond to an existing Spritesheet object.</exception>
        </member>
        <member name="M:Box.Graphics.Assets.GetSurface(System.Enum)">
            <summary>
            Retrieves a Surface object by its enum name.
            </summary>
            <param name="name">The enum value representing the name of the Surface object to retrieve.</param>
            <returns>The Surface object identified by the specified enum name.</returns>
        </member>
        <member name="M:Box.Graphics.Assets.GetMap(System.Enum)">
            <summary>
            Retrieves a Map object by its enum name.
            </summary>
            <param name="name">The enum value representing the name of the Map object to retrieve.</param>
            <returns>The Map object identified by the specified enum name.</returns>
        </member>
        <member name="M:Box.Graphics.Assets.GetSound(System.Enum)">
            <summary>
            Retrieves a Sound object by its enum name.
            </summary>
            <param name="name">The enum value representing the name of the Sound object to retrieve.</param>
            <returns>The Sound object identified by the specified enum name.</returns>
        </member>
        <member name="M:Box.Graphics.Assets.GetFont(System.Enum)">
            <summary>
            Retrieves a Font object by its enum name.
            </summary>
            <param name="name">The enum value representing the name of the Font object to retrieve.</param>
            <returns>The Font object identified by the specified enum name.</returns>
        </member>
        <member name="M:Box.Graphics.Assets.GetSheet(System.Enum)">
            <summary>
            Retrieves a Spritesheet object by its enum name.
            </summary>
            <param name="name">The enum value representing the name of the Spritesheet object to retrieve.</param>
            <returns>The Spritesheet object identified by the specified enum name.</returns>
        </member>
        <member name="T:Box.Graphics.Color">
            <summary>
            Represents a color in the RGB (Red, Green, Blue) color space.
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.Red">
            <summary>
            Gets or sets the red component of the color.
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.Green">
            <summary>
            Gets or sets the green component of the color.
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.Blue">
            <summary>
            Gets or sets the blue component of the color.
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.Alpha">
            <summary>
            Gets or sets the alpha (transparency) component of the color.
            </summary>
        </member>
        <member name="M:Box.Graphics.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Color struct with the specified RGBA values.
            </summary>
            <param name="red">The red component of the color (0-255).</param>
            <param name="green">The green component of the color (0-255).</param>
            <param name="blue">The blue component of the color (0-255).</param>
            <param name="alpha">The alpha (transparency) component of the color (0-255).</param>
        </member>
        <member name="M:Box.Graphics.Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Color struct with the specified RGB values and default alpha (255).
            </summary>
            <param name="red">The red component of the color (0-255).</param>
            <param name="green">The green component of the color (0-255).</param>
            <param name="blue">The blue component of the color (0-255).</param>
        </member>
        <member name="M:Box.Graphics.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Color struct with the specified RGBA values using floats (0.0f-1.0f).
            </summary>
            <param name="red">The red component of the color (0.0f-1.0f).</param>
            <param name="green">The green component of the color (0.0f-1.0f).</param>
            <param name="blue">The blue component of the color (0.0f-1.0f).</param>
            <param name="alpha">The alpha (transparency) component of the color (0.0f-1.0f).</param>
        </member>
        <member name="M:Box.Graphics.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Color struct with the specified RGB values using floats (0.0f-1.0f) and default alpha (1.0f).
            </summary>
            <param name="red">The red component of the color (0.0f-1.0f).</param>
            <param name="green">The green component of the color (0.0f-1.0f).</param>
            <param name="blue">The blue component of the color (0.0f-1.0f).</param>
        </member>
        <member name="M:Box.Graphics.Color.#ctor(Box.Graphics.Color)">
            <summary>
            Initializes a new instance of the Color struct by copying another Color instance.
            </summary>
            <param name="color">The Color instance to copy.</param>
        </member>
        <member name="M:Box.Graphics.Color.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Color struct from a hexadecimal string representation (#RRGGBB or #AARRGGBB).
            </summary>
            <param name="hex">The hexadecimal string representing the color.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the hex string is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the hex string is invalid or cannot be parsed.</exception>
        </member>
        <member name="M:Box.Graphics.Color.op_Addition(Box.Graphics.Color,Box.Graphics.Color)">
            <summary>
            Adds two colors component-wise and returns the result.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:Box.Graphics.Color.op_Subtraction(Box.Graphics.Color,Box.Graphics.Color)">
            <summary>
            Subtracts one color from another component-wise and returns the result.
            </summary>
            <param name="left">The color to subtract from (minuend).</param>
            <param name="right">The color to subtract (subtrahend).</param>
            <returns>The result of subtracting the second color from the first.</returns>
        </member>
        <member name="M:Box.Graphics.Color.op_Multiply(Box.Graphics.Color,System.Single)">
            <summary>
            Multiplies each component of the color by a scalar value and returns the result.
            </summary>
            <param name="left">The color to multiply.</param>
            <param name="right">The scalar value to multiply by.</param>
            <returns>The resulting color after multiplication.</returns>
        </member>
        <member name="M:Box.Graphics.Color.op_Division(Box.Graphics.Color,System.Single)">
            <summary>
            Divides each component of the color by a scalar value and returns the result.
            </summary>
            <param name="left">The color to divide.</param>
            <param name="right">The scalar value to divide by (non-zero).</param>
            <returns>The resulting color after division.</returns>
        </member>
        <member name="M:Box.Graphics.Color.op_Division(Box.Graphics.Color,System.Int32)">
            <summary>
            Divides each component of the color by an integer value and returns the result.
            </summary>
            <param name="left">The color to divide.</param>
            <param name="right">The integer value to divide by (non-zero).</param>
            <returns>The resulting color after division.</returns>
        </member>
        <member name="M:Box.Graphics.Color.op_Equality(Box.Graphics.Color,Box.Graphics.Color)">
            <summary>
            Checks if two colors are equal by comparing their RGBA components.
            </summary>
            <param name="left">The first color to compare.</param>
            <param name="right">The second color to compare.</param>
            <returns>True if the colors are equal; false otherwise.</returns>
        </member>
        <member name="M:Box.Graphics.Color.op_Inequality(Box.Graphics.Color,Box.Graphics.Color)">
            <summary>
            Checks if two colors are not equal by comparing their RGBA components.
            </summary>
            <param name="left">The first color to compare.</param>
            <param name="right">The second color to compare.</param>
            <returns>True if the colors are not equal; false if they are equal.</returns>
        </member>
        <member name="M:Box.Graphics.Color.BlendColors(Box.Graphics.Color,System.Double)">
            <summary>
            Blends this color with another color using the specified blending ratio.
            </summary>
            <param name="other">The color to blend with.</param>
            <param name="ratio">The blending ratio. 0.0 means entirely this color, 1.0 means entirely the other color.</param>
            <returns>The resulting blended color.</returns>
        </member>
        <member name="M:Box.Graphics.Color.BlendColors(Box.Graphics.Color,Box.Graphics.Color,System.Double)">
            <summary>
            Blends two colors using the specified blending ratio.
            </summary>
            <param name="color1">The first color to blend.</param>
            <param name="color2">The second color to blend.</param>
            <param name="ratio">The blending ratio. 0.0 means entirely color1, 1.0 means entirely color2.</param>
            <returns>The resulting blended color.</returns>
        </member>
        <member name="M:Box.Graphics.Color.Lighten(System.Int32)">
            <summary>
            Lightens this color by the specified amount.
            </summary>
            <param name="amount">The amount by which to lighten the color.</param>
        </member>
        <member name="M:Box.Graphics.Color.Lighten(Box.Graphics.Color,System.Int32)">
            <summary>
            Lightens the specified color by the specified amount.
            </summary>
            <param name="color">The color to lighten.</param>
            <param name="amount">The amount by which to lighten the color.</param>
        </member>
        <member name="M:Box.Graphics.Color.LightenWithAlpha(System.Int32)">
            <summary>
            Lightens this color, including its alpha channel, by the specified amount.
            </summary>
            <param name="amount">The amount by which to lighten the color.</param>
        </member>
        <member name="M:Box.Graphics.Color.LightenWithAlpha(Box.Graphics.Color,System.Int32)">
            <summary>
            Lightens the specified color, including its alpha channel, by the specified amount.
            </summary>
            <param name="color">The color to lighten.</param>
            <param name="amount">The amount by which to lighten the color.</param>
        </member>
        <member name="M:Box.Graphics.Color.Darken(System.Int32)">
            <summary>
            Darkens this color by the specified amount.
            </summary>
            <param name="amount">The amount by which to darken the color.</param>
        </member>
        <member name="M:Box.Graphics.Color.Darken(Box.Graphics.Color,System.Int32)">
            <summary>
            Darkens the specified color by the specified amount.
            </summary>
            <param name="color">The color to darken.</param>
            <param name="amount">The amount by which to darken the color.</param>
        </member>
        <member name="M:Box.Graphics.Color.DarkenWithAlpha(System.Int32)">
            <summary>
            Darkens this color, including its alpha channel, by the specified amount.
            </summary>
            <param name="amount">The amount by which to darken the color.</param>
        </member>
        <member name="M:Box.Graphics.Color.DarkenWithAlpha(Box.Graphics.Color,System.Int32)">
            <summary>
            Darkens the specified color, including its alpha channel, by the specified amount.
            </summary>
            <param name="color">The color to darken.</param>
            <param name="amount">The amount by which to darken the color.</param>
        </member>
        <member name="M:Box.Graphics.Color.IsDark(System.Int32)">
            <summary>
            Determines if this color is considered dark, based on the specified brightness threshold.
            </summary>
            <param name="brightnessThreshold">The brightness threshold (0-255) below which the color is considered dark.</param>
            <returns>True if the color is dark, false otherwise.</returns>
        </member>
        <member name="M:Box.Graphics.Color.IsDark(Box.Graphics.Color,System.Int32)">
            <summary>
            Determines if the specified color is considered dark, based on the specified brightness threshold.
            </summary>
            <param name="color">The color to evaluate.</param>
            <param name="brightnessThreshold">The brightness threshold (0-255) below which the color is considered dark.</param>
            <returns>True if the color is dark, false otherwise.</returns>
        </member>
        <member name="M:Box.Graphics.Color.IsLight(System.Int32)">
            <summary>
            Determines if this color is considered light, based on the specified brightness threshold.
            </summary>
            <param name="brightnessThreshold">The brightness threshold (0-255) above which the color is considered light.</param>
            <returns>True if the color is light, false otherwise.</returns>
        </member>
        <member name="M:Box.Graphics.Color.IsLight(Box.Graphics.Color,System.Int32)">
            <summary>
            Determines if the specified color is considered light, based on the specified brightness threshold.
            </summary>
            <param name="color">The color to evaluate.</param>
            <param name="brightnessThreshold">The brightness threshold (0-255) above which the color is considered light.</param>
            <returns>True if the color is light, false otherwise.</returns>
        </member>
        <member name="M:Box.Graphics.Color.Equals(Box.Graphics.Color)">
            <summary>
            Determines whether this color is equal to another color.
            </summary>
            <param name="other">The color to compare with this color.</param>
            <returns>True if the colors are equal, false otherwise.</returns>
        </member>
        <member name="M:Box.Graphics.Color.Equals(System.Object)">
            <summary>
            Determines whether this color is equal to another object.
            </summary>
            <param name="obj">The object to compare with this color.</param>
            <returns>True if the object is a Color and is equal to this color, false otherwise.</returns>
        </member>
        <member name="M:Box.Graphics.Color.GetHashCode">
            <summary>
            Returns the hash code for this color.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Box.Graphics.Color.ToString">
            <summary>
            Returns a string representation of this color.
            </summary>
            <returns>A string that represents the current color.</returns>
        </member>
        <member name="T:Box.Graphics.Color.ShadesOfBlack">
            <summary>
            Represents a collection of shades of black.
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlack.Black">
            <summary>
            Represents the color black (#000000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlack.Charcoal">
            <summary>
            Represents the color charcoal (#36454F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlack.DarkGreen">
            <summary>
            Represents the color dark green (#023020).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlack.DarkPurple">
            <summary>
            Represents the color dark purple (#301934).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlack.JetBlack">
            <summary>
            Represents the color jet black (#343434).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlack.Licorice">
            <summary>
            Represents the color licorice (#1B1212).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlack.MatteBlack">
            <summary>
            Represents the color matte black (#28282B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlack.MidnightBlue">
            <summary>
            Represents the color midnight blue (#191970).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlack.Onyx">
            <summary>
            Represents the color onyx (#353935).
            </summary>
        </member>
        <member name="T:Box.Graphics.Color.ShadesOfBlue">
            <summary>
            Represents a collection of predefined shades of blue.
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.Aqua">
            <summary>
            Represents the color Aqua (#00FFFF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.Azure">
            <summary>
            Represents the color Azure (#F0FFFF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.BabyBlue">
            <summary>
            Represents the color Baby Blue (#89CFF0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.Blue">
            <summary>
            Represents the color Blue (#0000FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.BlueGray">
            <summary>
            Represents the color Blue Gray (#7393B3).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.BlueGreen">
            <summary>
            Represents the color Blue Green (#088F8F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.BrightBlue">
            <summary>
            Represents the color Bright Blue (#0096FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.CadetBlue">
            <summary>
            Represents the color Cadet Blue (#5F9EA0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.CobaltBlue">
            <summary>
            Represents the color Cobalt Blue (#0047AB).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.CornflowerBlue">
            <summary>
            Represents the color Cornflower Blue (#6495ED).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.Cyan">
            <summary>
            Represents the color Cyan (#00FFFF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.DarkBlue">
            <summary>
            Represents the color Dark Blue (#00008B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.Denim">
            <summary>
            Represents the color Denim (#6F8FAF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.EgyptianBlue">
            <summary>
            Represents the color Egyptian Blue (#1434A4).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.ElectricBlue">
            <summary>
            Represents the color Electric Blue (#7DF9FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.Glaucous">
            <summary>
            Represents the color Glaucous (#6082B6).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.Jade">
            <summary>
            Represents the color Jade (#00A36C).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.Indigo">
            <summary>
            Represents the color Indigo (#3F00FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.Iris">
            <summary>
            Represents the color Iris (#5D3FD3).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.LightBlue">
            <summary>
            Represents the color Light Blue (#ADD8E6).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.MidnightBlue">
            <summary>
            Represents the color Midnight Blue (#191970).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.NavyBlue">
            <summary>
            Represents the color Navy Blue (#000080).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.NeonBlue">
            <summary>
            Represents the color Neon Blue (#1F51FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.PastelBlue">
            <summary>
            Represents the color Pastel Blue (#A7C7E7).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.Periwinkle">
            <summary>
            Represents the color Periwinkle (#CCCCFF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.PowderBlue">
            <summary>
            Represents the color Powder Blue (#B6D0E2).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.RobinEggBlue">
            <summary>
            Represents the color Robin Egg Blue (#96DED1).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.RoyalBlue">
            <summary>
            Represents the color Royal Blue (#4169E1).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.SapphireBlue">
            <summary>
            Represents the color Sapphire Blue (#0F52BA).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.SeafoamGreen">
            <summary>
            Represents the color Seafoam Green (#9FE2BF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.SkyBlue">
            <summary>
            Represents the color Sky Blue (#87CEEB).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.SteelBlue">
            <summary>
            Represents the color Steel Blue (#4682B4).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.Teal">
            <summary>
            Represents the color Teal (#008080).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.Turquoise">
            <summary>
            Represents the color Turquoise (#40E0D0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.Ultramarine">
            <summary>
            Represents the color Ultramarine (#0437F2).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.Verdigris">
            <summary>
            Represents the color Verdigris (#40B5AD).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBlue.Zaffre">
            <summary>
            Represents the color Zaffre (#0818A8).
            </summary>
        </member>
        <member name="T:Box.Graphics.Color.ShadesOfBrown">
            <summary>
            Represents a readonly struct for handling shades of brown colors.
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Almond">
            <summary>
            Represents the color Almond (#EADDCA).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Brass">
            <summary>
            Represents the color Brass (#E1C16E).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Bronze">
            <summary>
            Represents the color Bronze (#CD7F32).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Brown">
            <summary>
            Represents the color Brown (#A52A2A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Buff">
            <summary>
            Represents the color Buff (#DAA06D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Burgundy">
            <summary>
            Represents the color Burgundy (#800020).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.BurntSienna">
            <summary>
            Represents the color Burnt Sienna (#E97451).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.BurntUmber">
            <summary>
            Represents the color Burnt Umber (#6E260E).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Camel">
            <summary>
            Represents the color Camel (#C19A6B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Chestnut">
            <summary>
            Represents the color Chestnut (#954535).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Chocolate">
            <summary>
            Represents the color Chocolate (#7B3F00).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Cinnamon">
            <summary>
            Represents the color Cinnamon (#D27D2D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Coffee">
            <summary>
            Represents the color Coffee (#6F4E37).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Cognac">
            <summary>
            Represents the color Cognac (#834333).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Copper">
            <summary>
            Represents the color Copper (#B87333).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Cordovan">
            <summary>
            Represents the color Cordovan (#814141).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.DarkBrown">
            <summary>
            Represents the color Dark Brown (#5C4033).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.DarkRed">
            <summary>
            Represents the color Dark Red (#8B0000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.DarkTan">
            <summary>
            Represents the color Dark Tan (#988558).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Ecru">
            <summary>
            Represents the color Ecru (#C2B280).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Fallow">
            <summary>
            Represents the color Fallow (#C19A6B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Fawn">
            <summary>
            Represents the color Fawn (#E5AA70).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Garnet">
            <summary>
            Represents the color Garnet (#9A2A2A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.GoldenBrown">
            <summary>
            Represents the color Golden Brown (#966919).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Khaki">
            <summary>
            Represents the color Khaki (#F0E68C).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.LightBrown">
            <summary>
            Represents the color Light Brown (#C4A484).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Mahogany">
            <summary>
            Represents the color Mahogany (#C04000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Maroon">
            <summary>
            Represents the color Maroon (#800000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Mocha">
            <summary>
            Represents the color Mocha (#967969).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Nude">
            <summary>
            Represents the color Nude (#F2D2BD).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Ochre">
            <summary>
            Represents the color Ochre (#CC7722).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.OliveGreen">
            <summary>
            Represents the color Olive Green (#808000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Oxblood">
            <summary>
            Represents the color Oxblood (#4A0400).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Puce">
            <summary>
            Represents the color Puce (#A95C68).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.RedBrown">
            <summary>
            Represents the color Red Brown (#A52A2A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.RedOchre">
            <summary>
            Represents the color Red Ochre (#913831).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Russet">
            <summary>
            Represents the color Russet (#80461B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.SaddleBrown">
            <summary>
            Represents the color Saddle Brown (#8B4513).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Sand">
            <summary>
            Represents the color Sand (#C2B280).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Sienna">
            <summary>
            Represents the color Sienna (#A0522D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Tan">
            <summary>
            Represents the color Tan (#D2B48C).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Taupe">
            <summary>
            Represents the color Taupe (#483C32).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.TuscanRed">
            <summary>
            Represents the color Tuscan Red (#7C3030).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Wheat">
            <summary>
            Represents the color Wheat (#F5DEB3).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfBrown.Wine">
            <summary>
            Represents the color Wine (#722F37).
            </summary>
        </member>
        <member name="T:Box.Graphics.Color.ShadesOfGray">
            <summary>
            Represents a collection of shades of gray colors.
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGray.AshGray">
            <summary>
            Represents the color Ash Gray (#B2BEB5).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGray.BlueGray">
            <summary>
            Represents the color Blue Gray (#7393B3).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGray.Charcoal">
            <summary>
            Represents the color Charcoal (#36454F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGray.DarkGray">
            <summary>
            Represents the color Dark Gray (#A9A9A9).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGray.Glaucous">
            <summary>
            Represents the color Glaucous (#6082B6).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGray.Gray">
            <summary>
            Represents the color Gray (#808080).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGray.GunmetalGray">
            <summary>
            Represents the color Gunmetal Gray (#818589).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGray.LightGray">
            <summary>
            Represents the color Light Gray (#D3D3D3).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGray.Pewter">
            <summary>
            Represents the color Pewter (#899499).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGray.Platinum">
            <summary>
            Represents the color Platinum (#E5E4E2).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGray.SageGreen">
            <summary>
            Represents the color Sage Green (#8A9A5B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGray.Silver">
            <summary>
            Represents the color Silver (#C0C0C0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGray.SlateGray">
            <summary>
            Represents the color Slate Gray (#708090).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGray.Smoke">
            <summary>
            Represents the color Smoke (#848884).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGray.SteelGray">
            <summary>
            Represents the color Steel Gray (#71797E).
            </summary>
        </member>
        <member name="T:Box.Graphics.Color.ShadesOfGreen">
            <summary>
            Represents a collection of shades of green colors.
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Aqua">
            <summary>
            Represents the color Aqua (#00FFFF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Aquamarine">
            <summary>
            Represents the color Aquamarine (#7FFFD4).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.ArmyGreen">
            <summary>
            Represents the color Army Green (#454B1B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.BlueGreen">
            <summary>
            Represents the color Blue Green (#088F8F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.BrightGreen">
            <summary>
            Represents the color Bright Green (#AAFF00).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.CadetBlue">
            <summary>
            Represents the color Cadet Blue (#5F9EA0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.CadmiumGreen">
            <summary>
            Represents the color Cadmium Green (#097969).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Celadon">
            <summary>
            Represents the color Celadon (#AFE1AF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Chartreuse">
            <summary>
            Represents the color Chartreuse (#DFFF00).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Citrine">
            <summary>
            Represents the color Citrine (#E4D00A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Cyan">
            <summary>
            Represents the color Cyan (#00FFFF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.DarkGreen">
            <summary>
            Represents the color Dark Green (#023020).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.ElectricBlue">
            <summary>
            Represents the color Electric Blue (#7DF9FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.EmeraldGreen">
            <summary>
            Represents the color Emerald Green (#50C878).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Eucalyptus">
            <summary>
            Represents the color Eucalyptus (#5F8575).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.FernGreen">
            <summary>
            Represents the color Fern Green (#4F7942).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.ForestGreen">
            <summary>
            Represents the color Forest Green (#228B22).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.GrassGreen">
            <summary>
            Represents the color Grass Green (#7CFC00).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Green">
            <summary>
            Represents the color Green (#008000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.HunterGreen">
            <summary>
            Represents the color Hunter Green (#355E3B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Jade">
            <summary>
            Represents the color Jade (#00A36C).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.JungleGreen">
            <summary>
            Represents the color Jungle Green (#2AAA8A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.KellyGreen">
            <summary>
            Represents the color Kelly Green (#4CBB17).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.LightGreen">
            <summary>
            Represents the color Light Green (#90EE90).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.LimeGreen">
            <summary>
            Represents the color Lime Green (#32CD32).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.LincolnGreen">
            <summary>
            Represents the color Lincoln Green (#478778).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Malachite">
            <summary>
            Represents the color Malachite (#0BDA51).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.MintGreen">
            <summary>
            Represents the color Mint Green (#98FB98).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.MossGreen">
            <summary>
            Represents the color Moss Green (#8A9A5B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.NeonGreen">
            <summary>
            Represents the color Neon Green (#0FFF50).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Nyanza">
            <summary>
            Represents the color Nyanza (#ECFFDC).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.OliveGreen">
            <summary>
            Represents the color Olive Green (#808000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.PastelGreen">
            <summary>
            Represents the color Pastel Green (#C1E1C1).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Pear">
            <summary>
            Represents the color Pear (#C9CC3F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Peridot">
            <summary>
            Represents the color Peridot (#B4C424).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Pistachio">
            <summary>
            Represents the color Pistachio (#93C572).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.RobinEggBlue">
            <summary>
            Represents the color Robin Egg Blue (#96DED1).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.SageGreen">
            <summary>
            Represents the color Sage Green (#8A9A5B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.SeaGreen">
            <summary>
            Represents the color Sea Green (#2E8B57).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.SeafoamGreen">
            <summary>
            Represents the color Seafoam Green (#9FE2BF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.ShamrockGreen">
            <summary>
            Represents the color Shamrock Green (#009E60).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.SpringGreen">
            <summary>
            Represents the color Spring Green (#00FF7F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Teal">
            <summary>
            Represents the color Teal (#008080).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Turquoise">
            <summary>
            Represents the color Turquoise (#40E0D0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.VegasGold">
            <summary>
            Represents the color Vegas Gold (#C4B454).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Verdigris">
            <summary>
            Represents the color Verdigris (#40B5AD).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfGreen.Viridian">
            <summary>
            Represents the color Viridian (#40826D).
            </summary>
        </member>
        <member name="T:Box.Graphics.Color.ShadesOfOrange">
            <summary>
            Represents a collection of shades of orange colors.
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Amber">
            <summary>
            Represents the color Amber (#FFBF00).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Apricot">
            <summary>
            Represents the color Apricot (#FBCEB1).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Bisque">
            <summary>
            Represents the color Bisque (#F2D2BD).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.BrightOrange">
            <summary>
            Represents the color Bright Orange (#FFAC1C).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Bronze">
            <summary>
            Represents the color Bronze (#CD7F32).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Buff">
            <summary>
            Represents the color Buff (#DAA06D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.BurntOrange">
            <summary>
            Represents the color Burnt Orange (#CC5500).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.BurntSienna">
            <summary>
            Represents the color Burnt Sienna (#E97451).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Butterscotch">
            <summary>
            Represents the color Butterscotch (#E3963E).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.CadmiumOrange">
            <summary>
            Represents the color Cadmium Orange (#F28C28).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Cinnamon">
            <summary>
            Represents the color Cinnamon (#D27D2D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Copper">
            <summary>
            Represents the color Copper (#B87333).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Coral">
            <summary>
            Represents the color Coral (#FF7F50).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.CoralPink">
            <summary>
            Represents the color Coral Pink (#F88379).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.DarkOrange">
            <summary>
            Represents the color Dark Orange (#8B4000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Desert">
            <summary>
            Represents the color Desert (#FAD5A5).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Gamboge">
            <summary>
            Represents the color Gamboge (#E49B0F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.GoldenYellow">
            <summary>
            Represents the color Golden Yellow (#FFC000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Goldenrod">
            <summary>
            Represents the color Goldenrod (#DAA520).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.LightOrange">
            <summary>
            Represents the color Light Orange (#FFD580).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Mahogany">
            <summary>
            Represents the color Mahogany (#C04000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Mango">
            <summary>
            Represents the color Mango (#F4BB44).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.NavajoWhite">
            <summary>
            Represents the color Navajo White (#FFDEAD).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.NeonOrange">
            <summary>
            Represents the color Neon Orange (#FF5F1F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Ochre">
            <summary>
            Represents the color Ochre (#CC7722).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Orange">
            <summary>
            Represents the color Orange (#FFA500).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.PastelOrange">
            <summary>
            Represents the color Pastel Orange (#FAC898).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Peach">
            <summary>
            Represents the color Peach (#FFE5B4).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Persimmon">
            <summary>
            Represents the color Persimmon (#EC5800).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.PinkOrange">
            <summary>
            Represents the color Pink Orange (#F89880).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Poppy">
            <summary>
            Represents the color Poppy (#E35335).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.PumpkinOrange">
            <summary>
            Represents the color Pumpkin Orange (#FF7518).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.RedOrange">
            <summary>
            Represents the color Red Orange (#FF4433).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.SafetyOrange">
            <summary>
            Represents the color Safety Orange (#FF5F15).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Salmon">
            <summary>
            Represents the color Salmon (#FA8072).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Seashell">
            <summary>
            Represents the color Seashell (#FFF5EE).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Sienna">
            <summary>
            Represents the color Sienna (#A0522D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.SunsetOrange">
            <summary>
            Represents the color Sunset Orange (#FA5F55).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.Tangerine">
            <summary>
            Represents the color Tangerine (#F08000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.TerraCotta">
            <summary>
            Represents the color Terra Cotta (#E3735E).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfOrange.YellowOrange">
            <summary>
            Represents the color Yellow Orange (#FFAA33).
            </summary>
        </member>
        <member name="T:Box.Graphics.Color.ShadesOfPink">
            <summary>
            Represents a struct defining various shades of pink colors.
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Amaranth">
            <summary>
            Represents the color Amaranth (#9F2B68).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Bisque">
            <summary>
            Represents the color Bisque (#F2D2BD).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Cerise">
            <summary>
            Represents the color Cerise (#DE3163).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Claret">
            <summary>
            Represents the color Claret (#811331).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Coral">
            <summary>
            Represents the color Coral (#FF7F50).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.CoralPink">
            <summary>
            Represents the color Coral Pink (#F88379).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Crimson">
            <summary>
            Represents the color Crimson (#DC143C).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.DarkPink">
            <summary>
            Represents the color Dark Pink (#AA336A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.DustyRose">
            <summary>
            Represents the color Dusty Rose (#C9A9A6).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Fuchsia">
            <summary>
            Represents the color Fuchsia (#FF00FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.HotPink">
            <summary>
            Represents the color Hot Pink (#FF69B4).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.LightPink">
            <summary>
            Represents the color Light Pink (#FFB6C1).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Magenta">
            <summary>
            Represents the color Magenta (#FF00FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.MillennialPink">
            <summary>
            Represents the color Millennial Pink (#F3CFC6).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Mulberry">
            <summary>
            Represents the color Mulberry (#770737).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.NeonPink">
            <summary>
            Represents the color Neon Pink (#FF10F0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Orchid">
            <summary>
            Represents the color Orchid (#DA70D6).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.PastelPink">
            <summary>
            Represents the color Pastel Pink (#F8C8DC).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.PastelRed">
            <summary>
            Represents the color Pastel Red (#FAA0A0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Pink">
            <summary>
            Represents the color Pink (#FFC0CB).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.PinkOrange">
            <summary>
            Represents the color Pink Orange (#F89880).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Plum">
            <summary>
            Represents the color Plum (#673147).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Puce">
            <summary>
            Represents the color Puce (#A95C68).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Purple">
            <summary>
            Represents the color Purple (#800080).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Raspberry">
            <summary>
            Represents the color Raspberry (#E30B5C).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.RedPurple">
            <summary>
            Represents the color Red Purple (#953553).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Rose">
            <summary>
            Represents the color Rose (#F33A6A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.RoseGold">
            <summary>
            Represents the color Rose Gold (#E0BFB8).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.RoseRed">
            <summary>
            Represents the color Rose Red (#C21E56).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.RubyRed">
            <summary>
            Represents the color Ruby Red (#E0115F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Salmon">
            <summary>
            Represents the color Salmon (#FA8072).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Seashell">
            <summary>
            Represents the color Seashell (#FFF5EE).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.Thistle">
            <summary>
            Represents the color Thistle (#D8BFD8).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPink.WatermelonPink">
            <summary>
            Represents the color Watermelon Pink (#E37383).
            </summary>
        </member>
        <member name="T:Box.Graphics.Color.ShadesOfPurple">
            <summary>
            Represents a struct defining various shades of purple colors.
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Amaranth">
            <summary>
            Represents the color Amaranth (#9F2B68).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.BrightPurple">
            <summary>
            Represents the color Bright Purple (#BF40BF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Burgundy">
            <summary>
            Represents the color Burgundy (#800020).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Byzantium">
            <summary>
            Represents the color Byzantium (#702963).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.DarkPink">
            <summary>
            Represents the color Dark Pink (#AA336A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.DarkPurple">
            <summary>
            Represents the color Dark Purple (#301934).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Eggplant">
            <summary>
            Represents the color Eggplant (#483248).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Iris">
            <summary>
            Represents the color Iris (#5D3FD3).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Lavender">
            <summary>
            Represents the color Lavender (#E6E6FA).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.LightPurple">
            <summary>
            Represents the color Light Purple (#CBC3E3).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.LightViolet">
            <summary>
            Represents the color Light Violet (#CF9FFF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Lilac">
            <summary>
            Represents the color Lilac (#AA98A9).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Mauve">
            <summary>
            Represents the color Mauve (#E0B0FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.MauveTaupe">
            <summary>
            Represents the color Mauve Taupe (#915F6D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Mulberry">
            <summary>
            Represents the color Mulberry (#770737).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Orchid">
            <summary>
            Represents the color Orchid (#DA70D6).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.PastelPurple">
            <summary>
            Represents the color Pastel Purple (#C3B1E1).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Periwinkle">
            <summary>
            Represents the color Periwinkle (#CCCCFF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Plum">
            <summary>
            Represents the color Plum (#673147).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Puce">
            <summary>
            Represents the color Puce (#A95C68).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Purple">
            <summary>
            Represents the color Purple (#800080).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Quartz">
            <summary>
            Represents the color Quartz (#51414F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.RedPurple">
            <summary>
            Represents the color Red Purple (#953553).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Thistle">
            <summary>
            Represents the color Thistle (#D8BFD8).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.TyrianPurple">
            <summary>
            Represents the color Tyrian Purple (#630330).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Violet">
            <summary>
            Represents the color Violet (#7F00FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Wine">
            <summary>
            Represents the color Wine (#722F37).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfPurple.Wisteria">
            <summary>
            Represents the color Wisteria (#BDB5D5).
            </summary>
        </member>
        <member name="T:Box.Graphics.Color.ShadesOfRed">
            <summary>
            Represents a struct defining various shades of red colors.
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.BloodRed">
            <summary>
            Represents the color Blood Red (#880808).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.BrickRed">
            <summary>
            Represents the color Brick Red (#AA4A44).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.BrightRed">
            <summary>
            Represents the color Bright Red (#EE4B2B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Brown">
            <summary>
            Represents the color Brown (#A52A2A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Burgundy">
            <summary>
            Represents the color Burgundy (#800020).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.BurntUmber">
            <summary>
            Represents the color Burnt Umber (#6E260E).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.BurntOrange">
            <summary>
            Represents the color Burnt Orange (#CC5500).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.BurntSienna">
            <summary>
            Represents the color Burnt Sienna (#E97451).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Byzantium">
            <summary>
            Represents the color Byzantium (#702963).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.CadmiumRed">
            <summary>
            Represents the color Cadmium Red (#D22B2B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.CardinalRed">
            <summary>
            Represents the color Cardinal Red (#C41E3A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Carmine">
            <summary>
            Represents the color Carmine (#D70040).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Cerise">
            <summary>
            Represents the color Cerise (#DE3163).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Cherry">
            <summary>
            Represents the color Cherry (#D2042D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Chestnut">
            <summary>
            Represents the color Chestnut (#954535).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Claret">
            <summary>
            Represents the color Claret (#811331).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.CoralPink">
            <summary>
            Represents the color Coral Pink (#F88379).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Cordovan">
            <summary>
            Represents the color Cordovan (#814141).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Crimson">
            <summary>
            Represents the color Crimson (#DC143C).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.DarkRed">
            <summary>
            Represents the color Dark Red (#8B0000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.FaluRed">
            <summary>
            Represents the color Falu Red (#7B1818).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Garnet">
            <summary>
            Represents the color Garnet (#9A2A2A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Mahogany">
            <summary>
            Represents the color Mahogany (#C04000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Maroon">
            <summary>
            Represents the color Maroon (#800000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Marsala">
            <summary>
            Represents the color Marsala (#986868).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Mulberry">
            <summary>
            Represents the color Mulberry (#770737).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.NeonRed">
            <summary>
            Represents the color Neon Red (#FF3131).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Oxblood">
            <summary>
            Represents the color Oxblood (#4A0404).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.PastelRed">
            <summary>
            Represents the color Pastel Red (#FAA0A0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Persimmon">
            <summary>
            Represents the color Persimmon (#EC5800).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Poppy">
            <summary>
            Represents the color Poppy (#E35335).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Puce">
            <summary>
            Represents the color Puce (#A95C68).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Raspberry">
            <summary>
            Represents the color Raspberry (#E30B5C).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Red">
            <summary>
            Represents the color Red (#FF0000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.RedBrown">
            <summary>
            Represents the color Red Brown (#A52A2A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.RedOchre">
            <summary>
            Represents the color Red Ochre (#913831).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.RedOrange">
            <summary>
            Represents the color Red Orange (#FF4433).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.RedPurple">
            <summary>
            Represents the color Red Purple (#953553).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.RoseRed">
            <summary>
            Represents the color Rose Red (#C21E56).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.RubyRed">
            <summary>
            Represents the color Ruby Red (#E0115F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Russet">
            <summary>
            Represents the color Russet (#80461B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Salmon">
            <summary>
            Represents the color Salmon (#FA8072).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Scarlet">
            <summary>
            Represents the color Scarlet (#FF2400).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.SunsetOrange">
            <summary>
            Represents the color Sunset Orange (#FA5F55).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.TerraCotta">
            <summary>
            Represents the color Terra Cotta (#E3735E).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.TuscanRed">
            <summary>
            Represents the color Tuscan Red (#7C3030).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.TyrianPurple">
            <summary>
            Represents the color Tyrian Purple (#630330).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.VenetianRed">
            <summary>
            Represents the color Venetian Red (#A42A04).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Vermillion">
            <summary>
            Represents the color Vermillion (#E34234).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfRed.Wine">
            <summary>
            Represents the color Wine (#722F37).
            </summary>
        </member>
        <member name="T:Box.Graphics.Color.ShadesOfWhite">
            <summary>
            Struct representing shades of white colors.
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfWhite.Alabaster">
            <summary>
            Represents the color Alabaster (#EDEADE).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfWhite.Beige">
            <summary>
            Represents the color Beige (#F5F5DC).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfWhite.BoneWhite">
            <summary>
            Represents the color Bone White (#F9F6EE).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfWhite.Cornsilk">
            <summary>
            Represents the color Cornsilk (#FFF8DC).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfWhite.Cream">
            <summary>
            Represents the color Cream (#FFFDD0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfWhite.Eggshell">
            <summary>
            Represents the color Eggshell (#F0EAD6).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfWhite.Ivory">
            <summary>
            Represents the color Ivory (#FFFFF0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfWhite.Linen">
            <summary>
            Represents the color Linen (#E9DCC9).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfWhite.NavajoWhite">
            <summary>
            Represents the color Navajo White (#FFDEAD).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfWhite.OffWhite">
            <summary>
            Represents the color Off White (#FAF9F6).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfWhite.Parchment">
            <summary>
            Represents the color Parchment (#FCF5E5).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfWhite.Peach">
            <summary>
            Represents the color Peach (#FFE5B4).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfWhite.Pearl">
            <summary>
            Represents the color Pearl (#E2DFD2).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfWhite.Seashell">
            <summary>
            Represents the color Seashell (#FFF5EE).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfWhite.Vanilla">
            <summary>
            Represents the color Vanilla (#F3E5AB).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfWhite.White">
            <summary>
            Represents the color White (#FFFFFF).
            </summary>
        </member>
        <member name="T:Box.Graphics.Color.ShadesOfYellow">
            <summary>
            Struct representing shades of yellow colors.
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Almond">
            <summary>
            Represents the color Almond (#EADDCA).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Amber">
            <summary>
            Represents the color Amber (#FFBF00).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Apricot">
            <summary>
            Represents the color Apricot (#FBCEB1).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Beige">
            <summary>
            Represents the color Beige (#F5F5DC).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Brass">
            <summary>
            Represents the color Brass (#E1C16E).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.BrightYellow">
            <summary>
            Represents the color BrightYellow (#FFEA00).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.CadmiumYellow">
            <summary>
            Represents the color CadmiumYellow (#FDDA0D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.CanaryYellow">
            <summary>
            Represents the color CanaryYellow (#FFFF8F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Chartreuse">
            <summary>
            Represents the color Chartreuse (#DFFF00).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Citrine">
            <summary>
            Represents the color Citrine (#E4D00A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Cornsilk">
            <summary>
            Represents the color Cornsilk (#FFF8DC).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Cream">
            <summary>
            Represents the color Cream (#FFFDD0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.DarkYellow">
            <summary>
            Represents the color DarkYellow (#8B8000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Desert">
            <summary>
            Represents the color Desert (#FAD5A5).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Ecru">
            <summary>
            Represents the color Ecru (#C2B280).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Flax">
            <summary>
            Represents the color Flax (#EEDC82).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Gamboge">
            <summary>
            Represents the color Gamboge (#E49B0F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Gold">
            <summary>
            Represents the color Gold (#FFD700).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.GoldenYellow">
            <summary>
            Represents the color GoldenYellow (#FFC000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Goldenrod">
            <summary>
            Represents the color Goldenrod (#DAA520).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Icterine">
            <summary>
            Represents the color Icterine (#FCF55F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Ivory">
            <summary>
            Represents the color Ivory (#FFFFF0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Jasmine">
            <summary>
            Represents the color Jasmine (#F8DE7E).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Khaki">
            <summary>
            Represents the color Khaki (#F0E68C).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.LemonYellow">
            <summary>
            Represents the color LemonYellow (#FAFA33).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Maize">
            <summary>
            Represents the color Maize (#FBEC5D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Mango">
            <summary>
            Represents the color Mango (#F4BB44).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.MustardYellow">
            <summary>
            Represents the color MustardYellow (#FFDB58).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.NaplesYellow">
            <summary>
            Represents the color NaplesYellow (#FADA5E).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.NavajoWhite">
            <summary>
            Represents the color NavajoWhite (#FFDEAD).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Nyanza">
            <summary>
            Represents the color Nyanza (#ECFFDC).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.PastelYellow">
            <summary>
            Represents the color PastelYellow (#FFFAA0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Peach">
            <summary>
            Represents the color Peach (#FFE5B4).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Pear">
            <summary>
            Represents the color Pear (#C9CC3F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Peridot">
            <summary>
            Represents the color Peridot (#B4C424).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Pistachio">
            <summary>
            Represents the color Pistachio (#93C572).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Saffron">
            <summary>
            Represents the color Saffron (#F4C430).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Vanilla">
            <summary>
            Represents the color Vanilla (#F3E5AB).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.VegasGold">
            <summary>
            Represents the color VegasGold (#C4B454).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Wheat">
            <summary>
            Represents the color Wheat (#F5DEB3).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.Yellow">
            <summary>
            Represents the color Yellow (#FFFF00).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.ShadesOfYellow.YellowOrange">
            <summary>
            Represents the color YellowOrange (#FFAA33).
            </summary>
        </member>
        <member name="T:Box.Graphics.Color.ShadesOfTransparency">
            <summary>
            Represents a struct that defines various shades of transparency.
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.ShadesOfTransparency.Transparent">
            <summary>
            Fully transparent color (ARGB: 00-00-00-00).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.ShadesOfTransparency.Black25Transparent">
            <summary>
            25% transparent black (ARGB: 40-00-00-00).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.ShadesOfTransparency.Black50Transparent">
            <summary>
            50% transparent black (ARGB: 80-00-00-00).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.ShadesOfTransparency.Black75Transparent">
            <summary>
            75% transparent black (ARGB: BF-00-00-00).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.ShadesOfTransparency.TransparentBlack">
            <summary>
            Fully transparent black (ARGB: 00-00-00-00).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.ShadesOfTransparency.White25Transparent">
            <summary>
            25% transparent white (ARGB: 40-FF-FF-FF).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.ShadesOfTransparency.White50Transparent">
            <summary>
            50% transparent white (ARGB: 80-FF-FF-FF).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.ShadesOfTransparency.White75Transparent">
            <summary>
            75% transparent white (ARGB: BF-FF-FF-FF).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.ShadesOfTransparency.TransparentWhite">
            <summary>
            Fully transparent white (ARGB: FF-FF-FF-00).
            </summary>
        </member>
        <member name="T:Box.Graphics.Color.AllShades">
            <summary>
            Struct representing various shades of colors.
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Black">
            <summary>
            Represents the color black (#000000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Charcoal">
            <summary>
            Represents the color charcoal (#36454F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.DarkGreen">
            <summary>
            Represents the color dark green (#023020).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.DarkPurple">
            <summary>
            Represents the color dark purple (#301934).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.JetBlack">
            <summary>
            Represents the color jet black (#343434).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Licorice">
            <summary>
            Represents the color licorice (#1B1212).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.MatteBlack">
            <summary>
            Represents the color matte black (#28282B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.MidnightBlue">
            <summary>
            Represents the color midnight blue (#191970).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Onyx">
            <summary>
            Represents the color onyx (#353935).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Aqua">
            <summary>
            Represents the color Aqua (#00FFFF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Azure">
            <summary>
            Represents the color Azure (#F0FFFF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.BabyBlue">
            <summary>
            Represents the color Baby Blue (#89CFF0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Blue">
            <summary>
            Represents the color Blue (#0000FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.BlueGray">
            <summary>
            Represents the color Blue Gray (#7393B3).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.BlueGreen">
            <summary>
            Represents the color Blue Green (#088F8F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.BrightBlue">
            <summary>
            Represents the color Bright Blue (#0096FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.CadetBlue">
            <summary>
            Represents the color Cadet Blue (#5F9EA0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.CobaltBlue">
            <summary>
            Represents the color Cobalt Blue (#0047AB).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.CornflowerBlue">
            <summary>
            Represents the color Cornflower Blue (#6495ED).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Cyan">
            <summary>
            Represents the color Cyan (#00FFFF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.DarkBlue">
            <summary>
            Represents the color Dark Blue (#00008B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Denim">
            <summary>
            Represents the color Denim (#6F8FAF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.EgyptianBlue">
            <summary>
            Represents the color Egyptian Blue (#1434A4).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.ElectricBlue">
            <summary>
            Represents the color Electric Blue (#7DF9FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Glaucous">
            <summary>
            Represents the color Glaucous (#6082B6).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Jade">
            <summary>
            Represents the color Jade (#00A36C).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Indigo">
            <summary>
            Represents the color Indigo (#3F00FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Iris">
            <summary>
            Represents the color Iris (#5D3FD3).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.LightBlue">
            <summary>
            Represents the color Light Blue (#ADD8E6).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.NavyBlue">
            <summary>
            Represents the color Navy Blue (#000080).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.NeonBlue">
            <summary>
            Represents the color Neon Blue (#1F51FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.PastelBlue">
            <summary>
            Represents the color Pastel Blue (#A7C7E7).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Periwinkle">
            <summary>
            Represents the color Periwinkle (#CCCCFF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.PowderBlue">
            <summary>
            Represents the color Powder Blue (#B6D0E2).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.RobinEggBlue">
            <summary>
            Represents the color Robin Egg Blue (#96DED1).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.RoyalBlue">
            <summary>
            Represents the color Royal Blue (#4169E1).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.SapphireBlue">
            <summary>
            Represents the color Sapphire Blue (#0F52BA).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.SeafoamGreen">
            <summary>
            Represents the color Seafoam Green (#9FE2BF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.SkyBlue">
            <summary>
            Represents the color Sky Blue (#87CEEB).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.SteelBlue">
            <summary>
            Represents the color Steel Blue (#4682B4).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Teal">
            <summary>
            Represents the color Teal (#008080).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Turquoise">
            <summary>
            Represents the color Turquoise (#40E0D0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Ultramarine">
            <summary>
            Represents the color Ultramarine (#0437F2).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Verdigris">
            <summary>
            Represents the color Verdigris (#40B5AD).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Zaffre">
            <summary>
            Represents the color Zaffre (#0818A8).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Almond">
            <summary>
            Represents the color Almond (#EADDCA).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Brass">
            <summary>
            Represents the color Brass (#E1C16E).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Bronze">
            <summary>
            Represents the color Bronze (#CD7F32).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Brown">
            <summary>
            Represents the color Brown (#A52A2A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Buff">
            <summary>
            Represents the color Buff (#DAA06D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Burgundy">
            <summary>
            Represents the color Burgundy (#800020).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.BurntSienna">
            <summary>
            Represents the color Burnt Sienna (#E97451).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.BurntUmber">
            <summary>
            Represents the color Burnt Umber (#6E260E).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Camel">
            <summary>
            Represents the color Camel (#C19A6B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Chestnut">
            <summary>
            Represents the color Chestnut (#954535).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Chocolate">
            <summary>
            Represents the color Chocolate (#7B3F00).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Cinnamon">
            <summary>
            Represents the color Cinnamon (#D27D2D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Coffee">
            <summary>
            Represents the color Coffee (#6F4E37).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Cognac">
            <summary>
            Represents the color Cognac (#834333).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Copper">
            <summary>
            Represents the color Copper (#B87333).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Cordovan">
            <summary>
            Represents the color Cordovan (#814141).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.DarkBrown">
            <summary>
            Represents the color Dark Brown (#5C4033).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.DarkRed">
            <summary>
            Represents the color Dark Red (#8B0000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.DarkTan">
            <summary>
            Represents the color Dark Tan (#988558).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Ecru">
            <summary>
            Represents the color Ecru (#C2B280).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Fallow">
            <summary>
            Represents the color Fallow (#C19A6B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Fawn">
            <summary>
            Represents the color Fawn (#E5AA70).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Garnet">
            <summary>
            Represents the color Garnet (#9A2A2A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.GoldenBrown">
            <summary>
            Represents the color Golden Brown (#966919).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Khaki">
            <summary>
            Represents the color Khaki (#F0E68C).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.LightBrown">
            <summary>
            Represents the color Light Brown (#C4A484).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Mahogany">
            <summary>
            Represents the color Mahogany (#C04000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Maroon">
            <summary>
            Represents the color Maroon (#800000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Mocha">
            <summary>
            Represents the color Mocha (#967969).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Nude">
            <summary>
            Represents the color Nude (#F2D2BD).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Ochre">
            <summary>
            Represents the color Ochre (#CC7722).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.OliveGreen">
            <summary>
            Represents the color Olive Green (#808000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Oxblood">
            <summary>
            Represents the color Oxblood (#4A0400).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Puce">
            <summary>
            Represents the color Puce (#A95C68).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.RedBrown">
            <summary>
            Represents the color Red Brown (#A52A2A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.RedOchre">
            <summary>
            Represents the color Red Ochre (#913831).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Russet">
            <summary>
            Represents the color Russet (#80461B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.SaddleBrown">
            <summary>
            Represents the color Saddle Brown (#8B4513).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Sand">
            <summary>
            Represents the color Sand (#C2B280).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Sienna">
            <summary>
            Represents the color Sienna (#A0522D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Tan">
            <summary>
            Represents the color Tan (#D2B48C).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Taupe">
            <summary>
            Represents the color Taupe (#483C32).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.TuscanRed">
            <summary>
            Represents the color Tuscan Red (#7C3030).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Wheat">
            <summary>
            Represents the color Wheat (#F5DEB3).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Wine">
            <summary>
            Represents the color Wine (#722F37).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.AshGray">
            <summary>
            Represents the color Ash Gray (#B2BEB5).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.DarkGray">
            <summary>
            Represents the color Dark Gray (#A9A9A9).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Gray">
            <summary>
            Represents the color Gray (#808080).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.GunmetalGray">
            <summary>
            Represents the color Gunmetal Gray (#818589).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.LightGray">
            <summary>
            Represents the color Light Gray (#D3D3D3).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Pewter">
            <summary>
            Represents the color Pewter (#899499).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Platinum">
            <summary>
            Represents the color Platinum (#E5E4E2).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.SageGreen">
            <summary>
            Represents the color Sage Green (#8A9A5B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Silver">
            <summary>
            Represents the color Silver (#C0C0C0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.SlateGray">
            <summary>
            Represents the color Slate Gray (#708090).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Smoke">
            <summary>
            Represents the color Smoke (#848884).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.SteelGray">
            <summary>
            Represents the color Steel Gray (#71797E).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Aquamarine">
            <summary>
            Represents the color Aquamarine (#7FFFD4).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.ArmyGreen">
            <summary>
            Represents the color Army Green (#454B1B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.BrightGreen">
            <summary>
            Represents the color Bright Green (#AAFF00).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.CadmiumGreen">
            <summary>
            Represents the color Cadmium Green (#097969).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Celadon">
            <summary>
            Represents the color Celadon (#AFE1AF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Chartreuse">
            <summary>
            Represents the color Chartreuse (#DFFF00).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Citrine">
            <summary>
            Represents the color Citrine (#E4D00A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.EmeraldGreen">
            <summary>
            Represents the color Emerald Green (#50C878).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Eucalyptus">
            <summary>
            Represents the color Eucalyptus (#5F8575).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.FernGreen">
            <summary>
            Represents the color Fern Green (#4F7942).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.ForestGreen">
            <summary>
            Represents the color Forest Green (#228B22).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.GrassGreen">
            <summary>
            Represents the color Grass Green (#7CFC00).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Green">
            <summary>
            Represents the color Green (#008000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.HunterGreen">
            <summary>
            Represents the color Hunter Green (#355E3B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.JungleGreen">
            <summary>
            Represents the color Jungle Green (#2AAA8A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.KellyGreen">
            <summary>
            Represents the color Kelly Green (#4CBB17).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.LightGreen">
            <summary>
            Represents the color Light Green (#90EE90).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.LimeGreen">
            <summary>
            Represents the color Lime Green (#32CD32).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.LincolnGreen">
            <summary>
            Represents the color Lincoln Green (#478778).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Malachite">
            <summary>
            Represents the color Malachite (#0BDA51).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.MintGreen">
            <summary>
            Represents the color Mint Green (#98FB98).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.MossGreen">
            <summary>
            Represents the color Moss Green (#8A9A5B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.NeonGreen">
            <summary>
            Represents the color Neon Green (#0FFF50).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Nyanza">
            <summary>
            Represents the color Nyanza (#ECFFDC).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.PastelGreen">
            <summary>
            Represents the color Pastel Green (#C1E1C1).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Pear">
            <summary>
            Represents the color Pear (#C9CC3F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Peridot">
            <summary>
            Represents the color Peridot (#B4C424).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Pistachio">
            <summary>
            Represents the color Pistachio (#93C572).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.SeaGreen">
            <summary>
            Represents the color Sea Green (#2E8B57).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.ShamrockGreen">
            <summary>
            Represents the color Shamrock Green (#009E60).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.SpringGreen">
            <summary>
            Represents the color Spring Green (#00FF7F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.VegasGold">
            <summary>
            Represents the color Vegas Gold (#C4B454).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Viridian">
            <summary>
            Represents the color Viridian (#40826D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Amber">
            <summary>
            Represents the color Amber (#FFBF00).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Apricot">
            <summary>
            Represents the color Apricot (#FBCEB1).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Bisque">
            <summary>
            Represents the color Bisque (#F2D2BD).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.BrightOrange">
            <summary>
            Represents the color Bright Orange (#FFAC1C).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.BurntOrange">
            <summary>
            Represents the color Burnt Orange (#CC5500).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Butterscotch">
            <summary>
            Represents the color Butterscotch (#E3963E).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.CadmiumOrange">
            <summary>
            Represents the color Cadmium Orange (#F28C28).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Coral">
            <summary>
            Represents the color Coral (#FF7F50).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.CoralPink">
            <summary>
            Represents the color Coral Pink (#F88379).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.DarkOrange">
            <summary>
            Represents the color Dark Orange (#8B4000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Desert">
            <summary>
            Represents the color Desert (#FAD5A5).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Gamboge">
            <summary>
            Represents the color Gamboge (#E49B0F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.GoldenYellow">
            <summary>
            Represents the color Golden Yellow (#FFC000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Goldenrod">
            <summary>
            Represents the color Goldenrod (#DAA520).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.LightOrange">
            <summary>
            Represents the color Light Orange (#FFD580).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Mango">
            <summary>
            Represents the color Mango (#F4BB44).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.NavajoWhite">
            <summary>
            Represents the color Navajo White (#FFDEAD).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.NeonOrange">
            <summary>
            Represents the color Neon Orange (#FF5F1F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Orange">
            <summary>
            Represents the color Orange (#FFA500).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.PastelOrange">
            <summary>
            Represents the color Pastel Orange (#FAC898).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Peach">
            <summary>
            Represents the color Peach (#FFE5B4).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Persimmon">
            <summary>
            Represents the color Persimmon (#EC5800).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.PinkOrange">
            <summary>
            Represents the color Pink Orange (#F89880).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Poppy">
            <summary>
            Represents the color Poppy (#E35335).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.PumpkinOrange">
            <summary>
            Represents the color Pumpkin Orange (#FF7518).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.RedOrange">
            <summary>
            Represents the color Red Orange (#FF4433).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.SafetyOrange">
            <summary>
            Represents the color Safety Orange (#FF5F15).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Salmon">
            <summary>
            Represents the color Salmon (#FA8072).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Seashell">
            <summary>
            Represents the color Seashell (#FFF5EE).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.SunsetOrange">
            <summary>
            Represents the color Sunset Orange (#FA5F55).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Tangerine">
            <summary>
            Represents the color Tangerine (#F08000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.TerraCotta">
            <summary>
            Represents the color Terra Cotta (#E3735E).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.YellowOrange">
            <summary>
            Represents the color Yellow Orange (#FFAA33).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Amaranth">
            <summary>
            Represents the color Amaranth (#9F2B68).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Cerise">
            <summary>
            Represents the color Cerise (#DE3163).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Claret">
            <summary>
            Represents the color Claret (#811331).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Crimson">
            <summary>
            Represents the color Crimson (#DC143C).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.DarkPink">
            <summary>
            Represents the color Dark Pink (#AA336A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.DustyRose">
            <summary>
            Represents the color Dusty Rose (#C9A9A6).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Fuchsia">
            <summary>
            Represents the color Fuchsia (#FF00FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.HotPink">
            <summary>
            Represents the color Hot Pink (#FF69B4).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.LightPink">
            <summary>
            Represents the color Light Pink (#FFB6C1).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Magenta">
            <summary>
            Represents the color Magenta (#FF00FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.MillennialPink">
            <summary>
            Represents the color Millennial Pink (#F3CFC6).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Mulberry">
            <summary>
            Represents the color Mulberry (#770737).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.NeonPink">
            <summary>
            Represents the color Neon Pink (#FF10F0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Orchid">
            <summary>
            Represents the color Orchid (#DA70D6).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.PastelPink">
            <summary>
            Represents the color Pastel Pink (#F8C8DC).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.PastelRed">
            <summary>
            Represents the color Pastel Red (#FAA0A0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Pink">
            <summary>
            Represents the color Pink (#FFC0CB).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Plum">
            <summary>
            Represents the color Plum (#673147).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Purple">
            <summary>
            Represents the color Purple (#800080).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Raspberry">
            <summary>
            Represents the color Raspberry (#E30B5C).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.RedPurple">
            <summary>
            Represents the color Red Purple (#953553).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Rose">
            <summary>
            Represents the color Rose (#F33A6A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.RoseGold">
            <summary>
            Represents the color Rose Gold (#E0BFB8).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.RoseRed">
            <summary>
            Represents the color Rose Red (#C21E56).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.RubyRed">
            <summary>
            Represents the color Ruby Red (#E0115F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Thistle">
            <summary>
            Represents the color Thistle (#D8BFD8).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.WatermelonPink">
            <summary>
            Represents the color Watermelon Pink (#E37383).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.BrightPurple">
            <summary>
            Represents the color Bright Purple (#BF40BF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Byzantium">
            <summary>
            Represents the color Byzantium (#702963).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Eggplant">
            <summary>
            Represents the color Eggplant (#483248).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Lavender">
            <summary>
            Represents the color Lavender (#E6E6FA).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.LightPurple">
            <summary>
            Represents the color Light Purple (#CBC3E3).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.LightViolet">
            <summary>
            Represents the color Light Violet (#CF9FFF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Lilac">
            <summary>
            Represents the color Lilac (#AA98A9).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Mauve">
            <summary>
            Represents the color Mauve (#E0B0FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.MauveTaupe">
            <summary>
            Represents the color Mauve Taupe (#915F6D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.PastelPurple">
            <summary>
            Represents the color Pastel Purple (#C3B1E1).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Quartz">
            <summary>
            Represents the color Periwinkle (#CCCCFF).
            </summary>
            <summary>
            Represents the color Quartz (#51414F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.TyrianPurple">
            <summary>
            Represents the color Tyrian Purple (#630330).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Violet">
            <summary>
            Represents the color Violet (#7F00FF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Wisteria">
            <summary>
            Represents the color Wisteria (#BDB5D5).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.BloodRed">
            <summary>
            Represents the color Blood Red (#880808).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.BrickRed">
            <summary>
            Represents the color Brick Red (#AA4A44).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.BrightRed">
            <summary>
            Represents the color Bright Red (#EE4B2B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.CadmiumRed">
            <summary>
            Represents the color Cadmium Red (#D22B2B).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.CardinalRed">
            <summary>
            Represents the color Cardinal Red (#C41E3A).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Carmine">
            <summary>
            Represents the color Carmine (#D70040).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Cherry">
            <summary>
            Represents the color Cherry (#D2042D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.FaluRed">
            <summary>
            Represents the color Falu Red (#7B1818).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Marsala">
            <summary>
            Represents the color Marsala (#986868).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.NeonRed">
            <summary>
            Represents the color Neon Red (#FF3131).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Red">
            <summary>
            Represents the color Red (#FF0000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Scarlet">
            <summary>
            Represents the color Scarlet (#FF2400).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.VenetianRed">
            <summary>
            Represents the color Venetian Red (#A42A04).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Vermillion">
            <summary>
            Represents the color Vermillion (#E34234).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Alabaster">
            <summary>
            Represents the color Alabaster (#EDEADE).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Beige">
            <summary>
            Represents the color Beige (#F5F5DC).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.BoneWhite">
            <summary>
            Represents the color Bone White (#F9F6EE).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Cornsilk">
            <summary>
            Represents the color Cornsilk (#FFF8DC).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Cream">
            <summary>
            Represents the color Cream (#FFFDD0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Eggshell">
            <summary>
            Represents the color Eggshell (#F0EAD6).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Ivory">
            <summary>
            Represents the color Ivory (#FFFFF0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Linen">
            <summary>
            Represents the color Linen (#E9DCC9).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.OffWhite">
            <summary>
            Represents the color Off White (#FAF9F6).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Parchment">
            <summary>
            Represents the color Parchment (#FCF5E5).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Pearl">
            <summary>
            Represents the color Pearl (#E2DFD2).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Vanilla">
            <summary>
            Represents the color Vanilla (#F3E5AB).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.White">
            <summary>
            Represents the color White (#FFFFFF).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.BrightYellow">
            <summary>
            Represents the color BrightYellow (#FFEA00).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.CadmiumYellow">
            <summary>
            Represents the color CadmiumYellow (#FDDA0D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.CanaryYellow">
            <summary>
            Represents the color CanaryYellow (#FFFF8F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.DarkYellow">
            <summary>
            Represents the color DarkYellow (#8B8000).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Flax">
            <summary>
            Represents the color Flax (#EEDC82).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Gold">
            <summary>
            Represents the color Gold (#FFD700).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Icterine">
            <summary>
            Represents the color Icterine (#FCF55F).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Jasmine">
            <summary>
            Represents the color Jasmine (#F8DE7E).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.LemonYellow">
            <summary>
            Represents the color LemonYellow (#FAFA33).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Maize">
            <summary>
            Represents the color Maize (#FBEC5D).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.MustardYellow">
            <summary>
            Represents the color MustardYellow (#FFDB58).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.NaplesYellow">
            <summary>
            Represents the color NaplesYellow (#FADA5E).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.PastelYellow">
            <summary>
            Represents the color PastelYellow (#FFFAA0).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Saffron">
            <summary>
            Represents the color Saffron (#F4C430).
            </summary>
        </member>
        <member name="P:Box.Graphics.Color.AllShades.Yellow">
            <summary>
            Represents the color Yellow (#FFFF00).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.AllShades.Transparent">
            <summary>
            Fully transparent color (ARGB: 00-00-00-00).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.AllShades.Black25Transparent">
            <summary>
            25% transparent black (ARGB: 40-00-00-00).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.AllShades.Black50Transparent">
            <summary>
            50% transparent black (ARGB: 80-00-00-00).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.AllShades.Black75Transparent">
            <summary>
            75% transparent black (ARGB: BF-00-00-00).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.AllShades.TransparentBlack">
            <summary>
            Fully transparent black (ARGB: 00-00-00-00).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.AllShades.White25Transparent">
            <summary>
            25% transparent white (ARGB: 40-FF-FF-FF).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.AllShades.White50Transparent">
            <summary>
            50% transparent white (ARGB: 80-FF-FF-FF).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.AllShades.White75Transparent">
            <summary>
            75% transparent white (ARGB: BF-FF-FF-FF).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.AllShades.TransparentWhite">
            <summary>
            Fully transparent white (ARGB: FF-FF-FF-00).
            </summary>
        </member>
        <member name="F:Box.Graphics.Color.AllShades.CornFlowerBlue">
            <summary>
            Represents the color CornFlowerBlue (#6495ED).
            </summary>
        </member>
        <member name="T:Box.Graphics.Fonts.BitmapFont">
            <summary>
            Represents a bitmap font, which is a font rendered from a texture atlas containing individual characters.
            </summary>
        </member>
        <member name="M:Box.Graphics.Fonts.BitmapFont.GetTexture">
            <summary>
            Retrieves the texture used by this bitmap font for rendering characters.
            </summary>
            <returns>The texture used for rendering characters of the bitmap font.</returns>
        </member>
        <member name="M:Box.Graphics.Fonts.BitmapFont.Initialize">
            <summary>
            Initializes the bitmap font by loading its associated texture and configuring its internal settings.
            </summary>
        </member>
        <member name="M:Box.Graphics.Fonts.BitmapFont.GetTextHeight">
            <summary>
            Calculates and returns the total height of a line of text, 
            including the font's line height and additional line spacing.
            </summary>
            <returns>
            The computed text height as a floating-point value.
            </returns>
        </member>
        <member name="T:Box.Graphics.Fonts.Font">
            <summary>
            Represents a font asset that implements the IAsset interface.
            </summary>
        </member>
        <member name="P:Box.Graphics.Fonts.Font.Glpyhs">
            <summary>
            Gets or sets the dictionary of glyphs associated with characters in the font.
            </summary>
        </member>
        <member name="P:Box.Graphics.Fonts.Font.Texture">
            <summary>
            Gets or sets the SFML texture associated with the font.
            </summary>
        </member>
        <member name="P:Box.Graphics.Fonts.Font.IsDisposed">
            <summary>
            Gets a value indicating whether the font has been disposed.
            </summary>
        </member>
        <member name="P:Box.Graphics.Fonts.Font.Filename">
            <summary>
            Gets or sets the filename of the font.
            </summary>
        </member>
        <member name="P:Box.Graphics.Fonts.Font.LineSpacing">
            <summary>
            Gets or sets the line spacing of the font.
            </summary>
        </member>
        <member name="P:Box.Graphics.Fonts.Font.Spacing">
            <summary>
            Gets or sets the character spacing of the font.
            </summary>
        </member>
        <member name="P:Box.Graphics.Fonts.Font.Initialized">
            <summary>
            Gets or sets a value indicating whether the font has been initialized.
            </summary>
        </member>
        <member name="M:Box.Graphics.Fonts.Font.Dispose">
            <summary>
            Releases all resources used by the font.
            </summary>
        </member>
        <member name="M:Box.Graphics.Fonts.Font.Initialize">
            <summary>
            Initializes the font.
            </summary>
        </member>
        <member name="M:Box.Graphics.Fonts.Font.GetTexture">
            <summary>
            Retrieves the SFML texture associated with the font.
            </summary>
            <returns>The SFML texture of the font.</returns>
        </member>
        <member name="M:Box.Graphics.Fonts.Font.GetTextHeight">
            <summary>
            Retrieves the height of the text rendered using the font.
            </summary>
            <returns>The height of the text rendered by the font.</returns>
        </member>
        <member name="M:Box.Graphics.Fonts.Font.Measure(System.String)">
            <summary>
            Measures the dimensions (width and height) of the given text.
            </summary>
            <param name="text">The text to measure.</param>
            <returns>A Vect2 representing the width and height of the text.</returns>
        </member>
        <member name="M:Box.Graphics.Fonts.Font.MeasureWidth(System.String)">
            <summary>
            Measures the width of the given text.
            </summary>
            <param name="text">The text to measure.</param>
            <returns>The width of the text.</returns>
        </member>
        <member name="M:Box.Graphics.Fonts.Font.MeasureHeight(System.String)">
            <summary>
            Measures the height of the given text.
            </summary>
            <param name="text">The text to measure.</param>
            <returns>The height of the text.</returns>
        </member>
        <member name="M:Box.Graphics.Fonts.Font.FormatText(System.String,System.Single)">
            <summary>
            Formats the text to fit within the specified width and returns the formatted text.
            </summary>
            <param name="text">The text to format.</param>
            <param name="width">The width constraint.</param>
            <returns>The formatted text.</returns>
        </member>
        <member name="M:Box.Graphics.Fonts.Font.FormatText(System.String,System.Int32)">
            <summary>
            Formats the text to fit within the specified width and returns the formatted text.
            </summary>
            <param name="text">The text to format.</param>
            <param name="width">The width constraint.</param>
            <returns>The formatted text.</returns>
        </member>
        <member name="M:Box.Graphics.Fonts.Font.FormatText(Box.Graphics.Fonts.Font,System.String,System.Single)">
            <summary>
            Formats the text using the specified font to fit within the specified width and returns the formatted text.
            </summary>
            <param name="font">The font used for formatting.</param>
            <param name="text">The text to format.</param>
            <param name="width">The width constraint.</param>
            <returns>The formatted text.</returns>
        </member>
        <member name="M:Box.Graphics.Fonts.Font.FormatTextAndMeasure(System.String,System.Int32)">
            <summary>
            Formats the text to fit within the specified width and measures its resulting dimensions.
            </summary>
            <param name="text">The text to format and measure.</param>
            <param name="width">The width constraint.</param>
            <returns>A Vect2 representing the width and height of the formatted text.</returns>
        </member>
        <member name="M:Box.Graphics.Fonts.Font.FormatTextAndMeasure(Box.Graphics.Fonts.Font,System.String,System.Int32)">
            <summary>
            Formats the text using the specified font to fit within the specified width and measures its resulting dimensions.
            </summary>
            <param name="font">The font used for formatting.</param>
            <param name="text">The text to format and measure.</param>
            <param name="width">The width constraint.</param>
            <returns>A Vect2 representing the width and height of the formatted text.</returns>
        </member>
        <member name="M:Box.Graphics.Fonts.Font.MaxLines(System.String,System.Int32)">
            <summary>
            Calculates the maximum number of lines required to display the text within the specified integer width.
            </summary>
            <param name="text">The text to measure.</param>
            <param name="width">The width constraint.</param>
            <returns>The maximum number of lines required.</returns>
        </member>
        <member name="M:Box.Graphics.Fonts.Font.MaxLines(System.String,System.Single)">
            <summary>
            Calculates the maximum number of lines required to display the text within the specified floating-point width.
            </summary>
            <param name="text">The text to measure.</param>
            <param name="width">The width constraint.</param>
            <returns>The maximum number of lines required.</returns>
        </member>
        <member name="M:Box.Graphics.Fonts.Font.MaxLines(Box.Graphics.Fonts.Font,System.String,System.Int32)">
            <summary>
            Calculates the maximum number of lines required to display the text using the specified font within the specified integer width.
            </summary>
            <param name="font">The font used for measurement.</param>
            <param name="text">The text to measure.</param>
            <param name="width">The width constraint.</param>
            <returns>The maximum number of lines required.</returns>
        </member>
        <member name="T:Box.Graphics.Fonts.GenericFont">
            <summary>
            Represents a generic implementation of a font, providing methods for measuring, formatting, and handling text rendering.
            </summary>
        </member>
        <member name="M:Box.Graphics.Fonts.GenericFont.GetTexture">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Box.Graphics.Fonts.GenericFont.Initialize">
            <summary>
            Initializes the font, preparing it for use by loading necessary resources and setting internal states.
            </summary>
        </member>
        <member name="M:Box.Graphics.Fonts.GenericFont.GetTextHeight">
            <summary>
            Calculates and returns the total height of a line of text, 
            including the font's line height and additional line spacing.
            </summary>
            <returns>
            The computed text height as a floating-point value.
            </returns>
        </member>
        <member name="T:Box.Graphics.Renderer">
            <summary>
            Manages rendering operations for shapes and surfaces within a viewport.
            </summary>
        </member>
        <member name="P:Box.Graphics.Renderer.Size">
            <summary>
            Gets the size of the viewport.
            </summary>
        </member>
        <member name="P:Box.Graphics.Renderer.Width">
            <summary>
            Gets the width of the viewport.
            </summary>
        </member>
        <member name="P:Box.Graphics.Renderer.Height">
            <summary>
            Gets the height of the viewport.
            </summary>
        </member>
        <member name="P:Box.Graphics.Renderer.Center">
            <summary>
            Gets the center coordinates of the viewport.
            </summary>
        </member>
        <member name="P:Box.Graphics.Renderer.Instance">
            <summary>
            Gets the singleton instance of the Renderer class.
            </summary>
        </member>
        <member name="P:Box.Graphics.Renderer.Count">
            <summary>
            Gets the current count.
            </summary>
        </member>
        <member name="P:Box.Graphics.Renderer.BatchCount">
            <summary>
            Gets the batch count.
            </summary>
        </member>
        <member name="P:Box.Graphics.Renderer.SafeRegion">
            <summary>
            Gets the safe region value from the engine settings.
            </summary>
        </member>
        <member name="M:Box.Graphics.Renderer.AlignHeight(System.Single,System.Single,Box.Enums.VAlign,System.Single)">
            <summary>
            Aligns the child position vertically relative to the parent position based on the specified alignment and optional offset.
            </summary>
            <param name="parent">The position of the parent.</param>
            <param name="child">The position of the child.</param>
            <param name="align">The vertical alignment type (Top, Center, Bottom).</param>
            <param name="offset">Optional offset applied after alignment (default is 0).</param>
            <returns>The aligned position of the child relative to the parent.</returns>
        </member>
        <member name="M:Box.Graphics.Renderer.AlignHeight(System.Single,System.Single,Box.Enums.VAlign)">
            <summary>
            Aligns the child position vertically relative to the parent position based on the specified alignment and optional offset.
            </summary>
            <param name="parent">The position of the parent.</param>
            <param name="child">The position of the child.</param>
            <param name="align">The vertical alignment type (Top, Center, Bottom).</param>
            <returns>The aligned position of the child relative to the parent.</returns>
        </member>
        <member name="M:Box.Graphics.Renderer.AlignWidth(System.Single,System.Single,Box.Enums.HAlign,System.Single)">
            <summary>
            Aligns the child position horizontally relative to the parent position based on the specified alignment and optional offset.
            </summary>
            <param name="parent">The position of the parent.</param>
            <param name="child">The position of the child.</param>
            <param name="align">The horizontal alignment type (Left, Center, Right).</param>
            <param name="offset">Optional offset applied after alignment (default is 0).</param>
            <returns>The aligned position of the child relative to the parent.</returns>
        </member>
        <member name="M:Box.Graphics.Renderer.AlignWidth(System.Single,System.Single,Box.Enums.HAlign)">
            <summary>
            Aligns the child position horizontally relative to the parent position based on the specified alignment and optional offset.
            </summary>
            <param name="parent">The position of the parent.</param>
            <param name="child">The position of the child.</param>
            <param name="align">The horizontal alignment type (Left, Center, Right).</param>
            <returns>The aligned position of the child relative to the parent.</returns>
        </member>
        <member name="M:Box.Graphics.Renderer.AlignToEntity(Box.Entities.Entity,Box.Entities.Entity,Box.Enums.HAlign,Box.Enums.VAlign,Box.Systems.Vect2)">
            <summary>
            Aligns the position of the child entity relative to the size and position of the parent entity, based on the specified vertical and horizontal alignments, with an optional vector offset.
            </summary>
            <param name="parent">The parent entity whose size and position are used for alignment.</param>
            <param name="child">The entity to be aligned.</param>
            <param name="vAlign">The vertical alignment type (Top, Center, Bottom).</param>
            <param name="hAlign">The horizontal alignment type (Left, Center, Right).</param>
            <param name="offset">Optional vector offset to apply after alignment (default is null).</param>
        </member>
        <member name="M:Box.Graphics.Renderer.AlignToEntity(Box.Entities.Entity,Box.Entities.Entity,Box.Enums.HAlign,Box.Enums.VAlign)">
            <summary>
            Aligns the position of the child entity relative to the size and position of the parent entity, based on the specified vertical and horizontal alignments, with an optional vector offset.
            </summary>
            <param name="parent">The parent entity whose size and position are used for alignment.</param>
            <param name="child">The entity to be aligned.</param>
            <param name="hAlign">The horizontal alignment type (Left, Center, Right).</param>
            <param name="vAlign">The vertical alignment type (Top, Center, Bottom).</param>
        </member>
        <member name="M:Box.Graphics.Renderer.AlignToRenderer(Box.Entities.Entity,Box.Enums.HAlign,Box.Enums.VAlign,Box.Systems.Vect2)">
            <summary>
            Aligns the position of the entity relative to the viewport (Renderer), based on 
            the specified vertical and horizontal alignments, with an optional vector offset.
            </summary>
            <param name="entity">The entity to align.</param>
            <param name="hAlign">The horizontal alignment type.</param>
            <param name="vAlign">The vertical alignment type.</param>
            <param name="offset">Additional offset to apply.</param>
            <returns>A vector representing the aligned position.</returns>
        </member>
        <member name="M:Box.Graphics.Renderer.AlignToRenderer(Box.Entities.Entity,Box.Enums.HAlign,Box.Enums.VAlign)">
            <summary>
            Aligns the position of the entity relative to the viewport (Renderer), based on the 
            specified vertical and horizontal alignments, with an optional vector offset.
            </summary>
            <param name="entity">The entity to align.</param>
            <param name="hAlign">The horizontal alignment type.</param>
            <param name="vAlign">The vertical alignment type.</param>
            <returns>A vector representing the aligned position.</returns>
        </member>
        <member name="M:Box.Graphics.Renderer.Draw(Box.Graphics.Surface,Box.Systems.Vect2,Box.Graphics.Color)">
            <summary>
            Draws the entire surface at the specified position with the given color.
            </summary>
            <param name="surface">The surface to draw.</param>
            <param name="position">The position to draw the surface.</param>
            <param name="color">The color tint to apply to the surface.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.Draw(Box.Graphics.Surface,Box.Systems.Rect2,Box.Graphics.Color)">
            <summary>
            Draws a region of the surface within the specified rectangle with the given color.
            </summary>
            <param name="surface">The surface to draw.</param>
            <param name="region">The region within the surface to draw.</param>
            <param name="color">The color tint to apply to the surface.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.Draw(Box.Graphics.Surface,Box.Systems.Vect2,Box.Enums.SurfaceEffects,Box.Graphics.Color)">
            <summary>
            Draws the entire surface at the specified position with the specified effects and color.
            </summary>
            <param name="surface">The surface to draw.</param>
            <param name="position">The position to draw the surface.</param>
            <param name="effects">The effects to apply when drawing the surface (e.g., rotation, scaling).</param>
            <param name="color">The color tint to apply to the surface.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.Draw(Box.Graphics.Surface,Box.Systems.Vect2,Box.Systems.Rect2,Box.Graphics.Color)">
            <summary>
            Draws a portion of the surface defined by srcRect at the specified position with the given color.
            </summary>
            <param name="surface">The surface to draw.</param>
            <param name="position">The position to draw the surface.</param>
            <param name="srcRect">The source rectangle defining the portion of the surface to draw.</param>
            <param name="color">The color tint to apply to the surface.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.Draw(Box.Graphics.Surface,Box.Systems.Vect2,Box.Systems.Rect2,Box.Enums.SurfaceEffects,Box.Graphics.Color)">
            <summary>
            Draws a portion of the surface defined by srcRect at the specified position with the specified effects and color.
            </summary>
            <param name="surface">The surface to draw.</param>
            <param name="position">The position to draw the surface.</param>
            <param name="srcRect">The source rectangle defining the portion of the surface to draw.</param>
            <param name="effects">The effects to apply when drawing the surface (e.g., rotation, scaling).</param>
            <param name="color">The color tint to apply to the surface.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.Draw(Box.Graphics.Surface,Box.Systems.Rect2,Box.Systems.Rect2,Box.Graphics.Color)">
            <summary>
            Draws a portion of the surface defined by srcRect onto the destination rectangle dstRect with the given color.
            </summary>
            <param name="surface">The surface to draw.</param>
            <param name="dstRect">The destination rectangle defining where to draw on the surface.</param>
            <param name="srcRect">The source rectangle defining the portion of the surface to draw.</param>
            <param name="color">The color tint to apply to the surface.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.Draw(Box.Graphics.Surface,Box.Systems.Rect2,Box.Systems.Rect2,Box.Enums.SurfaceEffects,Box.Graphics.Color)">
            <summary>
            Draws a portion of the surface defined by srcRect onto the destination rectangle dstRect with the specified effects and color.
            </summary>
            <param name="surface">The surface to draw.</param>
            <param name="dstRect">The destination rectangle defining where to draw on the surface.</param>
            <param name="srcRect">The source rectangle defining the portion of the surface to draw.</param>
            <param name="effects">The effects to apply when drawing the surface (e.g., rotation, scaling).</param>
            <param name="color">The color tint to apply to the surface.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.DrawPoint(Box.Systems.Vect2,Box.Graphics.Color)">
            <summary>
            Draws a point at the specified position with the given color.
            </summary>
            <param name="position">The position to draw the point.</param>
            <param name="color">The color of the point.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.DrawLine(Box.Systems.Vect2,Box.Systems.Vect2,Box.Graphics.Color)">
            <summary>
            Draws a line from the start point to the end point with the given color.
            </summary>
            <param name="start">The starting point of the line.</param>
            <param name="end">The ending point of the line.</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.DrawRectangleFill(Box.Systems.Rect2,Box.Graphics.Color)">
            <summary>
            Draws a rectangle defined by the provided rectangle with the given color.
            </summary>
            <param name="rectangle">The rectangle to draw.</param>
            <param name="color">The color of the rectangle.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.DrawRectangleFill(System.Single,System.Single,System.Single,System.Single,Box.Graphics.Color)">
            <summary>
            Draws a rectangle defined by the specified coordinates, width, and height with the given color.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="color">The color of the rectangle.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.DrawRectangle(Box.Systems.Rect2,Box.Graphics.Color)">
            <summary>
            Draws the outline of a rectangle defined by the provided rectangle with the given color.
            </summary>
            <param name="rectangle">The rectangle to draw the outline.</param>
            <param name="color">The color of the outline.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.DrawRectangle(System.Single,System.Single,System.Single,System.Single,Box.Graphics.Color)">
            <summary>
            Draws the outline of a rectangle defined by the specified coordinates, width, and height with the given color.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the rectangle outline.</param>
            <param name="y">The y-coordinate of the top-left corner of the rectangle outline.</param>
            <param name="width">The width of the rectangle outline.</param>
            <param name="height">The height of the rectangle outline.</param>
            <param name="color">The color of the rectangle outline.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.DrawCircle(System.Single,System.Single,System.Single,System.Int32,Box.Graphics.Color)">
            <summary>
            Draws a circle with the specified center coordinates, radius, number of segments, and color.
            </summary>
            <param name="x">The x-coordinate of the center of the circle.</param>
            <param name="y">The y-coordinate of the center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="segments">The number of segments used to approximate the circle.</param>
            <param name="color">The color of the circle.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.DrawCircle(Box.Systems.Vect2,System.Single,System.Int32,Box.Graphics.Color)">
            <summary>
            Draws a circle with the specified center position, radius, number of segments, and color.
            </summary>
            <param name="position">The position of the center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="segments">The number of segments used to approximate the circle.</param>
            <param name="color">The color of the circle.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.DrawCircleFill(System.Single,System.Single,System.Single,System.Int32,Box.Graphics.Color)">
            <summary>
            Draws a filled circle with the specified center coordinates, radius, number of segments, and color.
            </summary>
            <param name="x">The x-coordinate of the center of the circle.</param>
            <param name="y">The y-coordinate of the center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="segments">The number of segments used to approximate the circle.</param>
            <param name="color">The color of the circle.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.DrawCircleFill(Box.Systems.Vect2,System.Single,System.Int32,Box.Graphics.Color)">
            <summary>
            Draws a filled circle at the specified position with the given radius, number of segments, and color.
            </summary>
            <param name="position">The center position of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="segments">The number of segments used to approximate the circle.</param>
            <param name="color">The color of the circle.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.DrawText(Box.Graphics.Fonts.Font,System.String,Box.Systems.Vect2,Box.Graphics.Color)">
            <summary>
            Draws text using the specified font at the given position with the specified color.
            </summary>
            <param name="font">The font used to render the text.</param>
            <param name="text">The text string to draw.</param>
            <param name="position">The position where the text will be drawn.</param>
            <param name="color">The color of the text.</param>
        </member>
        <member name="M:Box.Graphics.Renderer.DrawText(Box.Graphics.Fonts.Font,System.String,System.Single,System.Single,Box.Graphics.Color)">
            <summary>
            Draws the specified text using the given font at the specified position and color.
            </summary>
            <param name="font">The font used to render the text.</param>
            <param name="text">The text to render.</param>
            <param name="x">The x-coordinate of the position where the text should be drawn.</param>
            <param name="y">The y-coordinate of the position where the text should be drawn.</param>
            <param name="color">The color of the text.</param>
        </member>
        <member name="T:Box.Graphics.Surface">
            <summary>
            Represents a texture asset used for rendering.
            </summary>
        </member>
        <member name="P:Box.Graphics.Surface.Size">
            <summary>
            Gets the size of the surface. Returns Vect2.Zero if the surface is null.
            </summary>
        </member>
        <member name="P:Box.Graphics.Surface.Bounds">
            <summary>
            Gets the bounds of the surface as a Rect2 starting from Vect2.Zero with the size of Size.
            </summary>
        </member>
        <member name="P:Box.Graphics.Surface.Width">
            <summary>
            Gets the width of the surface.
            </summary>
        </member>
        <member name="P:Box.Graphics.Surface.Height">
            <summary>
            Gets the height of the surface.
            </summary>
        </member>
        <member name="P:Box.Graphics.Surface.Filename">
            <summary>
            Gets the filename associated with the surface.
            </summary>
        </member>
        <member name="P:Box.Graphics.Surface.Smooth">
            <summary>
            Gets or sets whether smoothing is applied when rendering the surface.
            </summary>
        </member>
        <member name="P:Box.Graphics.Surface.Repeated">
            <summary>
            Gets or sets whether the surface is repeated when rendered beyond its dimensions.
            </summary>
        </member>
        <member name="P:Box.Graphics.Surface.IsEmpty">
            <summary>
            Gets a value indicating whether the surface is empty (null).
            </summary>
        </member>
        <member name="P:Box.Graphics.Surface.IsDisposed">
            <summary>
            Gets or sets a value indicating whether the surface has been disposed.
            </summary>
        </member>
        <member name="P:Box.Graphics.Surface.Initialized">
            <summary>
            Gets or sets a value indicating whether the surface has been initialized.
            </summary>
        </member>
        <member name="M:Box.Graphics.Surface.#ctor(Box.Graphics.Surface,Box.Systems.Rect2,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Surface struct using a region of another surface.
            </summary>
            <param name="surface">The source surface from which to create the new surface.</param>
            <param name="region">The specific region of the source surface to be used for the new surface.</param>
            <param name="repeat">A boolean indicating whether the region should be repeated to fill the new surface.</param>
            <param name="smooth">A boolean indicating whether the new surface should be smoothed (anti-aliased).</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="surface"/> or <paramref name="region"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="surface"/> is empty or <paramref name="region"/> is empty.</exception>
        </member>
        <member name="M:Box.Graphics.Surface.#ctor(System.Int32,System.Int32,Box.Graphics.Color)">
            <summary>
            Initializes a new instance of the Surface class with specified width, height, and color.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="color">The initial color of the surface.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="width"/> or <paramref name="height"/> is less than or equal to zero.</exception>
        </member>
        <member name="M:Box.Graphics.Surface.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Surface class with specified width, height.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="width"/> or <paramref name="height"/> is less than or equal to zero.</exception>
        </member>
        <member name="M:Box.Graphics.Surface.GetSource(Box.Systems.Vect2,System.Int32)">
            <summary>
            Gets the source rectangle on the surface based on cell size and index.
            </summary>
            <param name="cellSize">The size of each cell on the surface.</param>
            <param name="index">The index of the cell.</param>
            <returns>The source rectangle on the surface.</returns>
        </member>
        <member name="M:Box.Graphics.Surface.GetSource(Box.Graphics.Surface,Box.Systems.Vect2,System.Int32)">
            <summary>
            Gets the source rectangle on the surface based on cell size and index.
            </summary>
            <param name="surface">The surface from which to retrieve the source rectangle.</param>
            <param name="cellSize">The size of each cell on the surface.</param>
            <param name="index">The index of the cell.</param>
            <returns>The source rectangle on the surface.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="surface"/> is empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="cellSize"/> has non-positive dimensions.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="index"/> is negative</exception>
        </member>
        <member name="M:Box.Graphics.Surface.Dispose">
            <summary>
            Disposes the resources held by the Surface instance.
            </summary>
        </member>
        <member name="M:Box.Graphics.Surface.op_Equality(Box.Graphics.Surface,Box.Graphics.Surface)">
            <summary>
            Checks if two Surface objects are equal.
            </summary>
            <param name="left">The left-hand side Surface.</param>
            <param name="right">The right-hand side Surface.</param>
            <returns>True if the Surfaces are equal, false otherwise.</returns>
        </member>
        <member name="M:Box.Graphics.Surface.op_Inequality(Box.Graphics.Surface,Box.Graphics.Surface)">
            <summary>
            Checks if two Surface objects are not equal.
            </summary>
            <param name="left">The left-hand side Surface.</param>
            <param name="right">The right-hand side Surface.</param>
            <returns>True if the Surfaces are not equal, false otherwise.</returns>
        </member>
        <member name="M:Box.Graphics.Surface.Equals(Box.Graphics.Surface)">
            <summary>
            Checks if the current Surface is equal to another Surface.
            </summary>
            <param name="other">The other Surface to compare to.</param>
            <returns>True if the Surfaces are equal, false otherwise.</returns>
        </member>
        <member name="M:Box.Graphics.Surface.Equals(System.Object)">
            <summary>
            Checks if the current Surface is equal to an object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if obj is a Surface and is equal to the current Surface, false otherwise.</returns>
        </member>
        <member name="M:Box.Graphics.Surface.GetHashCode">
            <summary>
            Gets the hash code for the Surface.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Box.Graphics.Surface.Initialize">
            <summary>
            Initializes the Surface.
            </summary>
        </member>
        <member name="T:Box.Helpers.AlignmentHelpers">
            <summary>
            Provides utility methods for aligning elements based on width, height, and viewport.
            </summary>
        </member>
        <member name="M:Box.Helpers.AlignmentHelpers.AlignWidth(System.Single,System.Single,Box.Enums.HAlign,System.Single)">
            <summary>
            Aligns the child width relative to the parent width using the specified horizontal alignment and offset.
            </summary>
            <param name="parent">The width of the parent.</param>
            <param name="child">The width of the child.</param>
            <param name="hAlign">The horizontal alignment type.</param>
            <param name="offset">Additional horizontal offset to apply.</param>
            <returns>The calculated horizontal position for alignment.</returns>
        </member>
        <member name="M:Box.Helpers.AlignmentHelpers.AlignWidth(System.Single,System.Single,Box.Enums.HAlign)">
            <summary>
            Aligns the child width relative to the parent width using the specified horizontal alignment.
            </summary>
            <param name="parent">The width of the parent.</param>
            <param name="child">The width of the child.</param>
            <param name="hAlign">The horizontal alignment type.</param>
            <returns>The calculated horizontal position for alignment.</returns>
        </member>
        <member name="M:Box.Helpers.AlignmentHelpers.AlignHeight(System.Single,System.Single,Box.Enums.VAlign,System.Single)">
            <summary>
            Aligns the child height relative to the parent height using the specified vertical alignment and offset.
            </summary>
            <param name="parent">The height of the parent.</param>
            <param name="child">The height of the child.</param>
            <param name="vAlign">The vertical alignment type.</param>
            <param name="offset">Additional vertical offset to apply.</param>
            <returns>The calculated vertical position for alignment.</returns>
        </member>
        <member name="M:Box.Helpers.AlignmentHelpers.AlignHeight(System.Single,System.Single,Box.Enums.VAlign)">
            <summary>
            Aligns the child height relative to the parent height using the specified vertical alignment.
            </summary>
            <param name="parent">The height of the parent.</param>
            <param name="child">The height of the child.</param>
            <param name="vAlign">The vertical alignment type.</param>
            <returns>The calculated vertical position for alignment.</returns>
        </member>
        <member name="M:Box.Helpers.AlignmentHelpers.AlignToRenderer(Box.Entities.Entity,Box.Enums.HAlign,Box.Enums.VAlign,Box.Systems.Vect2)">
            <summary>
            Aligns the position of the entity relative to the viewport (Renderer), based on 
            the specified vertical and horizontal alignments, with an optional vector offset.
            </summary>
            <param name="entity">The entity to align.</param>
            <param name="hAlign">The horizontal alignment type.</param>
            <param name="vAlign">The vertical alignment type.</param>
            <param name="offset">Additional offset to apply.</param>
            <returns>A vector representing the aligned position.</returns>
        </member>
        <member name="M:Box.Helpers.AlignmentHelpers.AlignToRenderer(Box.Entities.Entity,Box.Enums.HAlign,Box.Enums.VAlign)">
            <summary>
            Aligns the position of the entity relative to the viewport (Renderer), based on the 
            specified vertical and horizontal alignments, with an optional vector offset.
            </summary>
            <param name="entity">The entity to align.</param>
            <param name="hAlign">The horizontal alignment type.</param>
            <param name="vAlign">The vertical alignment type.</param>
            <returns>A vector representing the aligned position.</returns>
        </member>
        <member name="M:Box.Helpers.AlignmentHelpers.AlignToEntity(Box.Entities.Entity,Box.Entities.Entity,Box.Enums.HAlign,Box.Enums.VAlign,Box.Systems.Vect2)">
            <summary>
            Aligns a child entity relative to a parent entity using the specified alignment and offset.
            </summary>
            <param name="parent">The parent entity.</param>
            <param name="child">The child entity.</param>
            <param name="hAlign">The horizontal alignment type.</param>
            <param name="vAlign">The vertical alignment type.</param>
            <param name="offset">Additional offset to apply.</param>
            <returns>A vector representing the aligned position.</returns>
        </member>
        <member name="M:Box.Helpers.AlignmentHelpers.AlignToEntity(Box.Entities.Entity,Box.Entities.Entity,Box.Enums.HAlign,Box.Enums.VAlign)">
            <summary>
            Aligns a child entity relative to a parent entity using the specified alignment.
            </summary>
            <param name="parent">The parent entity.</param>
            <param name="child">The child entity.</param>
            <param name="hAlign">The horizontal alignment type.</param>
            <param name="vAlign">The vertical alignment type.</param>
            <returns>A vector representing the aligned position.</returns>
        </member>
        <member name="T:Box.Helpers.CoroutineHelper">
            <summary>
            Helper class for managing coroutines and providing coroutine-related utilities.
            </summary>
        </member>
        <member name="M:Box.Helpers.CoroutineHelper.WaitSequentially(System.Collections.IEnumerator[])">
             <summary>
             Executes multiple coroutines one after another in sequence, waiting for each to complete before starting the next.
             </summary>
             <param name="routines">An array of coroutine routines to execute sequentially. Each routine must be a valid <see cref="T:System.Collections.IEnumerator"/>.</param>
             <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> that completes after all routines have run to completion, in order.</returns>
             <remarks>
             This method runs each coroutine in the order provided, waiting for one to finish before starting the next.
             It is ideal for chaining dependent animations, scripted events, or staged operations.
            
             If <paramref name="routines"/> is empty, the method exits immediately without yielding.
             </remarks>
             <example>
             Example usage:
             <code>
             yield return Coroutine.WaitSequentially(
                 FadeOut(panel),
                 Delay(0.5f),
                 SlideIn(menu)
             );
             // Execution continues only after all three routines complete, in order.
             </code>
             </example>
        </member>
        <member name="M:Box.Helpers.CoroutineHelper.WaitAll(System.Collections.IEnumerator[])">
             <summary>
             Executes multiple coroutines in parallel and waits until all of them have completed.
             </summary>
             <param name="routines">An array of coroutine routines to run in parallel. Each routine must be a valid <see cref="T:System.Collections.IEnumerator"/>.</param>
             <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> that completes when all provided routines have finished execution.</returns>
             <remarks>
             This method starts all coroutines simultaneously and yields control until every routine has completed. It is ideal for running
             multiple animations, transitions, or operations in parallel where continuation should only happen after all have finished.
            
             If <paramref name="routines"/> is null or empty, the method exits immediately without yielding.
             </remarks>
             <example>
             Example usage:
             <code>
             yield return Coroutine.WaitAll(
                 FadeOut(panel),
                 SlideIn(menu),
                 Delay(1.5f)
             );
             // Continue only after all three have completed
             </code>
             </example>
        </member>
        <member name="M:Box.Helpers.CoroutineHelper.Delay(System.Single)">
            <summary>
            Delays coroutine execution for the specified number of real-time seconds.
            </summary>
            <param name="seconds">The duration in seconds to wait before resuming execution. Must be a non-negative number.</param>
            <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> that waits for the specified time duration.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="seconds"/> is less than zero or not a valid number.</exception>
            <remarks>
            This method uses frame delta time and is ideal for time-based transitions or delays in gameplay, UI, or animations.
            </remarks>
        </member>
        <member name="M:Box.Helpers.CoroutineHelper.WaitFrames(System.Int32)">
            <summary>
            Delays coroutine execution for the specified number of rendered frames.
            </summary>
            <param name="frames">The number of frames to wait before resuming execution. Must be non-negative.</param>
            <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> that waits for the specified number of frames.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="frames"/> is less than zero.</exception>
            <remarks>
            This method is frame-accurate and does not depend on time-based delta values. It is ideal for precise control
            in animations, transitions, and frame-specific logic in rendering pipelines.
            </remarks>
        </member>
        <member name="M:Box.Helpers.CoroutineHelper.WaitWhile(System.Func{System.Boolean})">
            <summary>
            Waits until the specified condition becomes true.
            </summary>
            <param name="condition">A delegate representing the condition to evaluate each frame.</param>
            <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> that yields control until the condition evaluates to true.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="condition"/> is null.</exception>
            <remarks>
            This method is useful for waiting on deferred state changes, such as waiting for a screen or entity to be initialized.
            </remarks>
            <example>
            <code>
            yield return Coroutine.WaitFor(() => screen != null);
            // Continue only after screen is assigned
            </code>
            </example>
        </member>
        <member name="M:Box.Helpers.CoroutineHelper.WaitForObject``1(System.Func{System.Object},System.Single)">
            <summary>
            Waits for a reference object to become non-null, with an optional timeout.
            </summary>
            <typeparam name="T">The expected type of the object being waited on.</typeparam>
            <param name="obj">A delegate that returns the object to monitor.</param>
            <param name="duration">The maximum duration in seconds to wait before timing out. Defaults to 1 second.</param>
            <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> that yields control until the object is assigned or the timeout is reached.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="obj"/> is null.</exception>
            <remarks>
            This is useful when waiting for an asynchronously initialized object (such as a screen, entity, or resource)
            to be assigned or become available. If the object is still null after the timeout, the coroutine will continue regardless.
            </remarks>
            <example>
            <code>
            yield return Coroutine.WaitForObject&lt;MyScreen&gt;(() => currentScreen);
            if (currentScreen != null)
                currentScreen.Show();
            </code>
            </example>
        </member>
        <member name="M:Box.Helpers.CoroutineHelper.IdleFrame">
            <summary>
            Generates an enumerable collection of idle frame.
            </summary>
            <returns>An IEnumerable representing the idle frame.</returns>
        </member>
        <member name="M:Box.Helpers.CoroutineHelper.WaitForObject``1(System.Func{System.Object},System.Action{``0},System.Single)">
            <summary>
            Waits for a reference object to become non-null and optionally invokes an action when the object is available.
            </summary>
            <typeparam name="T">The expected type of the object being waited on.</typeparam>
            <param name="obj">A delegate that returns the object to monitor.</param>
            <param name="action">An optional callback to invoke when the object becomes available.</param>
            <param name="duration">The maximum duration in seconds to wait before timing out. Defaults to 1 second.</param>
            <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> that yields control until the object is assigned or the timeout is reached.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="obj"/> is null.</exception>
            <remarks>
            This is useful for asynchronously waiting on an object (such as a screen, entity, or resource) to be created or initialized.
            If the object remains null after the timeout, the action will not be invoked.
            </remarks>
            <example>
            <code>
            yield return Coroutine.WaitForObject&lt;Screen&gt;(
                () => screenManager.Current,
                screen => screen.Show(),
                2f
            );
            </code>
            </example>
        </member>
        <member name="M:Box.Helpers.CoroutineHelper.WaitForAnimation(Box.Entities.Graphics.AnimatedSprite,System.String,System.Boolean)">
            <summary>
            Plays a non-looping animation on the given sprite and waits until it finishes.
            </summary>
            <param name="sprite">The <see cref="T:Box.Entities.Graphics.AnimatedSprite"/> to animate.</param>
            <param name="name">The name of the animation to play.</param>
            <param name="resetAnimation">If true, resets the animation before playing. Defaults to true.</param>
            <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> that completes once the animation has finished playing.</returns>
            <remarks>
            This method safely handles null references, missing animations, and looping animations. It will not yield
            if the animation is looping or invalid.
            </remarks>
            <example>
            <code>
            yield return Coroutine.WaitForAnimation(playerSprite, "attack");
            DoNextThing();
            </code>
            </example>
        </member>
        <member name="M:Box.Helpers.CoroutineHelper.WaitForAnimation(Box.Entities.Graphics.AnimatedSprite,System.Enum,System.Boolean)">
            <summary>
            Plays a non-looping animation on the given sprite using an <see cref="T:System.Enum"/> name and waits until it finishes.
            </summary>
            <param name="sprite">The <see cref="T:Box.Entities.Graphics.AnimatedSprite"/> to animate.</param>
            <param name="name">The <see cref="T:System.Enum"/> representing the name of the animation to play.</param>
            <param name="resetAnimation">If true, resets the animation before playing. Defaults to true.</param>
            <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> that completes once the animation has finished playing.</returns>
            <remarks>
            This overload converts the enum value to a string using <c>ToEnumString()</c> and plays the corresponding animation.
            It is a type-safe alternative to passing raw strings and helps avoid typos or invalid references.
            </remarks>
            <example>
            <code>
            yield return Coroutine.WaitForAnimation(sprite, PlayerAnimation.Attack);
            </code>
            </example>
        </member>
        <member name="T:Box.Helpers.FileHelpers">
            <summary>
            FileUtils provides helper functions for locating content files, application data paths, and other utility file operations.
            </summary>
        </member>
        <member name="M:Box.Helpers.FileHelpers.GetApplicationContentPath">
            <summary>
            Retrieves the application content root folder path. For MacOS bundles, it accesses resources within the bundle.
            <para>Note: Uses the EngineSettings.ContentRoot to determine the content root folder path.</para>
            </summary>
            <returns>The string path of the content root folder.</returns>
        </member>
        <member name="M:Box.Helpers.FileHelpers.GetApplicationDataPath">
            <summary>
            Retrieves the application data folder path based on the current operating system.
            <para>Example paths:</para>
            <para>Windows: C:/Users/[UserName]/AppData/Roaming</para>
            <para>MacOS: Library/Application Support</para>
            <para>Linux or BSD: Typically ~/.config</para>
            </summary>
            <returns>The path to the operating system's application data folder.</returns>
        </member>
        <member name="M:Box.Helpers.FileHelpers.EnsureDirectoryExists(System.String)">
            <summary>
            Ensures that the directory exists; creates it if it does not already exist.
            </summary>
            <param name="path">The path to the directory.</param>
        </member>
        <member name="M:Box.Helpers.FileHelpers.GetFileSize(System.String)">
            <summary>
            Retrieves the size of a file.
            </summary>
            <param name="filename">The filename to retrieve the size of.</param>
            <returns>Returns 0 if the file does not exist; otherwise, returns the size of the file in bytes.</returns>
        </member>
        <member name="M:Box.Helpers.FileHelpers.SaveFilePath(System.String)">
            <summary>
            Retrieves the path to the save folder.
            <para>Note: This method utilizes EngineSettings.AppSaveRoot and EngineSettings.UseApplicationData. If UseApplicationData is enabled,</para>
            <para>it retrieves the path based on the application data folder. Otherwise, it uses the current application directory.</para>
            </summary>
            <param name="filename">filename to append to the save folder path.</param>
            <returns>The string path of the save folder location.</returns>
        </member>
        <member name="M:Box.Helpers.FileHelpers.SaveFileExists(System.String)">
            <summary>
            Checks if a file exists in the save folder path.
            <para>Note: This method utilizes EngineSettings.AppSaveRoot and EngineSettings.UseApplicationData. If UseApplicationData is enabled,</para>
            <para>it retrieves the path based on the application data folder. Otherwise, it uses the current application directory.</para>
            </summary>
            <param name="filename">Optional filename to append to the save folder path.</param>
            <returns>True if the file exists in the save folder location; otherwise, false.</returns>
        </member>
        <member name="M:Box.Helpers.FileHelpers.AssetFileExists(System.String)">
            <summary>
            Checks if an asset content file exists.
            <para>Only used for content files.</para>
            <para>Note: This method checks the folder where the file is located.</para>
            </summary>
            <param name="filename">The filename to check for existence.</param>
            <returns>True if the content asset file exists; otherwise, false.</returns>
        </member>
        <member name="M:Box.Helpers.FileHelpers.IsFileLocked(System.String)">
            <summary>
            Checks if the specified file is currently being read from or written to.
            <para>Note: Returns false if the file does not exist.</para>
            </summary>
            <param name="filename">The path to the file.</param>
            <returns>True if the file exists and is being read from or written to; otherwise, false.</returns>
        </member>
        <member name="M:Box.Helpers.FileHelpers.WaitUntilFileUnlocked(System.String,System.Single)">
            <summary>
            Waits until the specified file is no longer locked by another process.
            </summary>
            <param name="filename">The full path to the file to monitor.</param>
            <param name="timeout">Optional timeout duration in seconds. If set to 0 or less, waits indefinitely.</param>
            <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> that yields until the file becomes unlocked or the timeout is reached.</returns>
            <remarks>
            This method repeatedly checks if the file is locked using <see cref="M:Box.Helpers.FileHelpers.IsFileLocked(System.String)"/> and yields each frame until the file becomes accessible.
            If the timeout is exceeded, the coroutine exits silently.
            </remarks>
            <example>
            <code>
            yield return FileHelper.WaitUntilFileUnlocked("export.tmp", 5f);
            LoadExportedData();
            </code>
            </example>
        </member>
        <member name="T:Box.Inputs.DefaultInputMap">
            <summary>
            Represents a default implementation of an input map.
            </summary>
        </member>
        <member name="M:Box.Inputs.DefaultInputMap.Initialize">
            <summary>
            Initializes the default input map.
            </summary>
        </member>
        <member name="T:Box.Inputs.InputMap">
            <summary>
            Represents a mapping of input controls for the game.
            </summary>
        </member>
        <member name="P:Box.Inputs.InputMap.Count">
            <summary>
            Gets the number of items in the input map.
            </summary>
        </member>
        <member name="P:Box.Inputs.InputMap.ActiveState">
            <summary>
            Gets the current active input state (keyboard or gamepad).
            </summary>
        </member>
        <member name="P:Box.Inputs.InputMap.GlobalMousePosition">
            <summary>
            Gets the global mouse position relative to the monitor.
            </summary>
        </member>
        <member name="P:Box.Inputs.InputMap.MousePosition">
            <summary>
            Gets the mouse position relative to the game window.
            </summary>
        </member>
        <member name="P:Box.Inputs.InputMap.AnyGamepadConnected">
            <summary>
            Indicates if any gamepad is currently connected.
            </summary>
        </member>
        <member name="M:Box.Inputs.InputMap.#ctor">
            <summary>
            Initializes a new instance of the InputMap class.
            </summary>>
        </member>
        <member name="M:Box.Inputs.InputMap.Initialize">
            <summary>
            Initializes the input map with default or user-defined settings.
            </summary>
        </member>
        <member name="M:Box.Inputs.InputMap.Finalize">
            <summary>
            Finalizes the InputMap instance.
            </summary>
        </member>
        <member name="M:Box.Inputs.InputMap.Add(System.String,System.Enum[])">
            <summary>
            Adds a new input mapping with a specified name and keys.
            </summary>
            <param name="name">The name of the input mapping.</param>
            <param name="keys">The keys associated with the input mapping.</param>
        </member>
        <member name="M:Box.Inputs.InputMap.Add(System.Enum,System.Enum[])">
            <summary>
            Adds a new input mapping with a specified name and keys.
            </summary>
            <param name="name">The name of the input mapping.</param>
            <param name="keys">The keys associated with the input mapping.</param>
        </member>
        <member name="M:Box.Inputs.InputMap.Exists(System.String)">
            <summary>
            Checks if an input mapping with the specified name exists.
            </summary>
            <param name="name">The name of the input mapping.</param>
            <returns>True if the input mapping exists, otherwise false.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.Exists(System.Enum)">
            <summary>
            Checks if an input mapping with the specified name exists.
            </summary>
            <param name="name">The name of the input mapping.</param>
            <returns>True if the input mapping exists, otherwise false.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.Remove(System.String)">
            <summary>
            Removes an input mapping with the specified name.
            </summary>
            <param name="name">The name of the input mapping to remove.</param>
            <returns>True if the input mapping was successfully removed, otherwise false.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.Remove(System.Enum)">
            <summary>
            Removes an input mapping with the specified name.
            </summary>
            <param name="name">The name of the input mapping to remove.</param>
            <returns>True if the input mapping was successfully removed, otherwise false.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.Remove(System.String,System.Enum)">
            <summary>
            Removes a specific key from an input mapping with the specified name.
            </summary>
            <param name="name">The name of the input mapping.</param>
            <param name="key">The key to remove from the input mapping.</param>
            <returns>True if the key was successfully removed, otherwise false.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.Remove(System.Enum,System.Enum)">
            <summary>
            Removes a specific key from an input mapping with the specified name.
            </summary>
            <param name="name">The name of the input mapping.</param>
            <param name="key">The key to remove from the input mapping.</param>
            <returns>True if the key was successfully removed, otherwise false.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.Clear">
            <summary>
            Clears all items from the input map.
            </summary>
        </member>
        <member name="M:Box.Inputs.InputMap.IsActionReleased(System.String)">
            <summary>
            Checks if the specified action name is in a "up" state, indicating the gamepad, keyboard, or mouse button is pressed.
            </summary>
            <param name="name">The name of the action to check.</param>
            <returns>True if the action is in a "down" state, false otherwise.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.IsActionReleased(System.Enum)">
            <summary>
            Checks if the specified action name is in a "up" state, indicating the gamepad, keyboard, or mouse button is pressed.
            </summary>
            <param name="name">The name of the action to check.</param>
            <returns>True if the action is in a "down" state, false otherwise.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.GetActionAxisReleased(System.String,System.String)">
            <summary>
            Gets an axis value (-1, 0, or 1) when an action is released.
            </summary>
            <param name="left">The action name for the negative direction (e.g., "left").</param>
            <param name="right">The action name for the positive direction (e.g., "right").</param>
            <returns>
            Returns -1 if the "left" action was released, 1 if the "right" action was released, 
            and 0 if neither or both were released.
            </returns>
        </member>
        <member name="M:Box.Inputs.InputMap.GetActionAxisReleased(System.Enum,System.Enum)">
            <summary>
            Gets an axis value (-1, 0, or 1) when an action is released.
            </summary>
            <param name="left">The action name for the negative direction (e.g., "left").</param>
            <param name="right">The action name for the positive direction (e.g., "right").</param>
            <returns>
            Returns -1 if the "left" action was released, 1 if the "right" action was released, 
            and 0 if neither or both were released.
            </returns>
        </member>
        <member name="M:Box.Inputs.InputMap.IsActionPressed(System.String)">
            <summary>
            Checks if the specified action name is in a "down" state, indicating the gamepad, keyboard, or mouse button is pressed.
            </summary>
            <param name="name">The name of the action to check.</param>
            <returns>True if the action is in a "down" state, false otherwise.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.IsActionPressed(System.Enum)">
            <summary>
            Checks if the specified action name is in a "down" state, indicating the gamepad, keyboard, or mouse button is pressed.
            </summary>
            <param name="name">The name of the action to check.</param>
            <returns>True if the action is in a "down" state, false otherwise.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.GetActionAxisPressed(System.String,System.String)">
            <summary>
            Gets an axis value (-1, 0, or 1) based on the state of two action inputs.
            </summary>
            <param name="left">The action name for the negative direction (e.g., "left").</param>
            <param name="right">The action name for the positive direction (e.g., "right").</param>
            <returns>
            Returns -1 if the "left" action is pressed, 1 if the "right" action is pressed, 
            and 0 if neither or both are pressed.
            </returns>
        </member>
        <member name="M:Box.Inputs.InputMap.GetActionAxisPressed(System.Enum,System.Enum)">
            <summary>
            Gets an axis value (-1, 0, or 1) based on the state of two action inputs.
            </summary>
            <param name="left">The action name for the negative direction (e.g., "left").</param>
            <param name="right">The action name for the positive direction (e.g., "right").</param>
            <returns>
            Returns -1 if the "left" action is pressed, 1 if the "right" action is pressed, 
            and 0 if neither or both are pressed.
            </returns>
        </member>
        <member name="M:Box.Inputs.InputMap.IsActionJustPressed(System.String)">
            <summary>
            Checks if the specified action name is in a "single key pressed" state, indicating the gamepad, keyboard, or mouse button is pressed.
            </summary>
            <param name="name">The name of the action to check.</param>
            <returns>True if the action is in a "down" state, false otherwise.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.IsActionJustPressed(System.Enum)">
            <summary>
            Checks if the specified action name is in a "single key pressed" state, indicating the gamepad, keyboard, or mouse button is pressed.
            </summary>
            <param name="name">The name of the action to check.</param>
            <returns>True if the action is in a "down" state, false otherwise.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.GetActionAxisJustPressed(System.String,System.String)">
            <summary>
            Gets an axis value (-1, 0, or 1) when an action is pressed for the first time.
            </summary>
            <param name="left">The action name for the negative direction (e.g., "left").</param>
            <param name="right">The action name for the positive direction (e.g., "right").</param>
            <returns>
            Returns -1 if the "left" action was just pressed, 1 if the "right" action was just pressed, 
            and 0 if neither or both were pressed simultaneously.
            </returns>
        </member>
        <member name="M:Box.Inputs.InputMap.GetActionAxisJustPressed(System.Enum,System.Enum)">
            <summary>
            Gets an axis value (-1, 0, or 1) when an action is pressed for the first time.
            </summary>
            <param name="left">The action name for the negative direction (e.g., "left").</param>
            <param name="right">The action name for the positive direction (e.g., "right").</param>
            <returns>
            Returns -1 if the "left" action was just pressed, 1 if the "right" action was just pressed, 
            and 0 if neither or both were pressed simultaneously.
            </returns>
        </member>
        <member name="M:Box.Inputs.InputMap.IsKeyPressed(Box.Enums.KeyboardButton)">
            <summary>
            Checks if the specified keyboard button is currently pressed down.
            </summary>
            <param name="button">The keyboard button to check.</param>
            <returns>True if the keyboard button is down, false otherwise.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.GetKeyAxisPressed(Box.Enums.KeyboardButton,Box.Enums.KeyboardButton)">
            <summary>
            Gets an axis value (-1, 0, or 1) while a keyboard key is being held down.
            </summary>
            <param name="left">The keyboard button for the negative direction (e.g., move left).</param>
            <param name="right">The keyboard button for the positive direction (e.g., move right).</param>
            <returns>
            Returns -1 if the "left" key is currently being held down, 1 if the "right" key is being held down, 
            and 0 if neither or both keys are held at the same time.
            </returns>
        </member>
        <member name="M:Box.Inputs.InputMap.IsKeyReleased(Box.Enums.KeyboardButton)">
            <summary>
            Checks if the specified keyboard button is currently released (not pressed down).
            </summary>
            <param name="button">The keyboard button to check.</param>
            <returns>True if the keyboard button is up, false otherwise.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.GetKeyAxisReleased(Box.Enums.KeyboardButton,Box.Enums.KeyboardButton)">
            <summary>
            Gets an axis value (-1, 0, or 1) when a keyboard key is released.
            </summary>
            <param name="left">The keyboard button for the negative direction (e.g., move left).</param>
            <param name="right">The keyboard button for the positive direction (e.g., move right).</param>
            <returns>
            Returns -1 if the "left" key was just released, 1 if the "right" key was just released, 
            and 0 if neither or both keys were released simultaneously.
            </returns>
        </member>
        <member name="M:Box.Inputs.InputMap.IsKeyJustPressed(Box.Enums.KeyboardButton)">
            <summary>
            Checks if the specified keyboard button was pressed in the current frame.
            </summary>
            <param name="button">The keyboard button to check.</param>
            <returns>True if the keyboard button was pressed in the current frame, false otherwise.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.GetKeyAxisJustPressed(Box.Enums.KeyboardButton,Box.Enums.KeyboardButton)">
            <summary>
            Gets an axis value (-1, 0, or 1) when a keyboard key is just pressed.
            </summary>
            <param name="left">The keyboard button for the negative direction (e.g., move left).</param>
            <param name="right">The keyboard button for the positive direction (e.g., move right).</param>
            <returns>
            Returns -1 if the "left" key was just pressed, 1 if the "right" key was just pressed, 
            and 0 if neither or both keys were pressed simultaneously.
            </returns>
        </member>
        <member name="M:Box.Inputs.InputMap.IsMousePressed(Box.Enums.MouseButton)">
            <summary>
            Checks if the specified mouse button is currently pressed down.
            </summary>
            <param name="button">The mouse button to check.</param>
            <returns>True if the mouse button is down, false otherwise.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.IsMouseReleased(Box.Enums.MouseButton)">
            <summary>
            Checks if the specified mouse button is currently released (not pressed down).
            </summary>
            <param name="button">The mouse button to check.</param>
            <returns>True if the mouse button is up, false otherwise.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.IsMouseJustPressed(Box.Enums.MouseButton)">
            <summary>
            Checks if the specified mouse button was pressed in the current frame.
            </summary>
            <param name="button">The mouse button to check.</param>
            <returns>True if the mouse button was pressed in the current frame, false otherwise.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.IsGamepadReleased(Box.Enums.GamepadButton)">
            <summary>
            Checks if the specified gamepad button is currently released (not pressed down).
            </summary>
            <param name="button">The gamepad button to check.</param>
            <returns>True if the gamepad button is up, false otherwise.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.GetGamepadAxisReleased(Box.Enums.GamepadButton,Box.Enums.GamepadButton)">
            <summary>
            Gets an axis value (-1, 0, or 1) when a gamepad button is released.
            </summary>
            <param name="left">The gamepad button for the negative direction (e.g., move left).</param>
            <param name="right">The gamepad button for the positive direction (e.g., move right).</param>
            <returns>
            Returns -1 if the "left" button was just released, 1 if the "right" button was just released, 
            and 0 if neither or both buttons were released simultaneously.
            </returns>
        </member>
        <member name="M:Box.Inputs.InputMap.IsGamepadJustPressed(Box.Enums.GamepadButton)">
            <summary>
            Checks if the specified gamepad button was pressed in the current frame.
            </summary>
            <param name="button">The gamepad button to check.</param>
            <returns>True if the gamepad button was pressed in the current frame, false otherwise.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.GetGamepadAxisJustPressed(Box.Enums.GamepadButton,Box.Enums.GamepadButton)">
            <summary>
            Gets an axis value (-1, 0, or 1) when a gamepad button is just pressed.
            </summary>
            <param name="left">The gamepad button for the negative direction (e.g., move left).</param>
            <param name="right">The gamepad button for the positive direction (e.g., move right).</param>
            <returns>
            Returns -1 if the "left" button was just pressed, 1 if the "right" button was just pressed, 
            and 0 if neither or both buttons were pressed simultaneously.
            </returns>
        </member>
        <member name="M:Box.Inputs.InputMap.IsGamepadPressed(Box.Enums.GamepadButton)">
            <summary>
            Checks if the specified gamepad button is currently pressed down.
            </summary>
            <param name="button">The gamepad button to check.</param>
            <returns>True if the gamepad button is down, false otherwise.</returns>
        </member>
        <member name="M:Box.Inputs.InputMap.GetGamepadAxisPressed(Box.Enums.GamepadButton,Box.Enums.GamepadButton)">
            <summary>
            Gets an axis value (-1, 0, or 1) while a gamepad button is being held down.
            </summary>
            <param name="left">The gamepad button for the negative direction (e.g., move left).</param>
            <param name="right">The gamepad button for the positive direction (e.g., move right).</param>
            <returns>
            Returns -1 if the "left" button is currently being held down, 1 if the "right" button is being held down, 
            and 0 if neither or both buttons are held at the same time.
            </returns>
        </member>
        <member name="M:Box.Inputs.InputMap.GetGamepadForce(Box.Enums.GamepadButton)">
            <summary>
            Gets the thumbstick or trigger force press from 0.0 to 1.0. The more you press into the trigger, the higher the force increases.
            </summary>
            <param name="button">The gamepad button to check the force for.</param>
            <returns>The force of the gamepad button press, ranging from 0.0 (not pressed) to 1.0 (fully pressed).</returns>
        </member>
        <member name="T:Box.Interfaces.IAsset">
            <summary>
            Represents an asset that can be managed, disposed, and initialized.
            </summary>
        </member>
        <member name="P:Box.Interfaces.IAsset.Filename">
            <summary>
            Gets the filename of the asset.
            </summary>
        </member>
        <member name="P:Box.Interfaces.IAsset.IsDisposed">
            <summary>
            Gets a value indicating whether the asset has been disposed.
            </summary>
        </member>
        <member name="P:Box.Interfaces.IAsset.Initialized">
            <summary>
            Gets a value indicating whether the asset has been initialized.
            </summary>
        </member>
        <member name="M:Box.Interfaces.IAsset.Dispose">
            <summary>
            Disposes of the asset and releases any resources.
            </summary>
        </member>
        <member name="M:Box.Interfaces.IAsset.Initialize">
            <summary>
            Initializes the asset and prepares it for use.
            </summary>
        </member>
        <member name="T:Box.Interfaces.IMapLayer">
            <summary>
            Represents a layer in a tilemap.
            </summary>
        </member>
        <member name="T:Box.Interfaces.IMapSetting">
            <summary>
            Represents a setting related to a tilemap or tile entity.
            </summary>
        </member>
        <member name="P:Box.Interfaces.IMapSetting.Value">
            <summary>
            Gets the value of the setting.
            </summary>
        </member>
        <member name="T:Box.Interfaces.IService">
            <summary>
            Represents a basic service interface.
            </summary>
        </member>
        <member name="T:Box.Interfaces.IInitializeService">
            <summary>
            Represents a service that requires initialization.
            </summary>
            <remarks>
            This interface is for services that need to be initialized before use.
            It provides an <see cref="M:Box.Interfaces.IInitializeService.Initialize"/> method to set up the service.
            </remarks>
        </member>
        <member name="M:Box.Interfaces.IInitializeService.Initialize">
            <summary>
            Initializes the service.
            </summary>
            <remarks>
            This method is typically called once during the setup phase to prepare the service for use.
            </remarks>
        </member>
        <member name="T:Box.Interfaces.IUpdateService">
            <summary>
            Represents a service that requires both initialization and updating.
            </summary>
            <remarks>
            This interface is for services that need to be initialized and then updated each frame.
            It extends <see cref="T:Box.Interfaces.IInitializeService"/> and provides an <see cref="M:Box.Interfaces.IUpdateService.Update"/> method for frame-based updates.
            </remarks>
        </member>
        <member name="M:Box.Interfaces.IUpdateService.Update">
            <summary>
            Updates the service.
            </summary>
            <remarks>
            This method is called every frame to update the service’s state or perform periodic actions.
            </remarks>
        </member>
        <member name="T:Box.Loaders.Maps.Data.Map">
            <summary>
            Represents a map asset that implements the IAsset interface.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.Map.Version">
            <summary>
            Gets the version of the map.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.Map.Tilesets">
            <summary>
            Gets the collection of tilesets associated with the map.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.Map.Levels">
            <summary>
            Gets the list of levels defined within the map.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.Map.GlobalLevels">
            <summary>
            Gets or sets the global levels associated with the map.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.Map.GlobalLayers">
            <summary>
            Gets or sets the global layers associated with the map.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.Map.GlobalEntities">
            <summary>
            Gets or sets the global entity layers associated with the map.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.Map.Filename">
            <summary>
            Gets the filename of the map.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.Map.IsEmpty">
            <summary>
            Indicates whether the map is considered empty based on its filename and levels count.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.Map.IsDisposed">
            <summary>
            Gets or sets a value indicating whether the map is disposed.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.Map.Initialized">
            <summary>
            Gets or sets a value indicating whether the map is initialized.
            </summary>
        </member>
        <member name="M:Box.Loaders.Maps.Data.Map.GetTileset(Box.Loaders.Maps.Data.Map,System.Int32)">
            <summary>
            Retrieves the tileset from the specified map by its index.
            </summary>
            <param name="map">The map containing the tilesets.</param>
            <param name="index">The index of the tileset to retrieve.</param>
            <returns>The tileset at the specified index.</returns>
            <exception cref="T:System.Exception">Thrown when the specified tileset index doesn't exist.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Data.Map.TryGetTileset(Box.Loaders.Maps.Data.Map,System.Int32,Box.Loaders.Maps.Data.MapTileset@)">
            <summary>
            Tries to retrieve the tileset from the specified map by its index.
            </summary>
            <param name="map">The map containing the tilesets.</param>
            <param name="index">The index of the tileset to retrieve.</param>
            <param name="tileset">When this method returns, contains the tileset at the specified index, if found; otherwise, default.</param>
            <returns><c>true</c> if the tileset was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Data.Map.GetLevel(Box.Loaders.Maps.Data.Map,System.String,System.Boolean)">
            <summary>
            Retrieves the level from the specified map by its name.
            </summary>
            <param name="map">The map containing the levels.</param>
            <param name="name">The name of the level to retrieve.</param>
            <param name="ignoreCase">Optional. Determines whether to ignore case when matching the level name. Default is <c>true</c>.</param>
            <returns>The level with the specified name, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Data.Map.TryGetLevel(Box.Loaders.Maps.Data.Map,System.String,System.Boolean,Box.Loaders.Maps.Data.MapLevel@)">
            <summary>
            Tries to retrieve the level from the specified map by its name.
            </summary>
            <param name="map">The map containing the levels.</param>
            <param name="name">The name of the level to retrieve.</param>
            <param name="ignoreCase">Determines whether to ignore case when matching the level name.</param>
            <param name="level">When this method returns, contains the level with the specified name, if found; otherwise, default.</param>
            <returns><c>true</c> if the level was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Data.Map.TryGetLevel(Box.Loaders.Maps.Data.Map,System.String,Box.Loaders.Maps.Data.MapLevel@)">
            <summary>
            Tries to retrieve the level from the specified map by its name.
            </summary>
            <param name="map">The map containing the levels.</param>
            <param name="name">The name of the level to retrieve.</param>
            <param name="level">When this method returns, contains the level with the specified name, if found; otherwise, default.</param>
            <returns><c>true</c> if the level was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Data.Map.CreateInstance``1(System.String,System.Object[],System.Boolean)">
            <summary>
            Creates an instance of the specified type <typeparamref name="T"/> based on the provided parameters.
            </summary>
            <typeparam name="T">The type of entity to create.</typeparam>
            <param name="name">The name or identifier of the entity.</param>
            <param name="args">Optional arguments to pass to the entity's constructor.</param>
            <param name="ignoreCase">Optional. Determines whether to ignore case when matching the entity's type name. Default is <c>true</c>.</param>
            <returns>An instance of type <typeparamref name="T"/> if creation is successful; otherwise, the default value of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Data.Map.TryCreateInstance``1(System.String,System.Object[],System.Boolean,``0@)">
            <summary>
            Tries to create an instance of the specified type <typeparamref name="T"/> based on the provided parameters.
            </summary>
            <typeparam name="T">The type of entity to create.</typeparam>
            <param name="name">The name or identifier of the entity.</param>
            <param name="args">Optional arguments to pass to the entity's constructor.</param>
            <param name="ignoreCase">Determines whether to ignore case when matching the entity's type name.</param>
            <param name="value">When this method returns, contains the created instance of type <typeparamref name="T"/>, if creation is successful; otherwise, default.</param>
            <returns><c>true</c> if the instance was successfully created; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Data.Map.TryCreateInstance``1(System.String,System.Object[],``0@)">
            <summary>
            Tries to create an instance of the specified type <typeparamref name="T"/> based on the provided parameters.
            </summary>
            <typeparam name="T">The type of entity to create.</typeparam>
            <param name="name">The name or identifier of the entity.</param>
            <param name="args">Optional arguments to pass to the entity's constructor.</param>
            <param name="value">When this method returns, contains the created instance of type <typeparamref name="T"/>, if creation is successful; otherwise, default.</param>
            <returns><c>true</c> if the instance was successfully created; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Data.Map.MapToWorld(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Converts a map location to world coordinates based on the specified size.
            </summary>
            <param name="location">The location in map coordinates to convert.</param>
            <param name="size">The size of the map or tile in world units.</param>
            <returns>The world coordinates corresponding to the given map location.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Data.Map.MapToWorld(Box.Systems.Vect2,System.Int32)">
            <summary>
            Converts a map location to world coordinates based on the specified tile size.
            </summary>
            <param name="location">The location in map coordinates to convert.</param>
            <param name="size">Optional. The size of each tile in world units. Default is 16.</param>
            <returns>The world coordinates corresponding to the given map location.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Data.Map.WorldToMap(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Converts world coordinates to map coordinates based on the specified tile size.
            </summary>
            <param name="position">The world coordinates to convert.</param>
            <param name="size">The size of each tile or map unit in world units.</param>
            <returns>The map coordinates corresponding to the given world position.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Data.Map.WorldToMap(Box.Systems.Vect2,System.Int32)">
            <summary>
            Converts world coordinates to map coordinates based on the specified tile size.
            </summary>
            <param name="location">The world coordinates to convert.</param>
            <param name="size">Optional. The size of each tile or map unit in world units. Default is 16.</param>
            <returns>The map coordinates corresponding to the given world location.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Data.Map.GetTilesFromRegion(Box.Systems.Vect2,Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Retrieves the tiles within a specified region based on the given parameters.
            </summary>
            <param name="position">The position of the region in world coordinates.</param>
            <param name="size">The size of the region in world units.</param>
            <param name="tileSize">The size of each tile in world units.</param>
            <returns>An enumerable collection of tile positions within the specified region.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Data.Map.GetTilesFromRegion(Box.Systems.Vect2,Box.Systems.Vect2,System.Int32)">
            <summary>
            Retrieves the tiles within a specified region based on the given parameters.
            </summary>
            <param name="position">The position of the region in world coordinates.</param>
            <param name="size">The size of the region in world units.</param>
            <param name="tileSize">Optional. The size of each tile in world units. Default is 16.</param>
            <returns>An enumerable collection of tile positions within the specified region.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Data.Map.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting resources.
            </summary>
        </member>
        <member name="M:Box.Loaders.Maps.Data.Map.Initialize">
            <summary>
            Initializes the object or class instance.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Data.MapEntityRef">
            <summary>
            Represents a reference to an entity within a map.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapEntityRef.EntityId">
            <summary>
            Gets the unique identifier of the entity.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapEntityRef.LayerId">
            <summary>
            Gets the unique identifier of the layer containing the entity.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapEntityRef.LevelId">
            <summary>
            Gets the unique identifier of the level containing the entity.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapEntityRef.WorldId">
            <summary>
            Gets the unique identifier of the world or map containing the entity.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapEntityRef.IsEmpty">
            <summary>
            Indicates whether the reference is empty.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Data.MapLayer">
            <summary>
            Represents a layer within a map, containing elements and settings.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLayer.Id">
            <summary>
            Gets the identifier of the map layer.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLayer.Grid">
            <summary>
            Gets the grid dimensions of the map layer.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLayer.GridSize">
            <summary>
            Gets the grid size of the map layer.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLayer.Name">
            <summary>
            Gets the name of the map layer.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLayer.TilesetFile">
            <summary>
            Gets the file associated with the tileset of the map layer.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLayer.OFfset">
            <summary>
            Gets the offset of the map layer.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLayer.Tileset">
            <summary>
            Gets the tileset identifier of the map layer.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLayer.Type">
            <summary>
            Gets the type of the map layer.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLayer.Instances">
            <summary>
            Gets the instances contained within the map layer.
            </summary>
        </member>
        <member name="M:Box.Loaders.Maps.Data.MapLayer.InstanceAs``1">
            <summary>
            Converts instances within the map layer to a specified type.
            </summary>
            <typeparam name="T">The type to convert instances to.</typeparam>
            <returns>An enumerable of instances cast to the specified type.</returns>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLayer.IsEmpty">
            <summary>
            Indicates whether the reference is empty.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Data.MapLevel">
            <summary>
            Represents a level or layer within a map structure.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLevel.Color">
            <summary>
            Gets the color associated with the map level.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLevel.Id">
            <summary>
            Gets the unique identifier of the map level.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLevel.Name">
            <summary>
            Gets the name of the map level.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLevel.Size">
            <summary>
            Gets the size dimensions of the map level.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLevel.GridSize">
            <summary>
            Gets the grid size dimensions of the map level.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLevel.Depth">
            <summary>
            Gets the depth or z-index of the map level.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLevel.Coords">
            <summary>
            Gets the coordinates of the map level.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLevel.Settings">
            <summary>
            Gets the settings associated with the map level.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLevel.Layers">
            <summary>
            Gets the layers comprising the map level.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLevel.Neighbours">
            <summary>
            Gets the neighboring connections of the map level.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapLevel.IsEmpty">
            <summary>
            Indicates whether the map level is considered empty based on its properties.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Data.MapNeighbour">
            <summary>
            Represents the neighboring connections of a map element.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapNeighbour.North">
            <summary>
            Gets the identifier or name of the northern neighbor.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapNeighbour.East">
            <summary>
            Gets the identifier or name of the eastern neighbor.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapNeighbour.South">
            <summary>
            Gets the identifier or name of the southern neighbor.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapNeighbour.West">
            <summary>
            Gets the identifier or name of the western neighbor.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapNeighbour.IsEmpty">
            <summary>
            Indicates whether the reference is empty.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Data.MapTile">
            <summary>
            Represents a tile within a map, sourced from a tileset.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapTile.TilesetId">
            <summary>
            Gets the ID of the tile within its tileset.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapTile.TilesetFile">
            <summary>
            Gets or sets the file associated with the tileset (internal use).
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapTile.Source">
            <summary>
            Gets the rectangular area within the tileset that defines this tile's image.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapTile.IsEmpty">
            <summary>
            Indicates whether the reference is empty.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Data.MapTileset">
            <summary>
            Represents an immutable data structure for defining a map tileset.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapTileset.Grid">
            <summary>
            Represents the grid dimensions of the tileset.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapTileset.Name">
            <summary>
            Gets the name of the tileset.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapTileset.Id">
            <summary>
            Gets the ID of the tileset.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapTileset.Tags">
            <summary>
            Gets the list of tags associated with the tileset.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapTileset.Padding">
            <summary>
            Gets the padding between tiles in the tileset.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapTileset.Spacing">
            <summary>
            Gets the spacing between tiles in the tileset.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapTileset.Size">
            <summary>
            Represents the dimensions of each tile in the tileset.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapTileset.GridSize">
            <summary>
            Gets the size of the grid (number of tiles) in the tileset.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapTileset.Filename">
            <summary>
            Gets the filename of the tileset.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Data.MapTileset.IsEmpty">
            <summary>
            Indicates whether the tileset is considered empty based on its size and filename.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Layers.MapEntityLayer">
            <summary>
            Represents a layer containing entities within a map, implementing the IMapLayer interface.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapEntityLayer.Location">
            <summary>
            Gets the location of the entity.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapEntityLayer.Id">
            <summary>
            Gets the identifier of the entity.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapEntityLayer.Name">
            <summary>
            Gets the name of the entity.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapEntityLayer.Pivot">
            <summary>
            Gets the pivot point of the entity.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapEntityLayer.Tags">
            <summary>
            Gets the list of tags associated with the entity.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapEntityLayer.Settings">
            <summary>
            Gets the settings associated with the element.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapEntityLayer.Position">
            <summary>
            Gets the position of the element.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapEntityLayer.Size">
            <summary>
            Gets the size of the element.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapEntityLayer.Grid">
            <summary>
            Gets the grid information associated with the element.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapEntityLayer.Layer">
            <summary>
            Gets or sets the map layer associated with this entity layer.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Layers.MapIntGridLayer">
            <summary>
            Represents a grid-based layer of integers within a map.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapIntGridLayer.Value">
            <summary>
            Gets the value associated with the location.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapIntGridLayer.Location">
            <summary>
            Gets the location associated with the value.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapIntGridLayer.IsSolid">
            <summary>
            Gets a value indicating whether the element is considered solid.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapIntGridLayer.IsZero">
            <summary>
            Gets a value indicating whether the element's value is zero.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapIntGridLayer.Layer">
            <summary>
            Gets the map layer associated with this element.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Layers.MapTileLayer">
            <summary>
            Represents a tile-based layer within a map, implementing the IMapLayer interface.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapTileLayer.Effects">
            <summary>
            Gets the surface effects associated with the tile element.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapTileLayer.Location">
            <summary>
            Gets the location of the tile element.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapTileLayer.Position">
            <summary>
            Gets the position of the tile element.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapTileLayer.Source">
            <summary>
            Gets the source rectangle defining the tile's region within a larger image.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapTileLayer.Index">
            <summary>
            Gets the index of the tile element.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Layers.MapTileLayer.Layer">
            <summary>
            Gets or sets the map layer associated with this tile element.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.BoolArraySetting">
            <summary>
            Represents a boolean array setting.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.BoolArraySetting.Value">
            <summary>
            Gets the value of the boolean array setting as a new List of boolean values.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.BoolSetting">
            <summary>
            Represents a boolean setting.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.BoolSetting.Value">
            <summary>
            Gets the value of the boolean setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.ColorArraySetting">
            <summary>
            Represents an array of Color settings.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.ColorArraySetting.Value">
            <summary>
            Gets the value of the Color array setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.ColorSetting">
            <summary>
            Represents a Color setting.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.ColorSetting.Value">
            <summary>
            Gets the value of the Color setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.EntityRefArraySetting">
            <summary>
            Represents an array of entity references setting.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.EntityRefArraySetting.Value">
            <summary>
            Gets the value of the entity reference array setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.EntityRefSetting">
            <summary>
            Represents a single entity reference setting.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.EntityRefSetting.Value">
            <summary>
            Gets the value of the entity reference setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.EnumArraySetting">
            <summary>
            Represents an array of enum values setting.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.EnumArraySetting.Value">
            <summary>
            Gets the value of the enum array setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.EnumSetting">
            <summary>
            Represents a single enum value setting.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.EnumSetting.Value">
            <summary>
            Gets the value of the enum setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.FilepathArraySetting">
            <summary>
            Represents an array of file path settings.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.FilepathArraySetting.Value">
            <summary>
            Gets the list of file paths from the setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.FilepathSetting">
            <summary>
            Represents a single file path setting.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.FilepathSetting.Value">
            <summary>
            Gets the file path from the setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.FloatArraySetting">
            <summary>
            Represents an array of float values setting.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.FloatArraySetting.Value">
            <summary>
            Gets the list of float values from the setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.FloatSetting">
            <summary>
            Represents a float value setting.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.FloatSetting.Value">
            <summary>
            Gets the float value from the setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.IntArraySetting">
            <summary>
            Represents an array of integer values setting.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.IntArraySetting.Value">
            <summary>
            Gets the integer array value from the setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.IntSetting">
            <summary>
            Represents an integer value setting.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.IntSetting.Value">
            <summary>
            Gets the integer value from the setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.MapSetting">
            <summary>
            Represents a setting associated with a map element.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.MapSetting.Value">
            <summary>
            Gets the value of the map setting.
            </summary>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.HasSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Determines whether a specified setting exists within the provided settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to check for.</param>
            <returns>True if the setting exists; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.ReplaceSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,Box.Loaders.Maps.Settings.MapSetting)">
            <summary>
            Replaces or adds a map setting in the provided dictionary of settings.
            </summary>
            <param name="settings">The dictionary containing the map settings.</param>
            <param name="name">The name of the setting to replace or add.</param>
            <param name="setting">The new map setting to replace or add.</param>
            <returns>True if the setting was successfully replaced; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetBoolSetting">
            <summary>
            Retrieves the setting value as a boolean.
            </summary>
            <returns>The value of the setting cast to a boolean.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to a boolean.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetBoolSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the value of the specified setting as a boolean from the provided settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The value of the specified setting cast to a boolean.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to a boolean.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetBoolSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Nullable{System.Boolean}@)">
            <summary>
            Attempts to retrieve a boolean setting from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="value">The output boolean value of the setting if found; otherwise, null.</param>
            <returns>True if the setting is found and is a valid boolean; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetColorSetting">
            <summary>
            Retrieves the setting value as a Color.
            </summary>
            <returns>The value of the setting cast to a Color.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to a Color.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetColorSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the Color setting value from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The Color setting value if found; otherwise, throws InvalidCastException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to a Color.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetColorSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Nullable{Box.Graphics.Color}@)">
            <summary>
            Attempts to retrieve a color setting from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="value">The output color value of the setting if found; otherwise, null.</param>
            <returns>True if the setting is found and is a valid color; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetEntityRefSetting">
            <summary>
            Retrieves the MapEntityRef setting value.
            </summary>
            <returns>The MapEntityRef setting value.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to a MapEntityRef.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetEntityRefSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the MapEntityRef setting value from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The MapEntityRef setting value if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to a MapEntityRef.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetEntityRefSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Nullable{Box.Loaders.Maps.Data.MapEntityRef}@)">
            <summary>
            Attempts to retrieve an entity reference setting from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="value">The output entity reference value of the setting if found.</param>
            <returns>True if the setting is found and is a valid entity reference; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetEnumSetting``1">
            <summary>
            Retrieves the enum setting value of type T.
            </summary>
            <typeparam name="T">The enum type to retrieve.</typeparam>
            <returns>The enum setting value of type T.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to the specified enum type T.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetEnumSetting``1(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the enum setting value of type T from the specified settings dictionary.
            </summary>
            <typeparam name="T">The enum type to retrieve.</typeparam>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The enum setting value of type T if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to the specified enum type T.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetEnumSetting``1(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Nullable{``0}@)">
            <summary>
            Attempts to retrieve an enum setting of type <typeparamref name="T"/> from the provided dictionary of settings.
            </summary>
            <typeparam name="T">The enum type to retrieve.</typeparam>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="value">The output enum value of the setting if found; otherwise, null.</param>
            <returns>True if the setting is found and is a valid enum of type <typeparamref name="T"/>; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetFilepathSetting">
            <summary>
            Retrieves the filepath setting value as a string.
            </summary>
            <returns>The filepath setting value as a string.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to a string.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetFilepathSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the filepath setting value as a string from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The filepath setting value as a string if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to a string.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetFilepathSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.String@)">
            <summary>
            Tries to retrieve a filepath setting from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="value">The output filepath value of the setting if found.</param>
            <returns>True if the setting is found and the filepath is valid; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetFloatSetting">
            <summary>
            Retrieves the float setting value as a single-precision floating point number.
            </summary>
            <returns>The float setting value as a single-precision floating point number.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to a float.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetFloatSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the float setting value as a single-precision floating point number from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The float setting value as a single-precision floating point number if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to a float.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetFloatSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Nullable{System.Single}@)">
            <summary>
            Tries to retrieve a float setting from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="value">The output float value of the setting if found; otherwise, null.</param>
            <returns>True if the setting is found and is a valid float; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetIntSetting">
            <summary>
            Retrieves the integer setting value as a 32-bit signed integer.
            </summary>
            <returns>The integer setting value as a 32-bit signed integer.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an integer.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetIntSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the integer setting value as a 32-bit signed integer from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The integer setting value as a 32-bit signed integer if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an integer.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetIntSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Nullable{System.Int32}@)">
            <summary>
            Tries to retrieve an integer setting from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="value">The output integer value of the setting if found; otherwise, null.</param>
            <returns>True if the setting is found and is a valid integer; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetStringSetting">
            <summary>
            Retrieves the string setting value as a string.
            </summary>
            <returns>The string setting value.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to a string.</exception>on>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetStringSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the string setting value from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The string setting value if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to a string.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetStringSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.String@)">
            <summary>
            Attempts to retrieve a string setting from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="value">The output string value of the setting if found; otherwise, null.</param>
            <returns>True if the setting is found and is a valid string; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetPointSetting">
            <summary>
            Retrieves the point setting value as a Vect2.
            </summary>
            <returns>The point setting value as a Vect2.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to a Vect2.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetPointSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the point setting value from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The point setting value as a Vect2 if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to a Vect2.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetPointSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Nullable{Box.Systems.Vect2}@)">
            <summary>
            Attempts to retrieve a tile setting from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="value">The output tile value of the setting if found; otherwise, null.</param>
            <returns>True if the setting is found and is a valid tile; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GeTileSetting">
            <summary>
            Retrieves the tile setting value as a MapTile.
            </summary>
            <returns>The tile setting value as a MapTile.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to a MapTile.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GeTileSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the tile setting value from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The tile setting value as a MapTile if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to a MapTile.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGeTileSetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Nullable{Box.Loaders.Maps.Data.MapTile}@)">
            <summary>
            Attempts to retrieve a tile setting from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="value">The output tile value of the setting if found; otherwise, null.</param>
            <returns>True if the setting is found and is a valid tile; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetBoolArraySetting">
            <summary>
            Retrieves the boolean array setting value as an IEnumerable of bool.
            </summary>
            <returns>The boolean array setting value as an IEnumerable of bool.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of bool.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetBoolArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the boolean array setting value from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The boolean array setting value as an IEnumerable of bool if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of bool.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetBoolArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Collections.Generic.IEnumerable{System.Boolean}@)">
            <summary>
            Tries to retrieve a boolean array setting from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="values">The output enumerable of boolean values if found.</param>
            <returns>True if the setting is found and contains valid boolean values; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetColorArraySetting">
            <summary>
            Retrieves the color array setting value as an IEnumerable of Color.
            </summary>
            <returns>The color array setting value as an IEnumerable of Color.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of Color.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetColorArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the color array setting value from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The color array setting value as an IEnumerable of Color if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of Color.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetColorArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Collections.Generic.IEnumerable{Box.Graphics.Color}@)">
            <summary>
            Tries to retrieve a color array setting from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="values">The output enumerable of Color values if found.</param>
            <returns>True if the setting is found and contains valid Color values; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetEntityRefArraySetting">
            <summary>
            Retrieves the array of MapEntityRef setting value as an IEnumerable of MapEntityRef.
            </summary>
            <returns>The array of MapEntityRef setting value as an IEnumerable of MapEntityRef.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of MapEntityRef.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetEntityRefArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the array of MapEntityRef setting value from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The array of MapEntityRef setting value as an IEnumerable of MapEntityRef if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of MapEntityRef.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetEntityRefArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Collections.Generic.IEnumerable{Box.Loaders.Maps.Data.MapEntityRef}@)">
            <summary>
            Tries to retrieve an array of entity reference settings from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="values">The output enumerable of MapEntityRef values if found.</param>
            <returns>True if the setting is found and contains valid MapEntityRef values; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetEnumArraySetting``1">
            <summary>
            Retrieves the array of enum setting value as an IEnumerable of the specified enum type T.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <returns>The array of enum setting value as an IEnumerable of T.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of the specified enum type T.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetEnumArraySetting``1(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the array of enum setting value from the specified settings dictionary.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The array of enum setting value as an IEnumerable of T if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of the specified enum type T.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetEnumArraySetting``1(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Tries to retrieve an array of enum settings of type <typeparamref name="T"/> from the provided dictionary of settings.
            </summary>
            <typeparam name="T">The enum type to retrieve.</typeparam>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="values">The output enumerable of enum values if found.</param>
            <returns>True if the setting is found and contains valid enum values of type <typeparamref name="T"/>; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetFilepathArraySetting">
            <summary>
            Retrieves the array of file path setting value as an IEnumerable of strings.
            </summary>
            <returns>The array of file path setting value as an IEnumerable of strings.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of strings.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetFilepathArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the array of file path setting value from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The array of file path setting value as an IEnumerable of strings if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of strings.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetFilepathArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Tries to retrieve an array of filepath settings from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="values">The output enumerable of filepath values if found.</param>
            <returns>True if the setting is found and contains valid filepath values; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetFloatArraySetting">
            <summary>
            Retrieves the array of float setting value as an IEnumerable of floats.
            </summary>
            <returns>The array of float setting value as an IEnumerable of floats.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of floats.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetFloatArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the array of float setting value from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The array of float setting value as an IEnumerable of floats if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of floats.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetFloatArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Collections.Generic.IEnumerable{System.Single}@)">
            <summary>
            Tries to retrieve an array of float settings from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="values">The output enumerable of float values if found.</param>
            <returns>True if the setting is found and contains valid float values; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetIntArraySetting">
            <summary>
            Retrieves the array of int setting value as an IEnumerable of ints.
            </summary>
            <returns>The array of int setting value as an IEnumerable of ints.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of ints.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetIntArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the array of int setting value from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The array of int setting value as an IEnumerable of ints if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of ints.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetIntArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Collections.Generic.IEnumerable{System.Int32}@)">
            <summary>
            Tries to retrieve an array of integer settings from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="values">The output enumerable of integer values if found.</param>
            <returns>True if the setting is found and contains valid integer values; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetStringArraySetting">
            <summary>
            Retrieves the array of string setting value as an IEnumerable of strings.
            </summary>
            <returns>The array of string setting value as an IEnumerable of strings.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of strings.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetStringArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the array of string setting value from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The array of string setting value as an IEnumerable of strings if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of strings.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetStringArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Tries to retrieve an array of string settings from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="values">The output enumerable of string values if found.</param>
            <returns>True if the setting is found and contains valid string values; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetPointArraySetting">
            <summary>
            Retrieves the array of Vect2 setting value as an IEnumerable of Vect2.
            </summary>
            <returns>The array of Vect2 setting value as an IEnumerable of Vect2.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of Vect2.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetPointArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the array of Vect2 setting value from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The array of Vect2 setting value as an IEnumerable of Vect2 if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of Vect2.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetPointArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Collections.Generic.IEnumerable{Box.Systems.Vect2}@)">
            <summary>
            Tries to retrieve an array of Vect2 (point) settings from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="values">The output enumerable of Vect2 (point) values if found.</param>
            <returns>True if the setting is found and contains valid Vect2 (point) values; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GeTileArraySetting">
            <summary>
            Retrieves the array of MapTile setting value as an IEnumerable of MapTile.
            </summary>
            <returns>The array of MapTile setting value as an IEnumerable of MapTile.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of MapTile.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.GetTileArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String)">
            <summary>
            Retrieves the array of MapTile setting value from the specified settings dictionary.
            </summary>
            <param name="settings">A dictionary containing map settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <returns>The array of MapTile setting value as an IEnumerable of MapTile if found; otherwise, throws KeyNotFoundException.</returns>
            <exception cref="T:System.InvalidCastException">Thrown if the setting value cannot be cast to an IEnumerable of MapTile.</exception>
        </member>
        <member name="M:Box.Loaders.Maps.Settings.MapSetting.TryGetTileArraySetting(System.Collections.Generic.Dictionary{System.String,Box.Loaders.Maps.Settings.MapSetting},System.String,System.Collections.Generic.IEnumerable{Box.Loaders.Maps.Data.MapTile}@)">
            <summary>
            Tries to retrieve an array of MapTile settings from the provided dictionary of settings.
            </summary>
            <param name="settings">A dictionary containing the settings.</param>
            <param name="name">The name of the setting to retrieve.</param>
            <param name="values">The output enumerable of MapTile values if found.</param>
            <returns>True if the setting is found and contains valid MapTile values; otherwise, false.</returns>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.PointArraySetting">
            <summary>
            Represents an array of 2D vectors (Vect2) setting.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.PointArraySetting.Value">
            <summary>
            Gets the list of 2D vectors (Vect2) from the setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.PointSetting">
            <summary>
            Represents a single 2D vector (Vect2) setting.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.PointSetting.Value">
            <summary>
            Gets the 2D vector (Vect2) value from the setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.StringArraySetting">
            <summary>
            Represents a setting containing an array of strings.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.StringArraySetting.Value">
            <summary>
            Gets the array of strings value from the setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.StringSetting">
            <summary>
            Represents a setting containing a single string value.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.StringSetting.Value">
            <summary>
            Gets the string value from the setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.TileArraySetting">
            <summary>
            Represents a setting containing an array of MapTile values.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.TileArraySetting.Value">
            <summary>
            Gets the list of MapTile values from the setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Maps.Settings.TileSetting">
            <summary>
            Represents a setting containing a single MapTile value.
            </summary>
        </member>
        <member name="P:Box.Loaders.Maps.Settings.TileSetting.Value">
            <summary>
            Gets the MapTile value from the setting.
            </summary>
        </member>
        <member name="T:Box.Loaders.Spritesheets.Slice">
            <summary>
            Represents a slice with bounds, ninepatch information, and pivot point.
            </summary>
        </member>
        <member name="P:Box.Loaders.Spritesheets.Slice.Bounds">
            <summary>
            Gets the bounds of the slice.
            </summary>
        </member>
        <member name="P:Box.Loaders.Spritesheets.Slice.Ninepatch">
            <summary>
            Gets the ninepatch information of the slice.
            </summary>
        </member>
        <member name="P:Box.Loaders.Spritesheets.Slice.Pivot">
            <summary>
            Gets the pivot point of the slice.
            </summary>
        </member>
        <member name="T:Box.Loaders.Spritesheets.Spritesheet">
            <summary>
            Represents a spritesheet asset that contains multiple sprites arranged in a grid or other layout.
            </summary>
        </member>
        <member name="P:Box.Loaders.Spritesheets.Spritesheet.Filename">
            <summary>
            Gets the filename associated with this asset.
            </summary>
        </member>
        <member name="P:Box.Loaders.Spritesheets.Spritesheet.IsEmpty">
            <summary>
            Gets a value indicating whether the asset data is empty.
            </summary>
        </member>
        <member name="P:Box.Loaders.Spritesheets.Spritesheet.IsDisposed">
            <summary>
            Gets or sets a value indicating whether the asset has been disposed.
            </summary>
        </member>
        <member name="P:Box.Loaders.Spritesheets.Spritesheet.Initialized">
            <summary>
            Gets or sets a value indicating whether the asset has been initialized.
            </summary>
        </member>
        <member name="M:Box.Loaders.Spritesheets.Spritesheet.Contains(System.String)">
            <summary>
            Checks if the spritesheet contains a sprite with the specified name.
            </summary>
            <param name="name">The name of the sprite to check.</param>
            <returns>True if the spritesheet contains the sprite; otherwise, false.</returns>
        </member>
        <member name="M:Box.Loaders.Spritesheets.Spritesheet.GetBounds(System.String)">
            <summary>
            Retrieves the bounding rectangle of the sprite with the specified name.
            </summary>
            <param name="name">The name of the sprite.</param>
            <returns>The bounding rectangle of the sprite, or Rect2.Empty if the sprite doesn't exist.</returns>
        </member>
        <member name="M:Box.Loaders.Spritesheets.Spritesheet.GetNinepatch(System.String)">
            <summary>
            Retrieves the ninepatch data of the sprite with the specified name.
            </summary>
            <param name="name">The name of the sprite.</param>
            <returns>The ninepatch data of the sprite, or Rect2.Empty if the sprite doesn't exist.</returns>
        </member>
        <member name="M:Box.Loaders.Spritesheets.Spritesheet.GetPivot(System.String)">
            <summary>
            Retrieves the pivot point of the sprite with the specified name.
            </summary>
            <param name="name">The name of the sprite.</param>
            <returns>The pivot point of the sprite, or Vect2.Zero if the sprite doesn't exist.</returns>
        </member>
        <member name="M:Box.Loaders.Spritesheets.Spritesheet.Dispose">
            <summary>
            Disposes of the spritesheet, releasing any resources it holds.
            </summary>
        </member>
        <member name="M:Box.Loaders.Spritesheets.Spritesheet.Initialize">
            <summary>
            Initializes the spritesheet.
            </summary>
        </member>
        <member name="T:Box.Pathfind.AStar">
            <summary>
            Provides a flexible and efficient A* pathfinding system supporting weighted edges, multiple heuristics, object pooling, and directional graph traversal.
            </summary>
        </member>
        <member name="P:Box.Pathfind.AStar.Count">
            <summary>
            Gets the number of vertices currently in the graph.
            </summary>
        </member>
        <member name="M:Box.Pathfind.AStar.AddPoint(System.Int32,Box.Systems.Vect2)">
            <summary>
            Adds a new vertex to the graph with a specified ID and position.
            </summary>
            <param name="id">The unique ID of the vertex.</param>
            <param name="position">The position of the vertex.</param>
            <returns>True if the vertex was added; false if the ID already exists.</returns>
        </member>
        <member name="M:Box.Pathfind.AStar.RemovePoint(System.Int32)">
            <summary>
            Removes a vertex and all its associated edges from the graph.
            </summary>
            <param name="id">The ID of the vertex to remove.</param>
            <returns>True if the vertex was found and removed; otherwise, false.</returns>
        </member>
        <member name="M:Box.Pathfind.AStar.ConnectPoints(System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            Connects two vertices in the graph with a weighted edge.
            </summary>
            <param name="id">The ID of the starting vertex.</param>
            <param name="toId">The ID of the destination vertex.</param>
            <param name="cost">The cost of traversing the edge.</param>
            <param name="bidirectional">If true, adds an edge in both directions.</param>
            <returns>True if the connection was created; otherwise, false.</returns>
        </member>
        <member name="M:Box.Pathfind.AStar.DisconnectPoints(System.Int32,System.Int32)">
            <summary>
            Disconnects two vertices in the graph by removing edges between them.
            </summary>
            <param name="id">The ID of the first vertex.</param>
            <param name="toId">The ID of the second vertex.</param>
            <returns>True if both vertices were found and disconnected; otherwise, false.</returns>
        </member>
        <member name="M:Box.Pathfind.AStar.ClearPools">
            <summary>
            Clears all internal object pools and cached heuristic values.
            </summary>
        </member>
        <member name="M:Box.Pathfind.AStar.FindPath(System.Int32,System.Int32,Box.Pathfind.HeuristicType,System.Func{Box.Pathfind.Vertex,Box.Pathfind.Vertex,System.Single})">
            <summary>
            Finds the shortest path between two vertices using the A* algorithm.
            </summary>
            <param name="startId">The ID of the start vertex.</param>
            <param name="goalId">The ID of the goal vertex.</param>
            <param name="heuristicType">The type of heuristic to use (Euclidean, Manhattan, Diagonal).</param>
            <param name="costModifier">Optional cost modifier function to adjust edge cost dynamically.</param>
            <returns>A list of vertex IDs representing the path, or null if no path found.</returns>
        </member>
        <member name="M:Box.Pathfind.AStar.ShortestPath(System.Int32,System.Int32,Box.Pathfind.HeuristicType,System.Func{Box.Pathfind.Vertex,Box.Pathfind.Vertex,System.Single})">
            <summary>
            Finds the shortest path between two vertices and returns a list of vertex IDs.
            </summary>
            <param name="startId">The ID of the starting vertex.</param>
            <param name="goalId">The ID of the target vertex.</param>
            <param name="heuristicType">The heuristic type to use for pathfinding (default is Euclidean).</param>
            <param name="costModifier">An optional function to dynamically modify edge traversal cost.</param>
            <returns>A list of vertex IDs representing the shortest path, or null if no path is found.</returns>
        </member>
        <member name="M:Box.Pathfind.AStar.ShortestPathAsPositions(System.Int32,System.Int32,Box.Pathfind.HeuristicType,System.Func{Box.Pathfind.Vertex,Box.Pathfind.Vertex,System.Single})">
            <summary>
            Wrapper for FindPath that returns the list of Vect2 positions instead of IDs.
            </summary>
            <param name="startId">The ID of the starting vertex.</param>
            <param name="goalId">The ID of the target vertex.</param>
            <param name="heuristicType">The heuristic to use for distance calculation.</param>
            <param name="costModifier">Optional edge cost modifier function.</param>
            <returns>The shortest path as a list of Vect2 positions, or null if no path is found.</returns>
        </member>
        <member name="M:Box.Pathfind.AStar.SetEdgeEnabled(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Enables or disables an edge between two connected vertices.
            </summary>
            <param name="fromId">The ID of the originating vertex.</param>
            <param name="toId">The ID of the destination vertex.</param>
            <param name="enabled">True to enable the edge; false to disable it.</param>
            <returns>True if the edge was found and updated; otherwise, false.</returns>
        </member>
        <member name="M:Box.Pathfind.AStar.SetNodeActive(System.Int32,System.Boolean)">
            <summary>
            Activates or deactivates a vertex by its ID. A deactivated vertex will be ignored during pathfinding.
            </summary>
            <param name="id">The ID of the vertex to modify.</param>
            <param name="active">Set to true to enable the vertex; false to disable it.</param>
            <returns>True if the vertex exists and was updated; otherwise, false.</returns>
        </member>
        <member name="M:Box.Pathfind.AStar.TryGetPosition(System.Int32,Box.Systems.Vect2@)">
            <summary>
            Gets the position of a vertex by its ID.
            </summary>
            <param name="id">The ID of the vertex.</param>
            <param name="position">The position of the vertex if found.</param>
            <returns>True if the vertex was found and position was returned; otherwise, false.</returns>
        </member>
        <member name="T:Box.Pathfind.HeuristicType">
            <summary>
            Specifies which heuristic function to use for A* pathfinding.
            </summary>
            <summary>
            Specifies which heuristic function to use for A* pathfinding.
            </summary>
        </member>
        <member name="F:Box.Pathfind.HeuristicType.Euclidean">
            <summary>
            Uses Euclidean distance (straight-line) as the heuristic.
            </summary>
        </member>
        <member name="F:Box.Pathfind.HeuristicType.Manhattan">
            <summary>
            Uses Manhattan distance (grid-aligned movement only) as the heuristic.
            </summary>
        </member>
        <member name="F:Box.Pathfind.HeuristicType.Diagonal">
            <summary>
            Uses Diagonal distance (maximum axis difference) as the heuristic.
            </summary>
        </member>
        <member name="T:Box.Pathfind.Edge">
            <summary>
            Represents a connection (edge) between two vertices with a weight and enabled state.
            </summary>
        </member>
        <member name="P:Box.Pathfind.Edge.IsEnabled">
            <summary>
            Indicates whether the edge is enabled and should be considered during pathfinding.
            </summary>
        </member>
        <member name="P:Box.Pathfind.Edge.Target">
            <summary>
            The target vertex that this edge leads to.
            </summary>
        </member>
        <member name="P:Box.Pathfind.Edge.Cost">
            <summary>
            The cost (weight) of traversing this edge.
            </summary>
        </member>
        <member name="M:Box.Pathfind.Edge.#ctor(Box.Pathfind.Vertex,System.Single)">
            <summary>
            Initializes a new edge to a target vertex with a given traversal cost.
            </summary>
            <param name="target">The vertex this edge connects to.</param>
            <param name="cost">The cost to traverse this edge.</param>
        </member>
        <member name="T:Box.Pathfind.PathResult">
            <summary>
            Represents the result of a pathfinding operation including the path and total cost.
            </summary>
        </member>
        <member name="F:Box.Pathfind.PathResult.Path">
            <summary>
            The list of vertex IDs representing the path from start to goal.
            </summary>
        </member>
        <member name="F:Box.Pathfind.PathResult.TotalCost">
            <summary>
            The total cost of the resulting path.
            </summary>
        </member>
        <member name="T:Box.Pathfind.Vertex">
            <summary>
            Represents a node in the graph with a position, ID, and connections.
            </summary>
        </member>
        <member name="P:Box.Pathfind.Vertex.IsActive">
            <summary>
            Indicates whether the vertex is currently active and should be considered during pathfinding.
            </summary>
        </member>
        <member name="P:Box.Pathfind.Vertex.Id">
            <summary>
            Gets or sets the unique identifier of the vertex.
            </summary>
        </member>
        <member name="P:Box.Pathfind.Vertex.Position">
            <summary>
            Gets or sets the 2D position of the vertex in the graph.
            </summary>
        </member>
        <member name="F:Box.Pathfind.Vertex.Edges">
            <summary>
            A list of edges connecting this vertex to its neighbors.
            </summary>
        </member>
        <member name="M:Box.Pathfind.Vertex.#ctor(System.Int32,Box.Systems.Vect2)">
            <summary>
            Initializes a new instance of the Vertex class with the given ID and position.
            </summary>
            <param name="id">The unique identifier for the vertex.</param>
            <param name="position">The position of the vertex.</param>
        </member>
        <member name="M:Box.Pathfind.Vertex.IsConnected(System.Int32)">
            <summary>
            Determines whether this vertex is connected to another vertex by ID.
            </summary>
            <param name="id">The ID of the vertex to check connectivity with.</param>
            <returns>True if connected; otherwise, false.</returns>
        </member>
        <member name="T:Box.Saves.SaveContentReader">
            <summary>
            Provides methods for reading serialized data from a binary file.
            Inherits from BinaryReader for binary data handling.
            </summary>
        </member>
        <member name="M:Box.Saves.SaveContentReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the SaveContentReader class with the specified stream.
            </summary>
            <param name="stream">The stream from which to read data.</param>
        </member>
        <member name="M:Box.Saves.SaveContentReader.ReadVect2">
            <summary>
            Reads a Vect2 (2D vector) from the underlying stream.
            </summary>
            <returns>The Vect2 read from the stream.</returns>
        </member>
        <member name="M:Box.Saves.SaveContentReader.ReadRect2">
            <summary>
            Reads a Rect2 (2D rectangle) from the underlying stream.
            </summary>
            <returns>The Rect2 read from the stream.</returns>
        </member>
        <member name="M:Box.Saves.SaveContentReader.ReadColor">
            <summary>
            Reads a Color from the underlying stream.
            </summary>
            <returns>The Color read from the stream.</returns>
        </member>
        <member name="M:Box.Saves.SaveContentReader.ReadEnum``1">
            <summary>
            Reads an enumeration of type T from the underlying stream.
            </summary>
            <typeparam name="T">The type of enumeration to read.</typeparam>
            <returns>The enumeration value read from the stream.</returns>
        </member>
        <member name="M:Box.Saves.SaveContentReader.ReadObject``1">
            <summary>
            Reads an object of type T from the underlying stream.
            </summary>
            <typeparam name="T">The type of object to read.</typeparam>
            <returns>The object of type T read from the stream.</returns>
        </member>
        <member name="T:Box.Saves.SaveContentWriter">
            <summary>
            Provides methods for writing serialized data to a binary file.
            Inherits from BinaryWriter for binary data handling.
            </summary>
        </member>
        <member name="M:Box.Saves.SaveContentWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the SaveContentWriter class with the specified stream.
            </summary>
            <param name="stream">The stream to which data will be written.</param>
        </member>
        <member name="M:Box.Saves.SaveContentWriter.Write(Box.Systems.Vect2)">
            <summary>
            Writes a Vect2 (2D vector) to the underlying stream.
            </summary>
            <param name="value">The Vect2 to write.</param>
        </member>
        <member name="M:Box.Saves.SaveContentWriter.Write(Box.Systems.Rect2)">
            <summary>
            Writes a Rect2 (2D rectangle) to the underlying stream.
            </summary>
            <param name="value">The Rect2 to write.</param>
        </member>
        <member name="M:Box.Saves.SaveContentWriter.Write(Box.Graphics.Color)">
            <summary>
            Writes a Color to the underlying stream.
            </summary>
            <param name="value">The Color to write.</param>
        </member>
        <member name="M:Box.Saves.SaveContentWriter.Write(System.Enum)">
            <summary>
            Writes an enumeration value to the underlying stream.
            </summary>
            <param name="value">The enumeration value to write.</param>
        </member>
        <member name="M:Box.Saves.SaveContentWriter.WriteObject(System.Object)">
            <summary>
            Writes an object of type object to the underlying stream.
            </summary>
            <param name="value">The object to write.</param>
        </member>
        <member name="T:Box.Saves.SaveTypeWriterReader`1">
            <summary>
            Abstract base class for handling serialization and deserialization of objects of type T
            to and from binary files, with optional compression.
            </summary>
            <typeparam name="T">The type of object to serialize and deserialize.</typeparam>
        </member>
        <member name="M:Box.Saves.SaveTypeWriterReader`1.Load(System.String)">
            <summary>
            Loads an object of type T from the specified file.
            Throws an exception if the file does not exist.
            </summary>
            <param name="filename">The name of the file to load.</param>
            <returns>The loaded object of type T.</returns>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when the specified file does not exist.</exception>
        </member>
        <member name="M:Box.Saves.SaveTypeWriterReader`1.Save(System.String,`0)">
            <summary>
            Saves the specified object of type T to the given file.  
            The file will be compressed only if compression results in a smaller size; otherwise,it will be saved uncompressed.
            </summary>
            <param name="filename">The path to the file where the object will be saved.</param>
            <param name="data">The object of type T to save.</param>
        </member>
        <member name="M:Box.Saves.SaveTypeWriterReader`1.Save(Box.Saves.SaveContentWriter,`0)">
            <summary>
            Saves the specified object of type T using a custom SaveContentWriter.
            Derived classes must implement this method to define how the object is serialized.
            </summary>
            <param name="writer">The SaveContentWriter used to write the object data.</param>
            <param name="value">The object of type T to serialize.</param>
        </member>
        <member name="M:Box.Saves.SaveTypeWriterReader`1.Load(Box.Saves.SaveContentReader)">
            <summary>
            Loads an object of type T using a custom SaveContentReader.
            Derived classes must implement this method to define how the object is deserialized.
            </summary>
            <param name="reader">The SaveContentReader used to read the object data.</param>
            <returns>The deserialized object of type T.</returns>
        </member>
        <member name="T:Box.Screens.Screen">
            <summary>
            Represents a base class for screens within the application.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.Layer">
            <summary>
            The layer of the screen.
            <para>Note: Entity layers cannot exceed screen layers.</para>
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.SafeRegion">
            <summary>
            Gets the size of the safe region from the engine settings.
            </summary>
            <value>
            A <see cref="T:System.Single"/> representing the safe region size.
            </value>
        </member>
        <member name="P:Box.Screens.Screen.IsExiting">
            <summary>
            Indicates whether the screen is currently exiting or closing.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.Camera">
            <summary>
            The camera associated with this screen.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.Visible">
            <summary>
            Determines if the screen is visible.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.IsUiScreen">
            <summary>
            Indicates if this screen is a UI screen.
            <para>Note: This is required for UI/overlay screens that display UI elements.</para>
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.IsTopmostScreen">
            <summary>
            Indicates if this screen is currently the topmost screen.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.IsActive">
            <summary>
            Indicates if this screen has focus.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.IsActiveScreen">
            <summary>
            Indicates if this screen has focus and is the topmost screen.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.EntityCount">
            <summary>
            Total number of entities on this screen.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.Entities">
            <summary>
            Retrieves all entities on this screen that are not null or exiting.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.ScreenManager">
            <summary>
            Provides access to the ScreenManager singleton instance.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.Assets">
            <summary>
            Provides access to the Assets singleton instance.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.Engine">
            <summary>
            Provides access to the Engine singleton instance.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.Input">
            <summary>
            Provides access to the InputMap instance from the Engine.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.Clock">
            <summary>
            Provides access to the Clock singleton instance.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.Signal">
            <summary>
            Provides access to the Signal singleton instance.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.Coroutine">
            <summary>
            Provides access to the Coroutine singleton instance.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.Renderer">
            <summary>
            Provides access to the Renderer singleton instance.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.Rand">
            <summary>
            Provides access to the Rand singleton instance.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.SoundManager">
            <summary>
            Provides access to the SoundManager singleton instance.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.Log">
            <summary>
            Provides access to the Log singleton instance.
            </summary>
        </member>
        <member name="P:Box.Screens.Screen.Service">
            <summary>
            Gets the instance of the <see cref="T:Box.Services.ServiceManager"/> associated with the engine.
            </summary>
            <remarks>
            This property provides access to the <see cref="T:Box.Services.ServiceManager"/> for managing and resolving services
            in the engine. It acts as a convenient way to interact with the engine's service container.
            </remarks>
        </member>
        <member name="P:Box.Screens.Screen.Viewport">
            <summary>
            Gets the current size of the viewport as a <see cref="T:Box.Systems.Vect2"/>.
            </summary>
            <remarks>
            The viewport size is determined by the renderer and represents the visible dimensions of the screen.
            </remarks>
        </member>
        <member name="P:Box.Screens.Screen.Width">
            <summary>
            Gets the width of the viewport in pixels.
            </summary>
            <remarks>
            This value is derived from the X component of the <see cref="P:Box.Screens.Screen.Viewport"/> property.
            </remarks>
        </member>
        <member name="P:Box.Screens.Screen.Height">
            <summary>
            Gets the height of the viewport in pixels.
            </summary>
            <remarks>
            This value is derived from the Y component of the <see cref="P:Box.Screens.Screen.Viewport"/> property.
            </remarks>
        </member>
        <member name="M:Box.Screens.Screen.GetService``1">
            <summary>
            Retrieves the singleton instance of the specified type.
            </summary>
            <typeparam name="T">The type of the singleton to retrieve.</typeparam>
            <returns>The singleton instance of the specified type.</returns>
        </member>
        <member name="M:Box.Screens.Screen.GetSurface(System.String)">
            <summary>
            Retrieves a Surface asset by its name.
            </summary>
            <param name="name">The name of the Surface asset to retrieve.</param>
            <returns>The Surface asset associated with the specified name.</returns>
        </member>
        <member name="M:Box.Screens.Screen.GetSurface(System.Enum)">
            <summary>
            Retrieves a Surface asset by its name.
            </summary>
            <param name="name">The name of the Surface asset to retrieve.</param>
            <returns>The Surface asset associated with the specified name.</returns>
        </member>
        <member name="M:Box.Screens.Screen.GetSurfaceFromFile(System.String)">
            <summary>
            Loads a Surface asset from a file.
            </summary>
            <param name="filename">The filename of the Surface asset to load.</param>
            <returns>The Surface asset loaded from the specified file.</returns>
        </member>
        <member name="M:Box.Screens.Screen.GetSurfaceFromTileset(Box.Loaders.Maps.Data.MapTileset)">
            <summary>
            Retrieves a surface from the specified tileset using its filename.
            </summary>
            <param name="tileset">The tileset containing the filename of the surface.</param>
            <returns>The surface associated with the tileset's filename.</returns>
        </member>
        <member name="M:Box.Screens.Screen.GetSurfaceFromTileset(Box.Loaders.Maps.Data.Map,System.Int32)">
            <summary>
            Retrieves a <see cref="T:Box.Graphics.Surface"/> from a tileset in the given <see cref="T:Box.Loaders.Maps.Data.Map"/> by its unique tileset ID.
            </summary>
            <param name="map">The map containing the tileset collection.</param>
            <param name="id">The unique ID of the tileset to retrieve the surface for.</param>
            <returns>The <see cref="T:Box.Graphics.Surface"/> associated with the specified tileset ID.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if no tileset with the specified ID is found in the map.
            </exception>
        </member>
        <member name="M:Box.Screens.Screen.GetMap(System.String)">
            <summary>
            Retrieves a Map asset by its name.
            </summary>
            <param name="name">The name of the Map asset to retrieve.</param>
            <returns>The Map asset associated with the specified name.</returns>
        </member>
        <member name="M:Box.Screens.Screen.GetMap(System.Enum)">
            <summary>
            Retrieves a Map asset by its name.
            </summary>
            <param name="name">The name of the Map asset to retrieve.</param>
            <returns>The Map asset associated with the specified name.</returns>
        </member>
        <member name="M:Box.Screens.Screen.GetSound(System.String)">
            <summary>
            Retrieves a Sound asset by its name.
            </summary>
            <param name="name">The name of the Sound asset to retrieve.</param>
            <returns>The Sound asset associated with the specified name.</returns>
        </member>
        <member name="M:Box.Screens.Screen.GetSound(System.Enum)">
            <summary>
            Retrieves a Sound asset by its name.
            </summary>
            <param name="name">The name of the Sound asset to retrieve.</param>
            <returns>The Sound asset associated with the specified name.</returns>
        </member>
        <member name="M:Box.Screens.Screen.GetFont(System.String)">
            <summary>
            Retrieves a Font asset by its name.
            </summary>
            <param name="name">The name of the Font asset to retrieve.</param>
            <returns>The Font asset associated with the specified name.</returns>
        </member>
        <member name="M:Box.Screens.Screen.GetFont(System.Enum)">
            <summary>
            Retrieves a Font asset by its name.
            </summary>
            <param name="name">The name of the Font asset to retrieve.</param>
            <returns>The Font asset associated with the specified name.</returns>
        </member>
        <member name="M:Box.Screens.Screen.GetSheet(System.String)">
            <summary>
            Retrieves a Spritesheet asset by its name.
            </summary>
            <param name="name">The name of the Spritesheet asset to retrieve.</param>
            <returns>The Spritesheet asset associated with the specified name.</returns>
        </member>
        <member name="M:Box.Screens.Screen.GetSheet(System.Enum)">
            <summary>
            Retrieves a Spritesheet asset by its name.
            </summary>
            <param name="name">The name of the Spritesheet asset to retrieve.</param>
            <returns>The Spritesheet asset associated with the specified name.</returns>
        </member>
        <member name="M:Box.Screens.Screen.LoadBitmapFont(System.String,System.Int32,System.Int32)">
            <summary>
            Loads a bitmap font from the specified file path.
            </summary>
            <param name="path">The file path to the bitmap font.</param>
            <param name="spacing">The spacing between characters. Default is 0.</param>
            <param name="linespacing">The spacing between lines of text. Default is 0.</param>
            <returns>A <see cref="T:Box.Graphics.Fonts.BitmapFont"/> object representing the loaded font.</returns>
        </member>
        <member name="M:Box.Screens.Screen.LoadFont(System.String,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Loads a generic font with the specified settings.
            </summary>
            <param name="path">The file path to the font.</param>
            <param name="size">The size of the font.</param>
            <param name="useSmoothing">Whether to use smoothing. Default is false.</param>
            <param name="bold">Whether to render the font as bold. Default is false.</param>
            <param name="thickness">The thickness of the font. Default is 0.</param>
            <param name="spacing">The spacing between characters. Default is 0.</param>
            <param name="lineSpacing">The spacing between lines of text. Default is 0.</param>
            <returns>A <see cref="T:Box.Graphics.Fonts.GenericFont"/> object representing the loaded font.</returns>
        </member>
        <member name="M:Box.Screens.Screen.LoadMap(System.String)">
            <summary>
            Loads a map from the specified file path.
            </summary>
            <param name="path">The file path to the map.</param>
            <returns>A <see cref="T:Box.Loaders.Maps.Data.Map"/> object representing the loaded map.</returns>
        </member>
        <member name="M:Box.Screens.Screen.LoadPack(System.String)">
            <summary>
            Loads a pack of assets from the specified file path.
            </summary>
            <param name="path">The file path to the asset pack.</param>
        </member>
        <member name="M:Box.Screens.Screen.LoadSound(System.String)">
            <summary>
            Loads a sound from the specified file path.
            </summary>
            <param name="path">The file path to the sound.</param>
            <returns>A <see cref="T:Box.Sounds.Sound"/> object representing the loaded sound.</returns>
        </member>
        <member name="M:Box.Screens.Screen.LoadSpriteSheet(System.String)">
            <summary>
            Loads a sprite sheet from the specified file path.
            </summary>
            <param name="path">The file path to the sprite sheet.</param>
            <returns>A <see cref="T:Box.Loaders.Spritesheets.Spritesheet"/> object representing the loaded sprite sheet.</returns>
        </member>
        <member name="M:Box.Screens.Screen.LoadSubSurface(System.String,Box.Systems.Rect2,System.Boolean,System.Boolean)">
            <summary>
            Loads a subsection of a surface (texture) from the specified file path and region.
            </summary>
            <param name="path">The file path to the texture.</param>
            <param name="region">The rectangular region of the surface to load.</param>
            <param name="repeat">Whether the texture should repeat. Default is false.</param>
            <param name="smooth">Whether to use smoothing on the texture. Default is false.</param>
            <returns>A <see cref="T:Box.Graphics.Surface"/> object representing the loaded subsection.</returns>
        </member>
        <member name="M:Box.Screens.Screen.LoadSubSurface(Box.Graphics.Surface,Box.Loaders.Spritesheets.Spritesheet,System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads a subsurface from a given spritesheet.
            </summary>
            <param name="surface">The base <see cref="T:Box.Graphics.Surface"/> to extract the subsurface from.</param>
            <param name="sheet">The <see cref="T:Box.Loaders.Spritesheets.Spritesheet"/> containing the subsurface definition.</param>
            <param name="name">The name of the subsurface to load.</param>
            <param name="repeat">Optional. Specifies whether the subsurface should repeat when rendered. Defaults to <c>false</c>.</param>
            <param name="smooth">Optional. Specifies whether smoothing should be applied to the subsurface. Defaults to <c>false</c>.</param>
            <returns>The loaded <see cref="T:Box.Graphics.Surface"/> representing the subsurface.</returns>
            <remarks>
            This method simplifies the process of extracting and managing subsurfaces from a spritesheet,
            leveraging the <see cref="M:Box.Graphics.Assets.LoadSubSurface(System.String,Box.Systems.Rect2,System.Boolean,System.Boolean)"/> method for asset management.
            </remarks>
        </member>
        <member name="M:Box.Screens.Screen.LoadSurface(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads a surface (texture) from the specified file path.
            </summary>
            <param name="path">The file path to the texture.</param>
            <param name="repeat">Whether the texture should repeat. Default is false.</param>
            <param name="smooth">Whether to use smoothing on the texture. Default is false.</param>
            <returns>A <see cref="T:Box.Graphics.Surface"/> object representing the loaded texture.</returns>
        </member>
        <member name="M:Box.Screens.Screen.OnEnter">
            <summary>
            Called when entering a state or screen. Override to provide custom behavior.
            </summary>
        </member>
        <member name="M:Box.Screens.Screen.OnExit">
            <summary>
            Called when exiting a state or screen. Override to provide custom behavior.
            </summary>
        </member>
        <member name="M:Box.Screens.Screen.Update">
            <summary>
            Called on each frame update and draw. Override to provide custom behavior.
            </summary>
        </member>
        <member name="M:Box.Screens.Screen.AddScreen(Box.Screens.Screen)">
            <summary>
            Adds a screen to the screen manager.
            </summary>
            <param name="screen">The screen to add.</param>
        </member>
        <member name="M:Box.Screens.Screen.AddScreen(Box.Screens.Screen[])">
            <summary>
            Adds multiple screens to the screen manager.
            </summary>
            <param name="screens">The screens to add.</param>
        </member>
        <member name="M:Box.Screens.Screen.RemoveScreen(Box.Screens.Screen)">
            <summary>
            Removes a screen from the screen manager.
            </summary>
            <param name="screen">The screen to remove.</param>
            <returns>True if the screen was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.RemoveScreen(Box.Screens.Screen[])">
            <summary>
            Removes multiple screens from the screen manager.
            </summary>
            <param name="screens">The screens to remove.</param>
            <returns>True if all screens were successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.HasScreen``1">
            <summary>
            Checks if a screen of the specified type is present in the screen manager.
            </summary>
            <typeparam name="T">The type of the screen to check for.</typeparam>
            <returns>True if a screen of the specified type is present; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.HasScreen(Box.Screens.Screen)">
            <summary>
            Checks if the specified screen is present in the screen manager.
            </summary>
            <param name="screen">The screen to check for.</param>
            <returns>True if the specified screen is present; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.GetScreen``1">
            <summary>
            Retrieves a screen of the specified type from the screen manager.
            </summary>
            <typeparam name="T">The type of the screen to retrieve.</typeparam>
            <returns>The screen of the specified type.</returns>
        </member>
        <member name="M:Box.Screens.Screen.TryGetScreen``1(``0@)">
            <summary>
            Tries to retrieve a screen of the specified type from the screen manager.
            </summary>
            <typeparam name="T">The type of the screen to retrieve.</typeparam>
            <param name="screen">When this method returns, contains the screen of the specified type, if found; otherwise, the default value for the type of the screen parameter.</param>
            <returns>True if a screen of the specified type was found; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.ExitScreen">
            <summary>
            Exits the current screen.
            </summary>
        </member>
        <member name="M:Box.Screens.Screen.AddEntity(Box.Entities.Entity)">
            <summary>
            Adds an entity to the entity manager.
            </summary>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:Box.Screens.Screen.AddEntityCondition``1(System.Boolean,``0,``0)">
            <summary>
            Adds an entity conditionally based on a boolean condition.
            </summary>
            <typeparam name="T">The type of entity to add.</typeparam>
            <param name="condition">The condition that determines whether to add the entity.</param>
            <param name="onTrue">The entity to add if the condition is true.</param>
            <param name="onFalse">The entity to add if the condition is false.</param>
            <returns>The added entity if the condition was met; otherwise, null.</returns>
        </member>
        <member name="M:Box.Screens.Screen.AddEntity(Box.Entities.Entity[])">
            <summary>
            Adds multiple entities to the entity manager.
            </summary>
            <param name="entities">The entities to add.</param>
        </member>
        <member name="M:Box.Screens.Screen.GetEntity``1">
            <summary>
            Retrieves an entity of the specified type from the entity manager.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <returns>The entity of the specified type.</returns>
        </member>
        <member name="M:Box.Screens.Screen.GetEntity``1(System.Int32)">
            <summary>
            Retrieves an entity of the specified type at the specified index from the entity manager.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="index">The index of the entity.</param>
            <returns>The entity of the specified type at the specified index.</returns>
        </member>
        <member name="M:Box.Screens.Screen.HasEntity``1">
            <summary>
            Checks if an entity of the specified type exists in the entity manager.
            </summary>
            <typeparam name="T">The type of entity to check for.</typeparam>
            <returns>True if an entity of the specified type exists; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.HasEntity(Box.Entities.Entity)">
            <summary>
            Checks if the specified entity exists in the entity manager.
            </summary>
            <param name="entity">The entity to check for.</param>
            <returns>True if the specified entity exists; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.RemoveEntity(Box.Entities.Entity)">
            <summary>
            Removes the specified entity from the entity manager.
            </summary>
            <param name="entity">The entity to remove.</param>
            <returns>True if the entity was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.RemoveEntity(Box.Entities.Entity[])">
            <summary>
            Removes multiple entities from the entity manager.
            </summary>
            <param name="entities">The entities to remove.</param>
            <returns>True if all entities were successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.ClearEntities">
            <summary>
            Clears all entities from the entity manager.
            </summary>
        </member>
        <member name="M:Box.Screens.Screen.StartRoutineDelayed(System.Single,System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine with a delay before execution.
            </summary>
            <param name="delay">The delay in seconds before starting the coroutine.</param>
            <param name="routine">The coroutine routine to start.</param>
            <returns>A handle to the coroutine.</returns>
        </member>
        <member name="M:Box.Screens.Screen.StartRoutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine immediately.
            </summary>
            <param name="routine">The coroutine routine to start.</param>
            <returns>A handle to the coroutine.</returns>
        </member>
        <member name="M:Box.Screens.Screen.HasRoutine(Box.Coroutines.CoroutineHandle)">
            <summary>
            Checks if a coroutine with the specified handle is currently active.
            </summary>
            <param name="handle">The handle of the coroutine to check.</param>
            <returns>True if the coroutine is active; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.HasRoutine(System.Collections.IEnumerator)">
            <summary>
            Checks if a specific coroutine enumerator is currently active.
            </summary>
            <param name="enumerator">The coroutine enumerator to check.</param>
            <returns>True if the coroutine is active; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.StopRoutine(Box.Coroutines.CoroutineHandle)">
            <summary>
            Stops a coroutine with the specified handle.
            </summary>
            <param name="handle">The handle of the coroutine to stop.</param>
            <returns>True if the coroutine was successfully stopped; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.StopRoutine(System.Collections.IEnumerator)">
            <summary>
            Stops a coroutine specified by its enumerator.
            </summary>
            <param name="handle">The coroutine enumerator to stop.</param>
            <returns>True if the coroutine was successfully stopped; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.ClearRoutines">
            <summary>
            Clears all active coroutines.
            </summary>
        </member>
        <member name="M:Box.Screens.Screen.Connect(System.String,System.Action{Box.Signals.SignalHandle})">
            <summary>
            Connects a handler function to a signal by name.
            </summary>
            <param name="name">The name of the signal to connect to.</param>
            <param name="handle">The handler function to invoke when the signal is emitted.</param>
        </member>
        <member name="M:Box.Screens.Screen.Connect(System.Enum,System.Action{Box.Signals.SignalHandle})">
            <summary>
            Connects a handler function to a signal using an enumeration value.
            </summary>
            <param name="name">The enumeration representing the signal to connect to.</param>
            <param name="handle">The handler function to invoke when the signal is emitted.</param>
        </member>
        <member name="M:Box.Screens.Screen.Emit(System.String,System.Object[])">
            <summary>
            Emits a signal by name with optional data.
            </summary>
            <param name="name">The name of the signal to emit.</param>
            <param name="data">Optional data to pass along with the signal.</param>
        </member>
        <member name="M:Box.Screens.Screen.Emit(System.Enum,System.Object[])">
            <summary>
            Emits a signal using an enumeration value with optional data.
            </summary>
            <param name="name">The enumeration representing the signal to emit.</param>
            <param name="data">Optional data to pass along with the signal.</param>
        </member>
        <member name="M:Box.Screens.Screen.EmitDelayed(System.Single,System.String,System.Object[])">
            <summary>
            Emits a signal by name after a specified delay, with optional data.
            </summary>
            <param name="delay">The delay in seconds before emitting the signal.</param>
            <param name="name">The name of the signal to emit.</param>
            <param name="data">Optional data to pass along with the signal.</param>
        </member>
        <member name="M:Box.Screens.Screen.EmitDelayed(System.Single,System.Enum,System.Object[])">
            <summary>
            Emits a signal using an enumeration value after a specified delay, with optional data.
            </summary>
            <param name="delay">The delay in seconds before emitting the signal.</param>
            <param name="name">The enumeration representing the signal to emit.</param>
            <param name="data">Optional data to pass along with the signal.</param>
        </member>
        <member name="M:Box.Screens.Screen.HasSignal(System.String)">
            <summary>
            Checks if a signal with the specified name is connected.
            </summary>
            <param name="name">The name of the signal to check.</param>
            <returns>True if the signal is connected; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.HasSignal(System.Enum)">
            <summary>
            Checks if a signal represented by an enumeration value is connected.
            </summary>
            <param name="name">The enumeration representing the signal to check.</param>
            <returns>True if the signal is connected; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.Disconnect(System.String)">
            <summary>
            Disconnects all handlers from a signal by name.
            </summary>
            <param name="name">The name of the signal to disconnect.</param>
            <returns>True if the signal was successfully disconnected; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.Disconnect(System.Enum)">
            <summary>
            Disconnects all handlers from a signal using an enumeration value.
            </summary>
            <param name="name">The enumeration representing the signal to disconnect.</param>
            <returns>True if the signal was successfully disconnected; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.ClearSignals">
            <summary>
            Clears all connected signals and their handlers.
            </summary>
        </member>
        <member name="M:Box.Screens.Screen.StartTimer(System.String,System.Single,System.Boolean,System.Action)">
            <summary>
            Adds a timer with the specified name, delay, repeat flag, and action.
            </summary>
            <param name="name">The name of the timer.</param>
            <param name="delay">The delay in seconds before the timer executes.</param>
            <param name="repeat">True if the timer should repeat; false otherwise.</param>
            <param name="action">The action to execute when the timer triggers.</param>
        </member>
        <member name="M:Box.Screens.Screen.StartTimer(System.Enum,System.Single,System.Boolean,System.Action)">
            <summary>
            Adds a timer with the specified enumeration value, delay, repeat flag, and action.
            </summary>
            <param name="name">The enumeration representing the timer.</param>
            <param name="delay">The delay in seconds before the timer executes.</param>
            <param name="repeat">True if the timer should repeat; false otherwise.</param>
            <param name="action">The action to execute when the timer triggers.</param>
        </member>
        <member name="M:Box.Screens.Screen.StartTimer(System.Single,System.Boolean,System.Action)">
            <summary>
            Adds a timer with a delay, repeat flag, and action.
            </summary>
            <param name="delay">The delay in seconds before the timer executes.</param>
            <param name="repeat">True if the timer should repeat; false otherwise.</param>
            <param name="action">The action to execute when the timer triggers.</param>
        </member>
        <member name="M:Box.Screens.Screen.TimerExists(System.String)">
            <summary>
            Checks if a timer with the specified name exists.
            </summary>
            <param name="name">The name of the timer to check.</param>
            <returns>True if the timer exists; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.TimerExists(System.Enum)">
            <summary>
            Checks if a timer represented by an enumeration value exists.
            </summary>
            <param name="name">The enumeration representing the timer to check.</param>
            <returns>True if the timer exists; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.StopTimer(System.String)">
            <summary>
            Stops a timer with the specified name.
            </summary>
            <param name="name">The name of the timer to stop.</param>
            <returns>True if the timer was successfully stopped; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.StopTimer(System.Enum)">
            <summary>
            Stops a timer represented by an enumeration value.
            </summary>
            <param name="name">The enumeration representing the timer to stop.</param>
            <returns>True if the timer was successfully stopped; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.Screen.ClearTimers">
            <summary>
            Clears all active timers.
            </summary>
        </member>
        <member name="T:Box.Screens.ScreenManager">
            <summary>
            Manages the lifecycle and navigation of screens in the application.
            </summary>
        </member>
        <member name="P:Box.Screens.ScreenManager.Count">
            <summary>
            Gets the number of screens currently managed by the ScreenManager.
            </summary>
        </member>
        <member name="P:Box.Screens.ScreenManager.ActiveScreen">
            <summary>
            Gets or sets the active screen currently being displayed.
            </summary>
        </member>
        <member name="P:Box.Screens.ScreenManager.Screens">
            <summary>
            Gets an enumerable collection of all screens managed by the ScreenManager.
            </summary>
        </member>
        <member name="M:Box.Screens.ScreenManager.Add(Box.Screens.Screen)">
            <summary>
            Adds a single screen to the ScreenManager.
            </summary>
            <param name="screen">The screen to add.</param>
        </member>
        <member name="M:Box.Screens.ScreenManager.Add(Box.Screens.Screen[])">
            <summary>
            Adds multiple screens to the ScreenManager.
            </summary>
            <param name="screens">The screens to add.</param>
        </member>
        <member name="M:Box.Screens.ScreenManager.Remove(Box.Screens.Screen)">
            <summary>
            Removes a specific screen from the ScreenManager.
            </summary>
            <param name="screen">The screen to remove.</param>
            <returns>True if the screen was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.ScreenManager.Remove(Box.Screens.Screen[])">
            <summary>
            Removes multiple screens from the ScreenManager.
            </summary>
            <param name="screens">The screens to remove.</param>
            <returns>True if all screens were successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.ScreenManager.Clear">
            <summary>
            Clears all screens from the ScreenManager.
            </summary>
        </member>
        <member name="M:Box.Screens.ScreenManager.Get``1">
            <summary>
            Retrieves a screen of the specified type <typeparamref name="T"/> from the ScreenManager.
            </summary>
            <typeparam name="T">The type of screen to retrieve.</typeparam>
            <returns>The screen of the specified type, if found; otherwise, throws an exception.</returns>
        </member>
        <member name="M:Box.Screens.ScreenManager.TryGet``1(``0@)">
            <summary>
            Attempts to retrieve a screen of the specified type <typeparamref name="T"/> from the ScreenManager.
            </summary>
            <typeparam name="T">The type of screen to retrieve.</typeparam>
            <param name="screen">When this method returns, contains the screen of the specified type if it is found; otherwise, default(T).</param>
            <returns>True if the screen was successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.ScreenManager.Has``1">
            <summary>
            Checks if a screen of the specified type <typeparamref name="T"/> exists in the ScreenManager.
            </summary>
            <typeparam name="T">The type of screen to check for.</typeparam>
            <returns>True if a screen of the specified type exists; otherwise, false.</returns>
        </member>
        <member name="M:Box.Screens.ScreenManager.Has(Box.Screens.Screen)">
            <summary>
            Checks if the specified screen exists in the ScreenManager.
            </summary>
            <param name="screen">The screen to check for.</param>
            <returns>True if the screen exists in the ScreenManager; otherwise, false.</returns>
        </member>
        <member name="T:Box.Services.ServiceCollection">
            <summary>
            Represents a collection of services that can be added and accessed within the application.
            </summary>
            <remarks>
            This class implements the <see cref="T:Box.Interfaces.IService"/> interface and acts as a container for storing services.
            It allows services to be added dynamically and provides access to the collection of registered services.
            </remarks>
        </member>
        <member name="P:Box.Services.ServiceCollection.Services">
            <summary>
            Gets the list of services stored in the collection.
            </summary>
            <remarks>
            This property provides access to the internal list of services that have been registered with the service collection.
            </remarks>
        </member>
        <member name="T:Box.Services.ServiceManager">
            <summary>
            Manages the collection of services within the application.
            </summary>
            <remarks>
            This class implements the <see cref="T:Box.Interfaces.IService"/> interface and provides functionality for managing and resolving
            services that are added to the service collection. The <see cref="T:Box.Services.ServiceManager"/> acts as the central point of
            access for retrieving and interacting with the registered services.
            </remarks>
        </member>
        <member name="P:Box.Services.ServiceManager.Services">
            <summary>
            Gets the list of services registered within the service manager.
            </summary>
        </member>
        <member name="M:Box.Services.ServiceManager.RegisterSettings(Box.EngineSettings)">
            <summary>
            Registers the provided engine settings using the specified settings builder.
            </summary>
            <param name="settings">The engine settings builder to register.</param>
            <returns>The current instance of <see cref="T:Box.Services.ServiceManager"/> for chaining.</returns>
            <remarks>
            This method registers the settings, allowing the engine configuration to be handled dynamically.
            </remarks>
        </member>
        <member name="M:Box.Services.ServiceManager.RegisterService(System.Object[])">
            <summary>
            Registers multiple services in the service manager.
            </summary>
            <param name="services">An array of services to register.</param>
            <returns>The current instance of <see cref="T:Box.Services.ServiceManager"/> for chaining.</returns>
            <remarks>
            This method registers services dynamically and adds them to the collection of services. It also checks if any
            of the services are of type <see cref="T:Box.Services.Types.UpdatableService"/> or <see cref="T:Box.Services.Types.InitializeService"/> to add them to
            their respective update and initialize lists.
            </remarks>
        </member>
        <member name="M:Box.Services.ServiceManager.RegisterScreens(Box.Screens.Screen[])">
            <summary>
            Registers multiple screens in the service manager.
            </summary>
            <param name="screens">An array of screens to register.</param>
            <returns>The current instance of <see cref="T:Box.Services.ServiceManager"/> for chaining.</returns>
            <remarks>
            This method allows screens to be added to the engine, which can then be used during runtime.
            </remarks>
        </member>
        <member name="M:Box.Services.ServiceManager.RegisterInputs(Box.Inputs.InputMap[])">
            <summary>
            Registers multiple input maps in the service manager.
            </summary>
            <param name="inputs">An array of input maps to register.</param>
            <returns>The current instance of <see cref="T:Box.Services.ServiceManager"/> for chaining.</returns>
            <remarks>
            This method adds input maps to the service manager, allowing for flexible input handling during runtime.
            </remarks>
        </member>
        <member name="M:Box.Services.ServiceManager.Build">
            <summary>
            Builds the service manager by finalizing the registration of all services and configurations.
            </summary>
            <returns>The current instance of <see cref="T:Box.Services.ServiceManager"/> for chaining.</returns>
            <remarks>
            This method registers necessary services like <see cref="T:Box.EngineSettings"/> and checks for the presence
            of input maps and screens to properly configure the engine. After calling this method, the service manager is
            considered "built" and ready for use.
            </remarks>
        </member>
        <member name="M:Box.Services.ServiceManager.TryGetService``1(``0@)">
            <summary>
            Attempts to get a registered service of the specified type.
            </summary>
            <typeparam name="T">The type of service to retrieve.</typeparam>
            <param name="service">The service instance if found, otherwise default value.</param>
            <returns>True if the service was found, false otherwise.</returns>
            <remarks>
            This method tries to resolve the specified service from the service container. If the service is found, it
            returns true and the service is passed out via the <paramref name="service"/> parameter.
            </remarks>
        </member>
        <member name="M:Box.Services.ServiceManager.GetService``1">
            <summary>
            Retrieves a registered service of the specified type.
            </summary>
            <typeparam name="T">The type of service to retrieve.</typeparam>
            <returns>The resolved service of type <typeparamref name="T"/>.</returns>
            <remarks>
            This method will throw an exception if the service is not found in the service container.
            </remarks>
        </member>
        <member name="M:Box.Services.ServiceManager.HasService``1">
            <summary>
            Checks if a service of the specified type is registered.
            </summary>
            <typeparam name="T">The type of service to check for.</typeparam>
            <returns>True if the service is registered, false otherwise.</returns>
            <remarks>
            This method checks if the specified service type is already registered in the service container.
            </remarks>
        </member>
        <member name="T:Box.Services.Types.InitializeService">
            <summary>
            Base class for accessing various singleton instances within the game engine.
            </summary>
        </member>
        <member name="P:Box.Services.Types.InitializeService.Engine">
            <summary>
            Gets the singleton instance of the engine.
            </summary>
        </member>
        <member name="P:Box.Services.Types.InitializeService.Coroutine">
            <summary>
            Gets the singleton instance of the coroutine manager.
            </summary>
        </member>
        <member name="P:Box.Services.Types.InitializeService.ScreenManager">
            <summary>
            Gets the singleton instance of the screen manager.
            </summary>
        </member>
        <member name="P:Box.Services.Types.InitializeService.Assets">
            <summary>
            Gets the singleton instance of the assets manager.
            </summary>
        </member>
        <member name="P:Box.Services.Types.InitializeService.SoundManager">
            <summary>
            Gets the singleton instance of the sound manager.
            </summary>
        </member>
        <member name="P:Box.Services.Types.InitializeService.Renderer">
            <summary>
            Gets the singleton instance of the renderer.
            </summary>
        </member>
        <member name="P:Box.Services.Types.InitializeService.Signal">
            <summary>
            Gets the singleton instance of the signal system.
            </summary>
        </member>
        <member name="P:Box.Services.Types.InitializeService.Input">
            <summary>
            Gets the input map instance from the engine.
            </summary>
        </member>
        <member name="P:Box.Services.Types.InitializeService.Clock">
            <summary>
            Gets the singleton instance of the clock.
            </summary>
        </member>
        <member name="P:Box.Services.Types.InitializeService.Log">
            <summary>
            Gets the singleton instance of the log manager.
            </summary>
        </member>
        <member name="P:Box.Services.Types.InitializeService.Rand">
            <summary>
            Gets the singleton instance of the random number generator.
            </summary>
        </member>
        <member name="M:Box.Services.Types.InitializeService.GetService``1">
            <summary>
            Retrieves a specific singleton instance of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the singleton to retrieve.</typeparam>
            <returns>The singleton instance of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Box.Services.Types.InitializeService.Initialize">
            <summary>
            Initializes the singleton instances and other components.
            </summary>
        </member>
        <member name="T:Box.Services.Types.Service">
            <summary>
            Represents a service that provides functionality within the application.
            </summary>
            <remarks>
            This class implements the <see cref="T:Box.Interfaces.IService"/> interface and can be used as a base class
            for various types of services in the application. It serves as a placeholder for general service logic.
            </remarks>
        </member>
        <member name="P:Box.Services.Types.Service.Engine">
            <summary>
            Gets the singleton instance of the engine.
            </summary>
        </member>
        <member name="P:Box.Services.Types.Service.Coroutine">
            <summary>
            Gets the singleton instance of the coroutine manager.
            </summary>
        </member>
        <member name="P:Box.Services.Types.Service.ScreenManager">
            <summary>
            Gets the singleton instance of the screen manager.
            </summary>
        </member>
        <member name="P:Box.Services.Types.Service.Assets">
            <summary>
            Gets the singleton instance of the assets manager.
            </summary>
        </member>
        <member name="P:Box.Services.Types.Service.SoundManager">
            <summary>
            Gets the singleton instance of the sound manager.
            </summary>
        </member>
        <member name="P:Box.Services.Types.Service.Renderer">
            <summary>
            Gets the singleton instance of the renderer.
            </summary>
        </member>
        <member name="P:Box.Services.Types.Service.Signal">
            <summary>
            Gets the singleton instance of the signal system.
            </summary>
        </member>
        <member name="P:Box.Services.Types.Service.Input">
            <summary>
            Gets the input map instance from the engine.
            </summary>
        </member>
        <member name="P:Box.Services.Types.Service.Clock">
            <summary>
            Gets the singleton instance of the clock.
            </summary>
        </member>
        <member name="P:Box.Services.Types.Service.Log">
            <summary>
            Gets the singleton instance of the log manager.
            </summary>
        </member>
        <member name="P:Box.Services.Types.Service.Rand">
            <summary>
            Gets the singleton instance of the random number generator.
            </summary>
        </member>
        <member name="M:Box.Services.Types.Service.GetService``1">
            <summary>
            Retrieves a specific singleton instance of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the singleton to retrieve.</typeparam>
            <returns>The singleton instance of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Box.Services.Types.UpdatableService">
            <summary>
            Represents a service that can be initialized and updated each frame.
            </summary>
            <remarks>
            This class implements the <see cref="T:Box.Interfaces.IUpdateService"/> interface, providing functionality for services
            that need to be initialized once and then updated periodically (e.g., every frame).
            </remarks>
        </member>
        <member name="P:Box.Services.Types.UpdatableService.Engine">
            <summary>
            Gets the singleton instance of the engine.
            </summary>
        </member>
        <member name="P:Box.Services.Types.UpdatableService.Coroutine">
            <summary>
            Gets the singleton instance of the coroutine manager.
            </summary>
        </member>
        <member name="P:Box.Services.Types.UpdatableService.ScreenManager">
            <summary>
            Gets the singleton instance of the screen manager.
            </summary>
        </member>
        <member name="P:Box.Services.Types.UpdatableService.Assets">
            <summary>
            Gets the singleton instance of the assets manager.
            </summary>
        </member>
        <member name="P:Box.Services.Types.UpdatableService.SoundManager">
            <summary>
            Gets the singleton instance of the sound manager.
            </summary>
        </member>
        <member name="P:Box.Services.Types.UpdatableService.Renderer">
            <summary>
            Gets the singleton instance of the renderer.
            </summary>
        </member>
        <member name="P:Box.Services.Types.UpdatableService.Signal">
            <summary>
            Gets the singleton instance of the signal system.
            </summary>
        </member>
        <member name="P:Box.Services.Types.UpdatableService.Input">
            <summary>
            Gets the input map instance from the engine.
            </summary>
        </member>
        <member name="P:Box.Services.Types.UpdatableService.Clock">
            <summary>
            Gets the singleton instance of the clock.
            </summary>
        </member>
        <member name="P:Box.Services.Types.UpdatableService.Log">
            <summary>
            Gets the singleton instance of the log manager.
            </summary>
        </member>
        <member name="P:Box.Services.Types.UpdatableService.Rand">
            <summary>
            Gets the singleton instance of the random number generator.
            </summary>
        </member>
        <member name="M:Box.Services.Types.UpdatableService.GetService``1">
            <summary>
            Retrieves a specific singleton instance of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the singleton to retrieve.</typeparam>
            <returns>The singleton instance of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Box.Services.Types.UpdatableService.Initialize">
            <summary>
            Initializes the service.
            </summary>
            <remarks>
            This method is called once to set up the service before it is used. It could include tasks like
            loading resources or preparing the service's state for use.
            </remarks>
        </member>
        <member name="M:Box.Services.Types.UpdatableService.Update">
            <summary>
            Updates the service each frame.
            </summary>
            <remarks>
            This method is called every frame to update the service’s state or perform periodic actions.
            </remarks>
        </member>
        <member name="T:Box.Signals.Signal">
            <summary>
            Enables signal passing without direct object access, utilizing a publish/subscribe (pub/sub) pattern.
            <para>Connect to signals and emit them from different parts of your code. Data can also be passed along with signals.</para>
            </summary>
            <remarks>
            <para>Example:</para>
            <para>Class 1: Connect("Push", OnPush);</para>
            <para>Class 2: Emit("Push", box);</para>
            </remarks>
        </member>
        <member name="P:Box.Signals.Signal.Count">
            <summary>
            Gets the total number of connected signals in the entire project.
            </summary>
        </member>
        <member name="M:Box.Signals.Signal.Connect(System.String,System.Action{Box.Signals.SignalHandle})">
            <summary>
            Connects to a signal that may be emitted later in time.
            </summary>
            <param name="name">The name of the signal to connect to.</param>
            <param name="handle">The handle and data of the emitted signal.</param>
        </member>
        <member name="M:Box.Signals.Signal.Connect(System.Enum,System.Action{Box.Signals.SignalHandle})">
            <summary>
            Connects to a signal that may be emitted later in time.
            </summary>
            <param name="name">The name of the signal to connect to.</param>
            <param name="handle">The handle and data of the emitted signal.</param>
        </member>
        <member name="M:Box.Signals.Signal.Disconnect(System.String,System.Action{Box.Signals.SignalHandle})">
            <summary>
            Disconnects from an active signal.
            </summary>
            <param name="name">The name of the signal to disconnect from.</param>
            <param name="handle">The method or delegate that was connected to this signal.</param>
        </member>
        <member name="M:Box.Signals.Signal.Disconnect(System.Enum,System.Action{Box.Signals.SignalHandle})">
            <summary>
            Disconnects from an active signal.
            </summary>
            <param name="name">The name of the signal to disconnect from.</param>
            <param name="handle">The method or delegate that was connected to this signal.</param>
        </member>
        <member name="M:Box.Signals.Signal.Emit(System.String,System.Object[])">
            <summary>
            Emits a signal with optional data based on a connected signal.
            </summary>
            <param name="name">The name of the signal to emit.</param>
            <param name="data">Optional data to pass with the signal.</param>
        </member>
        <member name="M:Box.Signals.Signal.Emit(System.Enum,System.Object[])">
            <summary>
            Emits a signal with optional data based on a connected signal.
            </summary>
            <param name="name">The name of the signal to emit.</param>
            <param name="data">Optional data to pass with the signal.</param>
        </member>
        <member name="M:Box.Signals.Signal.EmitDelayed(System.Single,System.String,System.Object[])">
            <summary>
            Emits a delayed signal with optional data based on a connected signal.
            </summary>
            <param name="delay">The delay time in seconds before emitting the signal.</param>
            <param name="name">The name of the signal to emit.</param>
            <param name="data">Optional data to pass with the signal.</param>
        </member>
        <member name="M:Box.Signals.Signal.EmitDelayed(System.Single,System.Enum,System.Object[])">
            <summary>
            Emits a delayed signal with optional data based on a connected signal.
            </summary>
            <param name="delay">The delay time in seconds before emitting the signal.</param>
            <param name="name">The name of the signal to emit.</param>
            <param name="data">Optional data to pass with the signal.</param>
        </member>
        <member name="T:Box.Signals.SignalHandle">
            <summary>
            An EventHandler passed to the subscriber when an event occurs.
            </summary>
        </member>
        <member name="P:Box.Signals.SignalHandle.Name">
            <summary>
            The name of the signal that was passed.
            </summary>
        </member>
        <member name="P:Box.Signals.SignalHandle.Data">
            <summary>
            The data associated with the signal.
            </summary>
        </member>
        <member name="P:Box.Signals.SignalHandle.IsEmpty">
            <summary>
            Checks if the signal contains any data.
            </summary>
        </member>
        <member name="M:Box.Signals.SignalHandle.Get``1(System.Int32)">
            <summary>
            Retrieves data based on the specified type and index within the data array.
            </summary>
            <typeparam name="T">The type to attempt to cast to.</typeparam>
            <param name="index">The index of the data parameter.</param>
            <returns>The data of type T at the specified index, or null if the type is incorrect or the index is out of range.</returns>
        </member>
        <member name="M:Box.Signals.SignalHandle.Exists``1(System.Int32)">
            <summary>
            Checks if there is valid data of the specified type at the given index.
            </summary>
            <typeparam name="T">The type to attempt to cast to.</typeparam>
            <param name="index">The index of the data parameter.</param>
            <returns>True if there is valid data of the specified type at the given index; otherwise, false.</returns>
        </member>
        <member name="M:Box.Signals.SignalHandle.TryGet``1(System.Int32,``0@)">
            <summary>
            Attempts to retrieve data of a specified type at a given index.
            </summary>
            <typeparam name="T">The type to attempt to cast to.</typeparam>
            <param name="index">The index of the data parameter.</param>
            <param name="value">When successful, contains the retrieved data; otherwise, null.</param>
            <returns>True if data is successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="T:Box.Sounds.Sound">
            <summary>
            Represents a sound asset that implements the <see cref="T:Box.Interfaces.IAsset"/> interface.
            </summary>
        </member>
        <member name="P:Box.Sounds.Sound.Filename">
            <summary>
            Gets the filename associated with this sound.
            </summary>
        </member>
        <member name="P:Box.Sounds.Sound.Looped">
            <summary>
            Gets a value indicating whether the sound is set to loop when it reaches the end.
            </summary>
            <value>
            <c>true</c> if the sound will automatically restart after finishing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Box.Sounds.Sound.IsEmpty">
            <summary>
            Gets a value indicating whether the sound is considered empty.
            </summary>
        </member>
        <member name="P:Box.Sounds.Sound.IsDisposed">
            <summary>
            Gets a value indicating whether the sound is disposed.
            </summary>
        </member>
        <member name="P:Box.Sounds.Sound.Initialized">
            <summary>
            Gets or sets a value indicating whether the sound is initialized.
            </summary>
        </member>
        <member name="M:Box.Sounds.Sound.Dispose">
            <summary>
            Disposes of the sound, releasing any allocated resources.
            </summary>
        </member>
        <member name="M:Box.Sounds.Sound.CreateInstance">
            <summary>
            Creates a new instance of <see cref="T:Box.Sounds.SoundInstance"/> associated with this sound.
            </summary>
            <returns>A new <see cref="T:Box.Sounds.SoundInstance"/> instance.</returns>
        </member>
        <member name="M:Box.Sounds.Sound.op_Equality(Box.Sounds.Sound,Box.Sounds.Sound)">
            <summary>
            Determines whether two Sound instances are equal.
            </summary>
            <param name="left">The left-hand side Sound instance.</param>
            <param name="right">The right-hand side Sound instance.</param>
            <returns>True if the instances are equal, false otherwise.</returns>
        </member>
        <member name="M:Box.Sounds.Sound.op_Inequality(Box.Sounds.Sound,Box.Sounds.Sound)">
            <summary>
            Determines whether two Sound instances are not equal.
            </summary>
            <param name="left">The left-hand side Sound instance.</param>
            <param name="right">The right-hand side Sound instance.</param>
            <returns>True if the instances are not equal, false otherwise.</returns>
        </member>
        <member name="M:Box.Sounds.Sound.Equals(Box.Sounds.Sound)">
            <summary>
            Checks whether this Sound instance is equal to another Sound instance.
            </summary>
            <param name="other">The Sound instance to compare with.</param>
            <returns>True if the instances are equal, false otherwise.</returns>
        </member>
        <member name="M:Box.Sounds.Sound.Equals(System.Object)">
            <summary>
            Determines whether this Sound instance is equal to another object.
            </summary>
            <param name="obj">The object to compare with this Sound instance.</param>
            <returns>True if the object is a Sound instance and equal to this instance, false otherwise.</returns>
        </member>
        <member name="M:Box.Sounds.Sound.GetHashCode">
            <summary>
            Returns the hash code for this Sound instance.
            </summary>
            <returns>The hash code value.</returns>
        </member>
        <member name="M:Box.Sounds.Sound.Initialize">
            <summary>
            Initializes the Sound instance.
            </summary>
        </member>
        <member name="T:Box.Sounds.SoundChannel">
            <summary>
            Represents a sound channel used by the sound manager, allowing you to set up multiple channels for music, sound effects, ambient sounds, etc.
            </summary>
            <remarks>
            Note: The SoundChannel ID of zero is reserved for the master channel. The master channel can adjust audio levels across all channels.
            </remarks>
        </member>
        <member name="P:Box.Sounds.SoundChannel.Count">
            <summary>
            The total number of currently playing audio instances.
            </summary>
        </member>
        <member name="P:Box.Sounds.SoundChannel.Id">
            <summary>
            This audio identifier. Id zero is reserved for the master channel.
            </summary>
        </member>
        <member name="P:Box.Sounds.SoundChannel.IsMasterChannel">
            <summary>
            Indicates if this is the master channel.
            </summary>
        </member>
        <member name="P:Box.Sounds.SoundChannel.Pitch">
            <summary>
            Adjusts the pitch of the channel audio to make it deeper or higher.
            </summary>
            <remarks>
            Acceptable values range from -2.0 to 2.0.
            </remarks>
        </member>
        <member name="P:Box.Sounds.SoundChannel.Pan">
            <summary>
            Gets or sets the pan of the audio channel, which controls the stereo balance of sounds played on this channel.
            </summary>
            <value>
            The pan value, ranging from -1.0 (full left) to 1.0 (full right), with 0.0 being the center (equal balance between left and right channels).
            </value>
            <remarks>
            When the pan value is set, it will update the pan of all currently playing sounds on the channel.
            A signal is emitted to notify other systems of the change in pan value.
            </remarks>
        </member>
        <member name="P:Box.Sounds.SoundChannel.Volume">
            <summary>
            Sets the audio level of the specified channel.
            </summary>
            <remarks>
            Note: This level is also influenced by the master volume setting.
            <para>Acceptable values range from 0.0 to 1.0.</para>
            </remarks>
        </member>
        <member name="P:Box.Sounds.SoundChannel.Sounds">
            <summary>
            Gets a list of currently playing sound instances.
            </summary>
        </member>
        <member name="T:Box.Sounds.SoundInstance">
            <summary>
            Represents an instance of a sound playing or managed within an application.
            </summary>
        </member>
        <member name="P:Box.Sounds.SoundInstance.Sound">
            <summary>
            
            </summary>
        </member>
        <member name="P:Box.Sounds.SoundInstance.IsDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Box.Sounds.SoundInstance.State">
            <summary>
            Gets the current state of the sound instance.
            </summary>
        </member>
        <member name="P:Box.Sounds.SoundInstance.Length">
            <summary>
            Gets the total duration of the sound.
            </summary>
        </member>
        <member name="P:Box.Sounds.SoundInstance.Looped">
            <summary>
            Gets a value indicating whether the sound instance is set to loop when it reaches the end.
            </summary>
            <value>
            <c>true</c> if the sound instance will automatically restart after finishing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Box.Sounds.SoundInstance.Position">
            <summary>
            Gets the current playback position of the sound.
            </summary>
        </member>
        <member name="P:Box.Sounds.SoundInstance.IsEmpty">
            <summary>
            Gets a value indicating whether the sound instance is empty or uninitialized.
            </summary>
        </member>
        <member name="P:Box.Sounds.SoundInstance.Volume">
            <summary>
            Gets or sets the volume of the sound instance.
            </summary>
        </member>
        <member name="P:Box.Sounds.SoundInstance.Pitch">
            <summary>
            Gets or sets the pitch of the sound instance.
            </summary>
        </member>
        <member name="P:Box.Sounds.SoundInstance.Pan">
            <summary>
            Gets or sets the stereo pan of the sound, determining its left-right positioning.
            </summary>
            <value>
            A float value ranging from -1.0 (full left) to 1.0 (full right). A value of 0.0 represents the center.
            </value>
        </member>
        <member name="M:Box.Sounds.SoundInstance.Play">
            <summary>
            Plays the sound instance from its current position.
            </summary>
        </member>
        <member name="M:Box.Sounds.SoundInstance.Stop">
            <summary>
            Stops the sound instance playback.
            </summary>
        </member>
        <member name="M:Box.Sounds.SoundInstance.Equals(Box.Sounds.SoundInstance)">
            <summary>
            Determines whether the specified <see cref="T:Box.Sounds.SoundInstance"/> is equal to the current instance.
            </summary>
            <param name="other">The <see cref="T:Box.Sounds.SoundInstance"/> to compare with the current instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Box.Sounds.SoundInstance"/> is equal to the current instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Box.Sounds.SoundInstance.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            <c>true</c> if the specified object is a <see cref="T:Box.Sounds.SoundInstance"/> and is equal to the current instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Box.Sounds.SoundInstance.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Box.Sounds.SoundInstance"/> object.
            </summary>
            <returns>A hash code for the current <see cref="T:Box.Sounds.SoundInstance"/>.</returns>
        </member>
        <member name="M:Box.Sounds.SoundInstance.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Box.Sounds.SoundInstance"/>.
            </summary>
            <returns>A string representing the current <see cref="T:Box.Sounds.SoundInstance"/> with its sound filename, state, position, and length.</returns>
        </member>
        <member name="M:Box.Sounds.SoundInstance.op_Equality(Box.Sounds.SoundInstance,Box.Sounds.SoundInstance)">
            <summary>
            Determines whether two specified <see cref="T:Box.Sounds.SoundInstance"/> instances are equal.
            </summary>
            <param name="left">The first <see cref="T:Box.Sounds.SoundInstance"/> to compare.</param>
            <param name="right">The second <see cref="T:Box.Sounds.SoundInstance"/> to compare.</param>
            <returns>
            <c>true</c> if the two <see cref="T:Box.Sounds.SoundInstance"/> instances are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Box.Sounds.SoundInstance.op_Inequality(Box.Sounds.SoundInstance,Box.Sounds.SoundInstance)">
            <summary>
            Determines whether two specified <see cref="T:Box.Sounds.SoundInstance"/> instances are not equal.
            </summary>
            <param name="left">The first <see cref="T:Box.Sounds.SoundInstance"/> to compare.</param>
            <param name="right">The second <see cref="T:Box.Sounds.SoundInstance"/> to compare.</param>
            <returns>
            <c>true</c> if the two <see cref="T:Box.Sounds.SoundInstance"/> instances are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Box.Sounds.SoundManager">
            <summary>
            The sound manager handles all sound channels, allowing you to manage music, sound effects, and other audio effects.
            </summary>
        </member>
        <member name="P:Box.Sounds.SoundManager.Instance">
            <summary>
            Singleton instance of the sound manager.
            </summary>
        </member>
        <member name="P:Box.Sounds.SoundManager.ChannelCount">
            <summary>
            Total number of sound channels managed by the sound manager.
            </summary>
        </member>
        <member name="P:Box.Sounds.SoundManager.PlayCount">
            <summary>
            Total count of currently playing sound instances across all channels.
            </summary>
        </member>
        <member name="M:Box.Sounds.SoundManager.Add(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Adds a new audio channel for music, sound effects, or other types as needed.
            </summary>
            <param name="id">The ID of the channel.</param>
            <param name="volume">The initial volume of the channel, ranging from 0.0 to 1.0.</param>
            <param name="pitch">The initial pitch of the channel, ranging from -2.0 to 2.0.</param>
            <param name="pan">The initial stereo pan of the channel, ranging from -1.0 (full left) to 1.0 (full right), with 0.0 being centered.</param>
            <exception cref="T:System.ArgumentException">Thrown if attempting to add to channel zero, which is reserved for the master channel.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the channel ID already exists.</exception>
        </member>
        <member name="M:Box.Sounds.SoundManager.Add(System.Enum,System.Single,System.Single,System.Single)">
            <summary>
            Adds a new audio channel for music, sound effects, or other types as needed.
            </summary>
            <param name="id">The ID of the channel.</param>
            <param name="volume">The initial volume of the channel, ranging from 0.0 to 1.0.</param>
            <param name="pitch">The initial pitch of the channel, ranging from -2.0 to 2.0.</param>
            <param name="pan">The initial stereo pan of the channel, ranging from -1.0 (full left) to 1.0 (full right), with 0.0 being centered.</param>
            <exception cref="T:System.ArgumentException">Thrown if attempting to add to channel zero, which is reserved for the master channel.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the channel ID already exists.</exception>
        </member>
        <member name="M:Box.Sounds.SoundManager.Remove(System.Int32)">
            <summary>
            Removes an audio channel that was previously added.
            </summary>
            <param name="id">The unique ID of the channel to remove.</param>
            <returns>
            <c>true</c> if the sound channel was successfully removed; <c>false</c> otherwise. 
            Removal will fail automatically if attempting to remove the master channel (ID zero) or if the channel does not exist.
            </returns>
            <remarks>
            This method attempts to remove the specified audio channel. The removal will fail if the specified ID is 0 (master channel), 
            or if the channel does not exist in the collection. If successful, it also clears any associated data for the channel.
            </remarks>
        </member>
        <member name="M:Box.Sounds.SoundManager.Remove(System.Enum)">
            <summary>
            Removes an audio channel that was previously added.
            </summary>
            <param name="id">The unique ID of the channel to remove.</param>
            <returns>
            <c>true</c> if the sound channel was successfully removed; <c>false</c> otherwise. 
            Removal will fail automatically if attempting to remove the master channel (ID zero) or if the channel does not exist.
            </returns>
            <remarks>
            This method attempts to remove the specified audio channel. The removal will fail if the specified ID is 0 (master channel), 
            or if the channel does not exist in the collection. If successful, it also clears any associated data for the channel.
            </remarks>
        </member>
        <member name="M:Box.Sounds.SoundManager.Clear">
            <summary>
            Removes all sound channels except the master channel, along with any playing sound instances on those channels.
            </summary>
        </member>
        <member name="M:Box.Sounds.SoundManager.Exists(System.Int32)">
            <summary>
            Checks if the specified channel exists.
            </summary>
            <param name="id">The unique ID of the channel to check.</param>
            <returns>
            <c>true</c> if the channel exists; <c>false</c> otherwise.
            </returns>
            <remarks>
            This method checks whether a channel with the specified ID is present in the collection of channels. 
            If the channel exists, it returns <c>true</c>; otherwise, it returns <c>false</c>.
            </remarks>
        </member>
        <member name="M:Box.Sounds.SoundManager.Exists(System.Enum)">
            <summary>
            Checks if the specified channel exists.
            </summary>
            <param name="id">The unique ID of the channel to check.</param>
            <returns>
            <c>true</c> if the channel exists; <c>false</c> otherwise.
            </returns>
            <remarks>
            This method checks whether a channel with the specified ID is present in the collection of channels. 
            If the channel exists, it returns <c>true</c>; otherwise, it returns <c>false</c>.
            </remarks>
        </member>
        <member name="M:Box.Sounds.SoundManager.Get(System.Int32)">
            <summary>
            Retrieves the sound channel based on the channel ID.
            </summary>
            <param name="id">The unique ID of the channel to retrieve.</param>
            <returns>
            The sound channel object if the channel ID exists; otherwise, returns <c>null</c>.
            <remarks>
            If the channel ID does not exist, <c>null</c> will be returned, indicating that the specified channel was not found.
            </remarks>
            </returns>
        </member>
        <member name="M:Box.Sounds.SoundManager.Get(System.Enum)">
            <summary>
            Retrieves the sound channel based on the channel ID.
            </summary>
            <param name="id">The unique ID of the channel to retrieve.</param>
            <returns>
            The sound channel object if the channel ID exists; otherwise, returns <c>null</c>.
            <remarks>
            If the channel ID does not exist, <c>null</c> will be returned, indicating that the specified channel was not found.
            </remarks>
            </returns>
        </member>
        <member name="M:Box.Sounds.SoundManager.TryGet(System.Int32,Box.Sounds.SoundChannel@)">
            <summary>
            Tries to retrieve the sound channel based on the channel ID.
            </summary>
            <param name="id">The unique ID of the channel to retrieve.</param>
            <param name="channel">Outputs the sound channel if found; otherwise, null.</param>
            <returns>
            <c>true</c> if the channel was found and retrieved successfully; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method attempts to get the sound channel with the specified ID. If the channel exists, it is assigned to the 
            <paramref name="channel"/> output parameter, and the method returns <c>true</c>. If the channel does not exist, 
            <paramref name="channel"/> will be set to <c>null</c>, and the method returns <c>false</c>.
            </remarks>
        </member>
        <member name="M:Box.Sounds.SoundManager.TryGet(System.Enum,Box.Sounds.SoundChannel@)">
            <summary>
            Tries to retrieve the sound channel based on the channel ID.
            </summary>
            <param name="id">The unique ID of the channel to retrieve.</param>
            <param name="channel">Outputs the sound channel if found; otherwise, null.</param>
            <returns>
            <c>true</c> if the channel was found and retrieved successfully; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method attempts to get the sound channel with the specified ID. If the channel exists, it is assigned to the 
            <paramref name="channel"/> output parameter, and the method returns <c>true</c>. If the channel does not exist, 
            <paramref name="channel"/> will be set to <c>null</c>, and the method returns <c>false</c>.
            </remarks>
        </member>
        <member name="M:Box.Sounds.SoundManager.Play(Box.Sounds.Sound,System.Single,System.Single,System.Single)">
            <summary>
            Plays a sound instantly without assigning it to a sound channel.
            </summary>
            <param name="sound">The sound to play.</param>
            <param name="volume">The volume level of the sound (0.0 to 1.0).</param>
            <param name="pitch">The pitch adjustment of the sound (e.g., 1.0 for normal pitch).</param>
            <param name="pan">The stereo pan of the sound (-1.0 for full left, 1.0 for full right, 0.0 for center).</param>
            <returns>A <see cref="T:Box.Sounds.SoundInstance"/> representing the playing sound.</returns>
            <exception cref="T:System.Exception">Thrown if the provided sound is empty.</exception>
        </member>
        <member name="M:Box.Sounds.SoundManager.Play(System.Int32,Box.Sounds.Sound)">
            <summary>
            Plays a sound on the specified sound channel.
            </summary>
            <param name="id">The ID of the sound channel to play the sound on.</param>
            <param name="sound">The sound to play.</param>
            <returns>A <see cref="T:Box.Sounds.SoundInstance"/> representing the playing sound.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the channel ID is 0, as it is invalid.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the specified channel ID does not exist.</exception>
        </member>
        <member name="M:Box.Sounds.SoundManager.Play(System.Enum,Box.Sounds.Sound)">
            <summary>
            Plays a sound on the specified sound channel.
            </summary>
            <param name="id">The ID of the sound channel to play the sound on.</param>
            <param name="sound">The sound to play.</param>
            <returns>A <see cref="T:Box.Sounds.SoundInstance"/> representing the playing sound.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the channel ID is 0, as it is invalid.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the specified channel ID does not exist.</exception>
        </member>
        <member name="M:Box.Sounds.SoundManager.Stop(System.Int32,Box.Sounds.SoundInstance)">
            <summary>
            Stops a specific sound on the identified channel.
            </summary>
            <param name="id">The unique ID of the channel where the sound will be stopped.</param>
            <param name="sound">The sound instance to be stopped.</param>
            <returns>
            <c>false</c> if the channel ID is 0 (master channel), if the channel doesn't exist, if no sounds are playing on the channel, or if the specified sound is not found on the channel.
            <c>true</c> if the specified sound was successfully stopped on the identified channel.
            </returns>
        </member>
        <member name="M:Box.Sounds.SoundManager.Stop(System.Enum,Box.Sounds.SoundInstance)">
            <summary>
            Stops a specific sound on the identified channel.
            </summary>
            <param name="id">The unique ID of the channel where the sound will be stopped.</param>
            <param name="sound">The sound instance to be stopped.</param>
            <returns>
            <c>false</c> if the channel ID is 0 (master channel), if the channel doesn't exist, if no sounds are playing on the channel, or if the specified sound is not found on the channel.
            <c>true</c> if the specified sound was successfully stopped on the identified channel.
            </returns>
        </member>
        <member name="M:Box.Sounds.SoundManager.Stop(System.Int32)">
            <summary>
            Stops all audio playback on the specified channel ID.
            </summary>
            <param name="id">The unique ID of the channel where all sounds will be stopped.</param>
            <returns>
            <c>false</c> if the channel ID is 0 (master channel), if the channel doesn't exist, or if there are no sounds playing on the channel.
            <c>true</c> if the audio playback on the specified channel was successfully stopped.
            </returns>
        </member>
        <member name="M:Box.Sounds.SoundManager.Stop(System.Enum)">
            <summary>
            Stops all audio playback on the specified channel ID.
            </summary>
            <param name="id">The unique ID of the channel where all sounds will be stopped.</param>
            <returns>
            <c>false</c> if the channel ID is 0 (master channel), if the channel doesn't exist, or if there are no sounds playing on the channel.
            <c>true</c> if the audio playback on the specified channel was successfully stopped.
            </returns>
        </member>
        <member name="M:Box.Sounds.SoundManager.StopAll">
            <summary>
            Will stop all audio on all channels.
            </summary>
        </member>
        <member name="M:Box.Sounds.SoundManager.IsAlreadyPlaying(System.Int32,Box.Sounds.SoundInstance)">
            <summary>
            Checks if a specific sound is currently playing on the specified channel ID.
            </summary>
            <param name="id">The unique ID of the channel to check.</param>
            <param name="sound">The sound to check for on the specified channel.</param>
            <returns>
            <c>false</c> if the channel ID is 0 (master channel), or if the channel doesn't exist.
            <c>true</c> if the sound is currently playing on the specified channel ID; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Box.Sounds.SoundManager.IsAlreadyPlaying(System.Enum,Box.Sounds.SoundInstance)">
            <summary>
            Checks if a specific sound is currently playing on the specified channel ID.
            </summary>
            <param name="id">The unique ID of the channel to check.</param>
            <param name="sound">The sound to check for on the specified channel.</param>
            <returns>
            <c>false</c> if the channel ID is 0 (master channel), or if the channel doesn't exist.
            <c>true</c> if the sound is currently playing on the specified channel ID; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Box.Sounds.SoundManager.IsAlreadyPlaying(System.Int32,Box.Sounds.Sound)">
            <summary>
            Checks if a specific sound is currently playing on the specified channel ID.
            </summary>
            <param name="id">The unique ID of the channel to check.</param>
            <param name="sound">The sound to check for on the specified channel.</param>
            <returns>
            <c>false</c> if the channel ID is 0 (master channel), or if the channel doesn't exist.
            <c>true</c> if the sound is currently playing on the specified channel ID; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Box.Sounds.SoundManager.IsAlreadyPlaying(System.Enum,Box.Sounds.Sound)">
            <summary>
            Checks if a specific sound is currently playing on the specified channel ID.
            </summary>
            <param name="id">The unique ID of the channel to check.</param>
            <param name="sound">The sound to check for on the specified channel.</param>
            <returns>
            <c>false</c> if the channel ID is 0 (master channel), or if the channel doesn't exist.
            <c>true</c> if the sound is currently playing on the specified channel ID; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Box.Sounds.SoundManager.Update">
            <summary>
            Updates the sound manager, processing all active sounds and their states.
            </summary>
            <remarks>
            This method is called every frame to update the state of active sounds. It handles tasks like updating sound effects,
            checking for completion, and managing the playback state of sounds within the engine.
            </remarks>
        </member>
        <member name="T:Box.Systems.Camera">
            <summary>
            Represents a camera instance used for following, panning, with each screen having its own dedicated camera.
            </summary>
        </member>
        <member name="F:Box.Systems.Camera.Clamp">
            <summary>
            Restricts the camera position to stay within a specified rectangle.
            </summary>
        </member>
        <member name="F:Box.Systems.Camera.Offset">
            <summary>
            Adjusts the camera position by applying an offset.
            </summary>
        </member>
        <member name="P:Box.Systems.Camera.Bounds">
            <summary>
            
            </summary>
        </member>
        <member name="P:Box.Systems.Camera.Area">
            <summary>
            Represents the bounding area of the camera's visible viewport.
            </summary>
        </member>
        <member name="P:Box.Systems.Camera.IsFollowing">
            <summary>
            Indicates whether the camera is currently following an entity.
            </summary>
        </member>
        <member name="F:Box.Systems.Camera.CameraEaseType">
            <summary>
            Specifies the ease type to be used when the camera is following an entity.
            </summary>
        </member>
        <member name="P:Box.Systems.Camera.DefaultScale">
            <summary>
            Gets the default scale factor based on the window size and the viewport size.
            </summary>
            <remarks>
            This property returns a <c>Vect2</c> representing the ratio of the engine window dimensions
            to the viewport dimensions. It is typically used for scaling coordinates, UI elements, or
            graphics to match the current resolution.
            </remarks>
            <value>
            A <c>Vect2</c> containing the horizontal and vertical scale factors.
            </value>
        </member>
        <member name="P:Box.Systems.Camera.Zoom">
            <summary>
            Represents the current scale factor of the camera, relative to the window size.
            </summary>
        </member>
        <member name="F:Box.Systems.Camera.Speed">
            <summary>
            Represents the camera movement speed, typically used for camera following.
            </summary>
        </member>
        <member name="P:Box.Systems.Camera.Position">
            <summary>
            Represents the position of the camera.
            </summary>
        </member>
        <member name="M:Box.Systems.Camera.Reset">
            <summary>
            Resets the internal view using the current position and viewport settings.
            </summary>
            <remarks>
            This method updates the view to match the current position of the object and the
            dimensions defined in <c>EngineSettings.Instance.Viewport</c>.
            </remarks>
        </member>
        <member name="M:Box.Systems.Camera.InViewport(Box.Systems.Rect2)">
            <summary>
            Checks if the rectangle is currently within the viewport.
            </summary>
            <param name="rectangle">The entity to check.</param>
            <returns>True if the rectangle is visible within the viewport; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Camera.InViewport(Box.Entities.Entity)">
            <summary>
            Checks if the entity is currently within the viewport.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>True if the entity is visible within the viewport; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Camera.Follow(Box.Entities.Entity,System.Boolean)">
            <summary>
            Sets the camera to follow an entity automatically.
            </summary>
            <param name="entity">The entity that the camera will follow.</param>
            <param name="teleportToEntity">Specifies whether to instantly teleport the camera to the entity, bypassing smooth transition.</param>
        </member>
        <member name="M:Box.Systems.Camera.UnFollow">
            <summary>
            Stops the camera from following the selected entity previously set by the Follow method.
            </summary>
        </member>
        <member name="M:Box.Systems.Camera.Shake(System.Single,System.Single)">
            <summary>
            Shakes the camera with a specified magnitude and duration.
            </summary>
            <param name="magnitude">The strength of the shake.</param>
            <param name="duration">The duration of the shake in seconds.</param>
        </member>
        <member name="T:Box.Systems.Clock">
            <summary>
            Represents a clock used to measure delta time.
            </summary>
        </member>
        <member name="P:Box.Systems.Clock.DeltaTimeAsMilliseconds">
            <summary>
            DeltaTime displayed in Milliseconds.
            </summary>
        </member>
        <member name="P:Box.Systems.Clock.DeltaTimeAsMicroseconds">
            <summary>
            DeltaTime displayed in Microseconds.
            </summary>
        </member>
        <member name="P:Box.Systems.Clock.DeltaTime">
            <summary>
            DeltaTime displayed in Seconds.
            </summary>
        </member>
        <member name="M:Box.Systems.Clock.Update">
            <summary>
            Updates the clock, resetting the time and starting a new measurement cycle.
            </summary>
            <remarks>
            This method is called every frame to update the clock's time. It uses the underlying timer (e.g., <see cref="F:Box.Systems.Clock._clock"/>)
            to restart and capture the current time, which can be used for time-based operations within the engine.
            </remarks>
        </member>
        <member name="M:Box.Systems.Clock.ToFps(System.Single)">
            <summary>
            Converts seconds to frames per second.
            </summary>
            <param name="seconds">The number of seconds to convert to frames per second.</param>
            <returns>The equivalent number of frames per second based on the input seconds.</returns>
        </member>
        <member name="T:Box.Systems.Log">
            <summary>
            Provides logging functionality to write messages to a file.
            </summary>
        </member>
        <member name="P:Box.Systems.Log.Instance">
            <summary>
            Singleton instance of the Log class.
            </summary>
        </member>
        <member name="M:Box.Systems.Log.Finalize">
            <summary>
            Finalizes an instance of the Log class.
            </summary>
        </member>
        <member name="M:Box.Systems.Log.Print(System.String)">
            <summary>
            Prints a string value.
            </summary>
            <param name="value">The string value to print.</param>
        </member>
        <member name="M:Box.Systems.Log.Print(System.Object)">
            <summary>
            Prints an object's string representation.
            </summary>
            <param name="value">The object whose string representation will be printed.</param>
        </member>
        <member name="M:Box.Systems.Log.PrintObjcet(System.Object,System.String)">
            <summary>
            Prints an object's title and associated text.
            </summary>
            <param name="title">The title of the object.</param>
            <param name="text">The text associated with the object.</param>
        </member>
        <member name="M:Box.Systems.Log.PrintTabbed(System.Object[])">
            <summary>
            Prints multiple objects in a tabular format.
            </summary>
            <param name="values">Objects to print in tabular format.</param>
        </member>
        <member name="M:Box.Systems.Log.PrintMany(System.Object[])">
            <summary>
            Prints multiple values.
            </summary>
            <param name="values">Values to print.</param>
        </member>
        <member name="M:Box.Systems.Log.Assert(System.Boolean,System.String)">
            <summary>
            Checks for a condition; if the condition is true, display a message that shows the call stack.
            </summary>
            <param name="condition">true if passed, false if failed</param>
            <param name="message">the message of your assert</param>
        </member>
        <member name="T:Box.Systems.Rect2">
            <summary>
            Represents a 2D rectangle used for pixel detection, rectangle-to-rectangle collision detection, and other utility methods.
            </summary>
        </member>
        <member name="F:Box.Systems.Rect2.X">
            <summary>
            The X-coordinate of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:Box.Systems.Rect2.Y">
            <summary>
            The Y-coordinate of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:Box.Systems.Rect2.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="F:Box.Systems.Rect2.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="P:Box.Systems.Rect2.Empty">
            <summary>
            Represents an empty rectangle.
            </summary>
        </member>
        <member name="P:Box.Systems.Rect2.One">
            <summary>
            Represents a rectangle with dimensions of one by one.
            </summary>
        </member>
        <member name="P:Box.Systems.Rect2.Top">
            <summary>
            Represents the top side of the rectangle.
            </summary>
        </member>
        <member name="P:Box.Systems.Rect2.Left">
            <summary>
            Represents the left side of the rectangle.
            </summary>
        </member>
        <member name="P:Box.Systems.Rect2.Right">
            <summary>
            Represents the right side of the rectangle.
            </summary>
        </member>
        <member name="P:Box.Systems.Rect2.Bottom">
            <summary>
            Represents the bottom side of the rectangle.
            </summary>
        </member>
        <member name="P:Box.Systems.Rect2.IsEmpty">
            <summary>
            Determines if the rectangle is empty.
            </summary>
        </member>
        <member name="P:Box.Systems.Rect2.Center">
            <summary>
            Represents the center of the rectangle.
            </summary>
        </member>
        <member name="P:Box.Systems.Rect2.Position">
            <summary>
            The position of the rectangle.
            </summary>
        </member>
        <member name="P:Box.Systems.Rect2.Size">
            <summary>
            The size of the rectangle.
            </summary>
        </member>
        <member name="M:Box.Systems.Rect2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Represents a 2D rectangle defined by its position and size.
            </summary>
            <param name="x">The X-coordinate of the top-left corner.</param>
            <param name="y">The Y-coordinate of the top-left corner.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:Box.Systems.Rect2.#ctor(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Represents a 2D rectangle defined by its top-left corner position and dimensions.
            </summary>
            <param name="position">The top-left corner position of the rectangle.</param>
            <param name="size">The dimensions (width and height) of the rectangle.</param>
        </member>
        <member name="M:Box.Systems.Rect2.#ctor(Box.Systems.Rect2)">
            <summary>
            Represents a deep clone of a 2D rectangle defined by its top-left corner position and dimensions.
            </summary>
            <param name="value">The rectangle to deep clone.</param>
        </member>
        <member name="M:Box.Systems.Rect2.op_Equality(Box.Systems.Rect2,Box.Systems.Rect2)">
            <summary>
            Checks if two rectangles are equal.
            </summary>
            <param name="left">The left rectangle.</param>
            <param name="right">The right rectangle.</param>
            <returns>True if the rectangles are equal; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.op_Inequality(Box.Systems.Rect2,Box.Systems.Rect2)">
            <summary>
            Checks if two rectangles are not equal.
            </summary>
            <param name="left">The left rectangle.</param>
            <param name="right">The right rectangle.</param>
            <returns>True if the rectangles are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.op_Addition(Box.Systems.Rect2,Box.Systems.Vect2)">
            <summary>
            Expands the rectangles.
            </summary>
            <param name="left">The rectangle to expand.</param>
            <param name="right">The vector to add.</param>
            <returns>The expanded rectangle.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.op_Subtraction(Box.Systems.Rect2,Box.Systems.Vect2)">
            <summary>
            Shrinks the rectangles.
            </summary>
            <param name="left">The rectangle to shrink.</param>
            <param name="right">The vector to subtract.</param>
            <returns>The shrunk rectangle.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.op_GreaterThan(Box.Systems.Rect2,Box.Systems.Rect2)">
            <summary>
            Determines whether the area of the left rectangle is greater than the area of the right rectangle.
            </summary>
            <param name="left">The left rectangle to compare.</param>
            <param name="right">The right rectangle to compare.</param>
            <returns>True if the area of the left rectangle is greater than the area of the right rectangle; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.op_LessThan(Box.Systems.Rect2,Box.Systems.Rect2)">
            <summary>
            Determines whether the area of the left rectangle is less than the area of the right rectangle.
            </summary>
            <param name="left">The left rectangle to compare.</param>
            <param name="right">The right rectangle to compare.</param>
            <returns>True if the area of the left rectangle is less than the area of the right rectangle; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.op_GreaterThanOrEqual(Box.Systems.Rect2,Box.Systems.Rect2)">
            <summary>
            Determines whether the area of the left rectangle is greater than or equal to the area of the right rectangle.
            </summary>
            <param name="left">The left rectangle to compare.</param>
            <param name="right">The right rectangle to compare.</param>
            <returns>True if the area of the left rectangle is greater than or equal to the area of the right rectangle; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.op_LessThanOrEqual(Box.Systems.Rect2,Box.Systems.Rect2)">
            <summary>
            Determines whether the area of the left rectangle is less than or equal to the area of the right rectangle.
            </summary>
            <param name="left">The left rectangle to compare.</param>
            <param name="right">The right rectangle to compare.</param>
            <returns>True if the area of the left rectangle is less than or equal to the area of the right rectangle; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.Area">
            <summary>
            Calculates the area of the rectangle.
            </summary>
            <returns>The area of the rectangle.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.Area(Box.Systems.Rect2)">
            <summary>
            Calculates the area of a given rectangle.
            </summary>
            <param name="rectangle">The rectangle for which to calculate the area.</param>
            <returns>The area of the rectangle.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.Expand(System.Int32,System.Int32)">
            <summary>
            Expands or shrinks a rectangle.
            </summary>
            <param name="width">Positive value to expand the width, negative to shrink.</param>
            <param name="height">Positive value to expand the height, negative to shrink.</param>
            <returns>The expanded or shrunk rectangle.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.Expand(System.Single,System.Single)">
            <summary>
            Expands or shrinks a rectangle.
            </summary>
            <param name="width">Positive value to expand the width, negative to shrink.</param>
            <param name="height">Positive value to expand the height, negative to shrink.</param>
            <returns>The expanded or shrunk rectangle.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.Expand(Box.Systems.Rect2,Box.Systems.Vect2)">
            <summary>
            Expands or shrinks a rectangle by adding or subtracting values to its dimensions.
            </summary>
            <param name="rect">The rectangle to expand or shrink.</param>
            <param name="value">The values to expand or shrink the rectangle by.</param>
            <returns>The expanded or shrunk rectangle.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.Expand(Box.Systems.Rect2,System.Single,System.Single)">
            <summary>
            Expands or shrinks a rectangle.
            </summary>
            <param name="rect">The rectangle to expand or shrink.</param>
            <param name="width">Positive value to expand the width, negative to shrink.</param>
            <param name="height">Positive value to expand the height, negative to shrink.</param>
            <returns>The expanded or shrunk rectangle.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.Contains(System.Single,System.Single)">
            <summary>
            Checks if a point (x, y) is within the bounds of the rectangle.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
            <returns>True if the point is inside the rectangle; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.Contains(Box.Systems.Vect2)">
            <summary>
            Checks if a point defined by a vector is within the bounds of the rectangle.
            </summary>
            <param name="vector">The vector representing the point.</param>
            <returns>True if the point is inside the rectangle; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.Contains(Box.Systems.Rect2,Box.Systems.Vect2)">
            <summary>
            Checks if a point defined by a vector is within the bounds of the rectangle.
            </summary>
            <param name="rect">The rectangle to check.</param>
            <param name="vector">The vector representing the point.</param>
            <returns>True if the point is inside the rectangle; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.Contains(Box.Systems.Rect2,System.Single,System.Single)">
            <summary>
            Checks if a point (x, y) is within the bounds of the rectangle.
            </summary>
            <param name="rect">The rectangle to check.</param>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
            <returns>True if the point is inside the rectangle; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.Intersects(Box.Systems.Rect2)">
            <summary>
            Checks if this rectangle intersects with another rectangle.
            </summary>
            <param name="other">The other rectangle to check against.</param>
            <returns>True if this rectangle intersects with the other rectangle; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.Intersects(Box.Systems.Rect2,Box.Systems.Rect2)">
            <summary>
            Checks if two rectangles intersect.
            </summary>
            <param name="left">The first rectangle to check.</param>
            <param name="right">The second rectangle to check.</param>
            <returns>True if the rectangles intersect; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.Merge(Box.Systems.Rect2)">
            <summary>
            Merges this rectangle with another rectangle into a single larger rectangle that encompasses both.
            </summary>
            <param name="other">The other rectangle to merge with this one.</param>
            <returns>A new rectangle that represents the merged area of this rectangle and the input rectangle.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.Merge(Box.Systems.Rect2,Box.Systems.Rect2)">
            <summary>
            Merges two rectangles into a single larger rectangle that encompasses both.
            </summary>
            <param name="left">The first rectangle to merge.</param>
            <param name="right">The second rectangle to merge.</param>
            <returns>A new rectangle that represents the merged area of the input rectangles.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.Equals(Box.Systems.Rect2)">
            <summary>
            Determines whether this rectangle is equal to another rectangle.
            </summary>
            <param name="other">The rectangle to compare with this rectangle.</param>
            <returns>True if the rectangles are equal; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.Equals(System.Object)">
            <summary>
            Determines whether this rectangle is equal to another object.
            </summary>
            <param name="obj">The object to compare with this rectangle.</param>
            <returns>True if the object is a Rect2 and is equal to this rectangle; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.GetHashCode">
            <summary>
            Returns a hash code for this rectangle.
            </summary>
            <returns>A hash code for this rectangle.</returns>
        </member>
        <member name="M:Box.Systems.Rect2.ToString">
            <summary>
            Returns a string representation of this rectangle.
            </summary>
            <returns>A string representation of this rectangle.</returns>
        </member>
        <member name="T:Box.Systems.Vect2">
            <summary>
            Represents a 2D vector with X and Y components.
            </summary>
        </member>
        <member name="F:Box.Systems.Vect2.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
        </member>
        <member name="F:Box.Systems.Vect2.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
        </member>
        <member name="P:Box.Systems.Vect2.Zero">
            <summary>
            Vector with components (0, 0).
            </summary>
        </member>
        <member name="P:Box.Systems.Vect2.One">
            <summary>
            Vector with components (1, 1).
            </summary>
        </member>
        <member name="P:Box.Systems.Vect2.Up">
            <summary>
            Vector representing up direction (0, 1).
            </summary>
        </member>
        <member name="P:Box.Systems.Vect2.Right">
            <summary>
            Vector representing right direction (1, 0).
            </summary>
        </member>
        <member name="P:Box.Systems.Vect2.Down">
            <summary>
            Vector representing down direction (0, -1).
            </summary>
        </member>
        <member name="P:Box.Systems.Vect2.Left">
            <summary>
            Vector representing left direction (-1, 0).
            </summary>
        </member>
        <member name="P:Box.Systems.Vect2.IsZero">
            <summary>
            Vector is empty.
            </summary>
        </member>
        <member name="M:Box.Systems.Vect2.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a new Vect2 with the given X and Y components.
            </summary>
            <param name="x">The X component of the vector.</param>
            <param name="y">The Y component of the vector.</param>
        </member>
        <member name="M:Box.Systems.Vect2.#ctor(System.Single)">
            <summary>
            Constructs a new Vect2 with both components set to the same value.
            </summary>
            <param name="value">The value to set both X and Y components.</param>
        </member>
        <member name="M:Box.Systems.Vect2.#ctor(Box.Systems.Vect2)">
            <summary>
            Constructs a new Vect2 by copying another Vect2.
            </summary>
            <param name="value">The Vect2 to copy.</param>
        </member>
        <member name="M:Box.Systems.Vect2.op_Equality(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Overloaded equality operator for comparing two Vect2 objects.
            </summary>
            <param name="left">The left-hand side Vect2 object.</param>
            <param name="right">The right-hand side Vect2 object.</param>
            <returns>True if the two Vect2 objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_Inequality(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Overloaded inequality operator for comparing two Vect2 objects.
            </summary>
            <param name="left">The left-hand side Vect2 object.</param>
            <param name="right">The right-hand side Vect2 object.</param>
            <returns>True if the two Vect2 objects are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_UnaryNegation(Box.Systems.Vect2)">
            <summary>
            Unary negation operator for negating a Vect2 object.
            </summary>
            <param name="left">The Vect2 object to negate.</param>
            <returns>The negated Vect2 object.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_Subtraction(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Subtracts one Vect2 object from another Vect2 object.
            </summary>
            <param name="left">The Vect2 object from which to subtract.</param>
            <param name="right">The Vect2 object to subtract.</param>
            <returns>A new Vect2 object that is the result of subtracting <paramref name="right"/> from <paramref name="left"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_Subtraction(Box.Systems.Vect2,System.Single)">
            <summary>
            Subtracts a scalar value from each component of a Vect2 object.
            </summary>
            <param name="left">The Vect2 object.</param>
            <param name="right">The scalar value to subtract.</param>
            <returns>A new Vect2 object where each component is subtracted by <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_Subtraction(System.Single,Box.Systems.Vect2)">
            <summary>
            Subtracts each component of a Vect2 object from a scalar value.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The Vect2 object to subtract.</param>
            <returns>A new Vect2 object where each component is subtracted from <paramref name="left"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_Addition(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Adds two Vect2 objects together.
            </summary>
            <param name="left">The first Vect2 object.</param>
            <param name="right">The second Vect2 object.</param>
            <returns>A new Vect2 object that is the sum of <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_Addition(Box.Systems.Vect2,System.Single)">
            <summary>
            Adds a scalar value to each component of a Vect2 object.
            </summary>
            <param name="left">The Vect2 object.</param>
            <param name="right">The scalar value to add.</param>
            <returns>A new Vect2 object where each component is added by <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_Addition(System.Single,Box.Systems.Vect2)">
            <summary>
            Adds a Vect2 object to a scalar value.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The Vect2 object.</param>
            <returns>A new Vect2 object that is the sum of <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_Division(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Divides one Vect2 object by another Vect2 object component-wise.
            </summary>
            <param name="left">The Vect2 object dividend.</param>
            <param name="right">The Vect2 object divisor.</param>
            <returns>A new Vect2 object that is the result of dividing each component of <paramref name="left"/> by the corresponding component of <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_Division(Box.Systems.Vect2,System.Single)">
            <summary>
            Divides each component of a Vect2 object by a scalar value.
            </summary>
            <param name="left">The Vect2 object dividend.</param>
            <param name="right">The scalar value divisor.</param>
            <returns>A new Vect2 object where each component is divided by <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_Division(System.Single,Box.Systems.Vect2)">
            <summary>
            Divides a scalar value by each component of a Vect2 object.
            </summary>
            <param name="left">The scalar value dividend.</param>
            <param name="right">The Vect2 object divisor.</param>
            <returns>A new Vect2 object where each component is the result of dividing <paramref name="left"/> by the corresponding component of <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_Multiply(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Multiplies two Vect2 objects component-wise.
            </summary>
            <param name="left">The first Vect2 object.</param>
            <param name="right">The second Vect2 object.</param>
            <returns>A new Vect2 object that is the result of multiplying each component of <paramref name="left"/> by the corresponding component of <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_Multiply(Box.Systems.Vect2,System.Single)">
            <summary>
            Multiplies each component of a Vect2 object by a scalar value.
            </summary>
            <param name="left">The Vect2 object.</param>
            <param name="right">The scalar value to multiply.</param>
            <returns>A new Vect2 object where each component is multiplied by <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_Multiply(System.Single,Box.Systems.Vect2)">
            <summary>
            Multiplies a scalar value by each component of a Vect2 object.
            </summary>
            <param name="left">The scalar value to multiply.</param>
            <param name="right">The Vect2 object.</param>
            <returns>A new Vect2 object where each component is multiplied by <paramref name="left"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_LessThan(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Determines whether the first Vect2 object is less than the second Vect2 object.
            </summary>
            <param name="left">The first Vect2 object to compare.</param>
            <param name="right">The second Vect2 object to compare.</param>
            <returns>True if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_GreaterThan(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Determines whether the first Vect2 object is greater than the second Vect2 object.
            </summary>
            <param name="left">The first Vect2 object to compare.</param>
            <param name="right">The second Vect2 object to compare.</param>
            <returns>True if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_LessThanOrEqual(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Determines whether the first Vect2 object is less than or equal to the second Vect2 object.
            </summary>
            <param name="left">The first Vect2 object to compare.</param>
            <param name="right">The second Vect2 object to compare.</param>
            <returns>True if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.op_GreaterThanOrEqual(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Determines whether the first Vect2 object is greater than or equal to the second Vect2 object.
            </summary>
            <param name="left">The first Vect2 object to compare.</param>
            <param name="right">The second Vect2 object to compare.</param>
            <returns>True if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, false.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Add(Box.Systems.Vect2)">
            <summary>
            Adds another Vect2 to this Vect2 instance.
            </summary>
            <param name="other">The Vect2 to add to this instance.</param>
            <returns>A new Vect2 that is the sum of this instance and <paramref name="other"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Add(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Adds two Vect2 instances together.
            </summary>
            <param name="left">The first Vect2 instance.</param>
            <param name="right">The second Vect2 instance.</param>
            <returns>A new Vect2 that is the sum of <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Subtract(Box.Systems.Vect2)">
            <summary>
            Subtracts another Vect2 from this Vect2 instance.
            </summary>
            <param name="other">The Vect2 to subtract from this instance.</param>
            <returns>A new Vect2 that is the result of subtracting <paramref name="other"/> from this instance.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Subtract(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Subtracts one Vect2 instance from another Vect2 instance.
            </summary>
            <param name="left">The Vect2 instance from which to subtract.</param>
            <param name="right">The Vect2 instance to subtract.</param>
            <returns>A new Vect2 that is the result of subtracting <paramref name="right"/> from <paramref name="left"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Multiply(System.Single)">
            <summary>
            Multiplies this Vect2 instance by a scalar value.
            </summary>
            <param name="scaler">The scalar value to multiply this Vect2 instance.</param>
            <returns>A new Vect2 that is the result of multiplying this instance by <paramref name="scaler"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Multiply(Box.Systems.Vect2,System.Single)">
            <summary>
            Multiplies a Vect2 instance by a scalar value.
            </summary>
            <param name="vector">The Vect2 instance to multiply.</param>
            <param name="scalar">The scalar value to multiply by.</param>
            <returns>A new Vect2 that is the result of multiplying <paramref name="vector"/> by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Divide(System.Single)">
            <summary>
            Divides this Vect2 instance by a scalar value.
            </summary>
            <param name="scalar">The scalar value to divide this Vect2 instance.</param>
            <returns>A new Vect2 that is the result of dividing this instance by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Divide(Box.Systems.Vect2,System.Single)">
            <summary>
            Divides a Vect2 instance by a scalar value.
            </summary>
            <param name="vector">The Vect2 instance to divide.</param>
            <param name="scalar">The scalar value to divide by.</param>
            <returns>A new Vect2 that is the result of dividing <paramref name="vector"/> by <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Center(Box.Systems.Vect2,System.Boolean)">
            <summary>
            Calculates the center point between this Vect2 instance and another Vect2, optionally rounding the result.
            </summary>
            <param name="other">The other Vect2 instance to calculate the center with.</param>
            <param name="rounded">True to round the resulting center point; false to keep it exact.</param>
            <returns>A new Vect2 that represents the center point between this instance and <paramref name="other"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Center(Box.Systems.Vect2,Box.Systems.Vect2,System.Boolean)">
            <summary>
            Calculates the center point between two Vect2 instances, optionally rounding the result.
            </summary>
            <param name="left">The first Vect2 instance.</param>
            <param name="right">The second Vect2 instance.</param>
            <param name="rounded">True to round the resulting center point; false to keep it exact. Default is true.</param>
            <returns>A new Vect2 that represents the center point between <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Center(System.Single,System.Single,System.Boolean)">
            <summary>
            Calculates the center point between two float values, optionally rounding the result.
            </summary>
            <param name="left">The first float value.</param>
            <param name="right">The second float value.</param>
            <param name="rounded">True to round the resulting center point; false to keep it exact. Default is true.</param>
            <returns>The center point between <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Max(Box.Systems.Vect2)">
            <summary>
            Returns a new Vect2 that contains the maximum values from this Vect2 instance and another Vect2.
            </summary>
            <param name="other">The other Vect2 instance to compare with.</param>
            <returns>A new Vect2 where each component is the maximum of the corresponding components from this instance and <paramref name="other"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Max(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Returns a new Vect2 that contains the maximum values from two Vect2 instances.
            </summary>
            <param name="left">The first Vect2 instance to compare.</param>
            <param name="right">The second Vect2 instance to compare.</param>
            <returns>A new Vect2 where each component is the maximum of the corresponding components from <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Min(Box.Systems.Vect2)">
            <summary>
            Returns a new Vect2 that contains the minimum values from this Vect2 instance and another Vect2.
            </summary>
            <param name="other">The other Vect2 instance to compare with.</param>
            <returns>A new Vect2 where each component is the minimum of the corresponding components from this instance and <paramref name="other"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Min(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Returns a new Vect2 that contains the minimum values from two Vect2 instances.
            </summary>
            <param name="left">The first Vect2 instance to compare.</param>
            <param name="right">The second Vect2 instance to compare.</param>
            <returns>A new Vect2 where each component is the minimum of the corresponding components from <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Abs">
            <summary>
            Returns a new Vect2 that contains the absolute values of this Vect2 instance.
            </summary>
            <returns>A new Vect2 where each component is the absolute value of the corresponding component in this instance.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Abs(Box.Systems.Vect2)">
            <summary>
            Returns a new Vect2 that contains the absolute values of a Vect2 instance.
            </summary>
            <param name="value">The Vect2 instance to compute absolute values for.</param>
            <returns>A new Vect2 where each component is the absolute value of the corresponding component in <paramref name="value"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Floor">
            <summary>
            Returns a new Vect2 that contains the floor values of this Vect2 instance.
            </summary>
            <returns>A new Vect2 where each component is the floor value of the corresponding component in this instance.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Floor(Box.Systems.Vect2)">
            <summary>
            Returns a new Vect2 that contains the floor values of a Vect2 instance.
            </summary>
            <param name="value">The Vect2 instance to compute floor values for.</param>
            <returns>A new Vect2 where each component is the floor value of the corresponding component in <paramref name="value"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Ceiling">
            <summary>
            Returns a new Vect2 that contains the ceiling values of this Vect2 instance.
            </summary>
            <returns>A new Vect2 where each component is the ceiling value of the corresponding component in this instance.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Ceiling(Box.Systems.Vect2)">
            <summary>
            Returns a new Vect2 that contains the ceiling values of a Vect2 instance.
            </summary>
            <param name="value">The Vect2 instance to compute ceiling values for.</param>
            <returns>A new Vect2 where each component is the ceiling value of the corresponding component in <paramref name="value"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Clamp(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Returns a new Vect2 that is clamped between a minimum and maximum Vect2.
            </summary>
            <param name="min">The minimum Vect2 to clamp against.</param>
            <param name="max">The maximum Vect2 to clamp against.</param>
            <returns>A new Vect2 that is clamped between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Clamp(Box.Systems.Vect2,Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Returns a new Vect2 that is clamped between specified minimum and maximum Vect2 values.
            </summary>
            <param name="value">The Vect2 instance to clamp.</param>
            <param name="min">The minimum Vect2 to clamp against.</param>
            <param name="max">The maximum Vect2 to clamp against.</param>
            <returns>A new Vect2 that is clamped between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Direction(Box.Systems.Vect2,System.Boolean)">
            <summary>
            Computes the direction vector from this Vect2 instance to another Vect2.
            </summary>
            <param name="other">The target Vect2 to compute the direction towards.</param>
            <param name="normalized">True to return a normalized direction vector; false to return the raw direction vector. Default is true.</param>
            <returns>The direction Vect2 from this instance to <paramref name="other"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Direction(Box.Systems.Vect2,Box.Systems.Vect2,System.Boolean)">
            <summary>
            Computes the direction vector from one Vect2 instance to another.
            </summary>
            <param name="left">The starting Vect2 instance.</param>
            <param name="right">The target Vect2 instance.</param>
            <param name="normalized">True to return a normalized direction vector; false to return the raw direction vector. Default is true.</param>
            <returns>The direction Vect2 from <paramref name="left"/> to <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Normalized">
            <summary>
            Returns a new Vect2 that is the normalized version of this Vect2 instance.
            </summary>
            <returns>A new Vect2 that is the normalized version of this instance.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Normalized(System.Single,System.Single)">
            <summary>
            Calculates the normalized (unit) vector from the specified components.
            </summary>
            <param name="x">The x-component of the vector.</param>
            <param name="y">The y-component of the vector.</param>
            <returns>The normalized vector as a <see cref="T:Box.Systems.Vect2"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Normalized(Box.Systems.Vect2)">
            <summary>
            Returns a new Vect2 that is the normalized version of a Vect2 instance.
            </summary>
            <param name="value">The Vect2 instance to normalize.</param>
            <returns>A new Vect2 that is the normalized version of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Performs a linear interpolation between two Vect2 instances.
            </summary>
            <param name="left">The starting Vect2.</param>
            <param name="right">The ending Vect2.</param>
            <param name="amount">The interpolation amount. Should be between 0 and 1.</param>
            <returns>The interpolated Vect2.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Lerp(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs a linear interpolation between two float values.
            </summary>
            <param name="left">The starting value.</param>
            <param name="right">The ending value.</param>
            <param name="amount">The interpolation amount. Should be between 0 and 1.</param>
            <returns>The interpolated float value.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.LerpPercise(System.Single,System.Single,System.Single)">
            <summary>
            Performs a more precise linear interpolation between two Vect2 instances.
            </summary>
            <param name="left">The starting Vect2.</param>
            <param name="right">The ending Vect2.</param>
            <param name="amount">The interpolation amount. Should be between 0 and 1.</param>
            <returns>The interpolated Vect2.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.LerpPercise(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs a more precise linear interpolation between two float values.
            </summary>
            <param name="left">The starting value.</param>
            <param name="right">The ending value.</param>
            <param name="amount">The interpolation amount. Should be between 0 and 1.</param>
            <returns>The interpolated float value.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Distance(Box.Systems.Vect2)">
            <summary>
            Computes the Euclidean distance between this Vect2 instance and another Vect2.
            </summary>
            <param name="other">The other Vect2 to compute the distance to.</param>
            <returns>The Euclidean distance between this Vect2 and <paramref name="other"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Distance(System.Single,System.Single)">
            <summary>
            Computes the absolute difference between two float values.
            </summary>
            <param name="left">The first float value.</param>
            <param name="right">The second float value.</param>
            <returns>The absolute difference between <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Distance(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Computes the Euclidean distance between two Vect2 instances.
            </summary>
            <param name="left">The first Vect2 instance.</param>
            <param name="right">The second Vect2 instance.</param>
            <returns>The Euclidean distance between <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.MoveTowards(Box.Systems.Vect2,System.Single)">
            <summary>
            Moves this Vect2 instance towards another Vect2 instance by a specified delta amount for each component.
            </summary>
            <param name="other">The target Vect2 instance to move towards.</param>
            <param name="delta">The maximum amount to move towards the target for each component.</param>
            <returns>A new Vect2 instance moved towards the target by the delta amount for each component.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.MoveTowards(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Moves a Vect2 instance towards a target Vect2 instance by a specified delta amount for each component.
            </summary>
            <param name="current">The current Vect2 instance to be moved.</param>
            <param name="target">The target Vect2 instance to move towards.</param>
            <param name="delta">The maximum amount to move towards the target for each component.</param>
            <returns>A new Vect2 instance moved towards the target by the delta amount for each component.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.MoveTowards(System.Single,System.Single,System.Single)">
            <summary>
            Moves current value towards the target value by a specified delta amount.
            </summary>
            <param name="current">The current value to be moved.</param>
            <param name="target">The target value to move towards.</param>
            <param name="delta">The maximum amount to move towards the target.</param>
            <returns>The new value moved towards the target by the delta amount.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.DistanceSquared(Box.Systems.Vect2)">
            <summary>
            Calculates the squared Euclidean distance between this Vect2 instance and another Vect2 instance.
            </summary>
            <param name="other">The other Vect2 instance to calculate the distance to.</param>
            <returns>The squared Euclidean distance between this Vect2 and <paramref name="other"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.DistanceSquared(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Calculates the squared Euclidean distance between two Vect2 instances.
            </summary>
            <param name="left">The first Vect2 instance.</param>
            <param name="right">The second Vect2 instance.</param>
            <returns>The squared Euclidean distance between <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Length">
            <summary>
            Calculates the Euclidean length (magnitude) of this Vect2 instance.
            </summary>
            <returns>The Euclidean length (magnitude) of this Vect2.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Length(System.Single,System.Single)">
            <summary>
            Calculates the Euclidean length (magnitude) of a vector defined by its x and y components.
            </summary>
            <param name="x">The x-component of the vector.</param>
            <param name="y">The y-component of the vector.</param>
            <returns>The Euclidean length (magnitude) of the vector.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Length(Box.Systems.Vect2)">
            <summary>
            Calculates the Euclidean length (magnitude) of a Vect2 instance.
            </summary>
            <param name="value">The Vect2 instance.</param>
            <returns>The Euclidean length (magnitude) of the Vect2.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.LengthSquared">
            <summary>
            Calculates the squared Euclidean length (magnitude) of this Vect2 instance.
            </summary>
            <returns>The squared Euclidean length (magnitude) of this Vect2.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.LengthSquared(System.Single,System.Single)">
            <summary>
            Calculates the squared Euclidean length (magnitude) of a vector defined by its x and y components.
            </summary>
            <param name="x">The x-component of the vector.</param>
            <param name="y">The y-component of the vector.</param>
            <returns>The squared Euclidean length (magnitude) of the vector.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.LengthSquared(Box.Systems.Vect2)">
            <summary>
            Calculates the squared Euclidean length (magnitude) of a Vect2 instance.
            </summary>
            <param name="value">The Vect2 instance.</param>
            <returns>The squared Euclidean length (magnitude) of the Vect2.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Dot(Box.Systems.Vect2)">
            <summary>
            Computes the dot product of this Vect2 instance with another Vect2.
            </summary>
            <param name="other">The other Vect2 instance.</param>
            <returns>The dot product of this Vect2 with the other Vect2.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Dot(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Computes the dot product of two Vect2 instances.
            </summary>
            <param name="a">The first Vect2.</param>
            <param name="b">The second Vect2.</param>
            <returns>The dot product of the two Vect2 instances.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Reflect(Box.Systems.Vect2)">
            <summary>
            Reflects this Vect2 instance off the given normal vector.
            </summary>
            <param name="normal">The normal vector.</param>
            <returns>The reflected vector.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Reflect(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Reflects a vector off the given normal vector.
            </summary>
            <param name="vector">The vector to reflect.</param>
            <param name="normal">The normal vector.</param>
            <returns>The reflected vector.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Transform(Box.Systems.Vect2,Box.Systems.Camera)">
            <summary>
            Transforms a Vect2 position using a specified camera's transformation.
            </summary>
            <param name="position">The position to transform.</param>
            <param name="camera">The camera used for transformation.</param>
            <returns>The transformed Vect2 position.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Transform(System.Single,System.Single,Box.Systems.Camera)">
            <summary>
            Transforms coordinates (x, y) using a specified camera's transformation.
            </summary>
            <param name="x">The x-coordinate to transform.</param>
            <param name="y">The y-coordinate to transform.</param>
            <param name="camera">The camera used for transformation.</param>
            <returns>The transformed Vect2 position.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.LookAt(Box.Systems.Vect2,Box.Systems.Vect2)">
            <summary>
            Calculates the angle in radians from the left Vect2 towards the right Vect2.
            </summary>
            <param name="left">The starting Vect2 position.</param>
            <param name="right">The target Vect2 position.</param>
            <returns>The angle in radians from the left Vect2 towards the right Vect2.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.AngleTo(System.Single,System.Boolean)">
            <summary>
            Converts an angle in radians to a normalized or non-normalized Vect2 direction vector.
            </summary>
            <param name="rotation">The angle in radians.</param>
            <param name="normalized">Whether to normalize the resulting direction vector (default true).</param>
            <returns>A Vect2 direction vector corresponding to the angle.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.WrapAngle(System.Single)">
            <summary>
            Wraps an angle in radians to the range [-π, π].
            </summary>
            <param name="radians">The angle in radians to wrap.</param>
            <returns>The wrapped angle in radians.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.TurnToFace(Box.Systems.Vect2,System.Single,Box.Systems.Vect2,System.Single)">
            <summary>
            Adjusts the current rotation towards a target direction using a specified turn speed.
            </summary>
            <param name="target">The position of the target to face.</param>
            <param name="targetRotation">The current rotation angle towards the target.</param>
            <param name="child">The position of the object or child that needs to face the target.</param>
            <param name="turnSpeed">The maximum turn speed in radians per frame.</param>
            <returns>The adjusted rotation angle towards the target after applying turn speed limits.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.To2D(System.Single,System.Single)">
            <summary>
            Converts a 1-dimensional index to a 2-dimensional coordinate within a grid of specified size.
            </summary>
            <param name="index">The 1-dimensional index.</param>
            <param name="size">The size of the grid in one dimension.</param>
            <returns>A 2-dimensional vector representing the coordinates in the grid.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.To2D(System.Int32,System.Single)">
            <summary>
            Converts a 1-dimensional index to a 2-dimensional coordinate within a grid of specified size.
            </summary>
            <param name="index">The 1-dimensional index.</param>
            <param name="size">The size of the grid in one dimension.</param>
            <returns>A 2-dimensional vector representing the coordinates in the grid.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.To2D(System.Int32,System.Int32)">
            <summary>
            Converts a 1-dimensional index to a 2-dimensional coordinate within a grid of specified size.
            </summary>
            <param name="index">The 1-dimensional index.</param>
            <param name="size">The size of the grid in both dimensions.</param>
            <returns>A 2-dimensional vector representing the coordinates in the grid.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.To1D(Box.Systems.Vect2,System.Single)">
            <summary>
            Converts a 2-dimensional coordinate to a 1-dimensional index within a grid of specified size.
            </summary>
            <param name="location">The 2-dimensional coordinate.</param>
            <param name="size">The size of the grid in one dimension.</param>
            <returns>A 1-dimensional index representing the position in the grid.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.To1D(Box.Systems.Vect2,System.Int32)">
            <summary>
            Converts a 2-dimensional coordinate to a 1-dimensional index within a grid of specified size.
            </summary>
            <param name="location">The 2-dimensional coordinate.</param>
            <param name="size">The size of the grid in one dimension.</param>
            <returns>A 1-dimensional index representing the position in the grid.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Round">
            <summary>
            Rounds the components of this vector to the nearest integer values.
            </summary>
            <returns>A new vector with rounded components.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Round(System.Int32)">
            <summary>
            Rounds the components of this vector to the nearest integer values.
            </summary>
            <param name="digits">The number of decimal places to round to.</param>
            <returns>A new vector with rounded components.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Round(Box.Systems.Vect2)">
            <summary>
            Rounds the components of the specified vector to the nearest integer values.
            </summary>
            <param name="value">The vector to round.</param>
            <returns>A new vector with rounded components.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Round(Box.Systems.Vect2,System.Int32)">
            <summary>
            Rounds the components of the specified vector to the specified number of decimal places.
            </summary>
            <param name="value">The vector to round.</param>
            <param name="digits">The number of decimal places to round to.</param>
            <returns>A new vector with rounded components.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.Equals(Box.Systems.Vect2)">
            <summary>
            Determines whether this vector is equal to another vector.
            </summary>
            <param name="other">The vector to compare with this vector.</param>
        </member>
        <member name="M:Box.Systems.Vect2.Equals(System.Object)">
            <summary>
            Compares this vector with another vector for sorting purposes.
            </summary>
            <param name="obj">The vector to compare with this vector.</param>
            <returns>A negative integer, zero, or a positive integer indicating whether this vector is less than, equal to, or greater than the other vector.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.GetHashCode">
            <summary>
            Computes a hash code based on the X and Y components of the vector.
            </summary>
            <returns>A hash code representing the current Vect2 instance.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.ToString">
            <summary>
            Gets a string representation of this vector.
            </summary>
            <returns>A string that represents this vector.</returns>
        </member>
        <member name="M:Box.Systems.Vect2.CompareTo(Box.Systems.Vect2)">
            <summary>
            Compares this Vect2 instance with another Vect2 instance based on their X and Y components.
            <para>- Returns a negative integer if this instance is less than the other instance.</para>
            <para>- Returns zero if this instance is equal to the other instance.</para>
            <para>- Returns a positive integer if this instance is greater than the other instance.</para>
            </summary>
            <param name="other">The Vect2 instance to compare with this instance.</param>
            <returns>An integer that indicates the relative order of the instances.</returns>
        </member>
        <member name="T:Box.Utils.Easing">
            <summary>
            Provides static methods to perform easing functions for interpolating numerical and Vector2 values.
            Easing functions modify the rate of change of a value over time, allowing smooth transitions
            between different states in animations or transitions.
            </summary>
        </member>
        <member name="M:Box.Utils.Easing.Ease(Box.Enums.EaseType,System.Single,System.Single,System.Single)">
            <summary>
            Computes an eased interpolation between two values based on the specified easing type over time.
            </summary>
            <param name="type">The type of easing function to use.</param>
            <param name="from">The starting value.</param>
            <param name="to">The target value.</param>
            <param name="time">The total time of the easing process.</param>
            <returns>The eased interpolation result between <paramref name="from"/> and <paramref name="to"/> at the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Box.Utils.Easing.Ease(Box.Enums.EaseType,Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Computes an eased interpolation between two Vect2 values based on the specified easing type over time.
            </summary>
            <param name="type">The type of easing function to use.</param>
            <param name="from">The starting Vect2 value.</param>
            <param name="to">The target Vect2 value.</param>
            <param name="time">The total time of the easing process.</param>
            <returns>The eased interpolation result between <paramref name="from"/> and <paramref name="to"/> at the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Box.Utils.Easing.Linear(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between two float values.
            </summary>
            <param name="from">The starting value.</param>
            <param name="to">The target value.</param>
            <param name="time">The interpolation parameter. Should be between 0 and 1.</param>
            <returns>The interpolated value between <paramref name="from"/> and <paramref name="to"/> at the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Box.Utils.Easing.Linear(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Linearly interpolates between two float values.
            </summary>
            <param name="from">The starting value.</param>
            <param name="to">The target value.</param>
            <param name="time">The interpolation parameter. Should be between 0 and 1.</param>
            <returns>The interpolated value between <paramref name="from"/> and <paramref name="to"/> at the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuadIn(System.Single,System.Single,System.Single)">
            <summary>
            Eases in using a quadratic function.
            </summary>
            <param name="from">The starting value.</param>
            <param name="to">The target value.</param>
            <param name="time">The interpolation parameter. Should be between 0 and 1.</param>
            <returns>The eased-in value between <paramref name="from"/> and <paramref name="to"/> at the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuadIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Eases in using a quadratic function.
            </summary>
            <param name="from">The starting value.</param>
            <param name="to">The target value.</param>
            <param name="time">The interpolation parameter. Should be between 0 and 1.</param>
            <returns>The eased-in value between <paramref name="from"/> and <paramref name="to"/> at the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuadOut(System.Single,System.Single,System.Single)">
            <summary>
            Eases out using a quadratic function.
            </summary>
            <param name="from">The starting value.</param>
            <param name="to">The target value.</param>
            <param name="time">The interpolation parameter. Should be between 0 and 1.</param>
            <returns>The eased-out value between <paramref name="from"/> and <paramref name="to"/> at the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuadOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Eases out using a quadratic function.
            </summary>
            <param name="from">The starting value.</param>
            <param name="to">The target value.</param>
            <param name="time">The interpolation parameter. Should be between 0 and 1.</param>
            <returns>The eased-out value between <paramref name="from"/> and <paramref name="to"/> at the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuadInOut(System.Single,System.Single,System.Single)">
            <summary>
            Eases in and out using a quadratic function.
            </summary>
            <param name="from">The starting value.</param>
            <param name="to">The target value.</param>
            <param name="time">The interpolation parameter. Should be between 0 and 1.</param>
            <returns>The eased value between <paramref name="from"/> and <paramref name="to"/> at the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuadInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Eases in and out using a quadratic function.
            </summary>
            <param name="from">The starting value.</param>
            <param name="to">The target value.</param>
            <param name="time">The interpolation parameter. Should be between 0 and 1.</param>
            <returns>The eased value between <paramref name="from"/> and <paramref name="to"/> at the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuadOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Eases out and in using a quadratic function.
            </summary>
            <param name="from">The starting value.</param>
            <param name="to">The target value.</param>
            <param name="time">The interpolation parameter. Should be between 0 and 1.</param>
            <returns>The eased value between <paramref name="from"/> and <paramref name="to"/> at the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuadOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Eases out and in using a quadratic function.
            </summary>
            <param name="from">The starting value.</param>
            <param name="to">The target value.</param>
            <param name="time">The interpolation parameter. Should be between 0 and 1.</param>
            <returns>The eased value between <paramref name="from"/> and <paramref name="to"/> at the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Box.Utils.Easing.CubicIn(System.Single,System.Single,System.Single)">
            <summary>
            Eases in using a cubic function.
            </summary>
            <param name="from">The starting value.</param>
            <param name="to">The target value.</param>
            <param name="time">The interpolation parameter. Should be between 0 and 1.</param>
            <returns>The eased value between <paramref name="from"/> and <paramref name="to"/> at the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Box.Utils.Easing.CubicIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Eases in using a cubic function.
            </summary>
            <param name="from">The starting value.</param>
            <param name="to">The target value.</param>
            <param name="time">The interpolation parameter. Should be between 0 and 1.</param>
            <returns>The eased value between <paramref name="from"/> and <paramref name="to"/> at the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Box.Utils.Easing.CubicOut(System.Single,System.Single,System.Single)">
            <summary>
            Eases out using a cubic function.
            </summary>
            <param name="from">The starting value.</param>
            <param name="to">The target value.</param>
            <param name="time">The interpolation parameter. Should be between 0 and 1.</param>
            <returns>The eased value between <paramref name="from"/> and <paramref name="to"/> at the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Box.Utils.Easing.CubicOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Eases out using a cubic function.
            </summary>
            <param name="from">The starting value.</param>
            <param name="to">The target value.</param>
            <param name="time">The interpolation parameter. Should be between 0 and 1.</param>
            <returns>The eased value between <paramref name="from"/> and <paramref name="to"/> at the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Box.Utils.Easing.CubicInOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs cubic easing in-out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.CubicInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs cubic easing in-out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.CubicOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs cubic easing out-in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.CubicOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs cubic easing out-in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuartIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs quartic easing in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuartIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs quartic easing in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuartOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs quartic easing out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuartOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs quartic easing out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuartInOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs quartic easing in-out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuartInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs quartic easing in-out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuartOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs quartic easing out-in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuartOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs quartic easing out-in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuintIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs quintic easing in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuintIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs quintic easing in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuintOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs quintic easing out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuintOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs quintic easing out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuintInOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs quintic easing in-out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuintInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs quintic easing in-out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuintOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs quintic easing out-in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.QuintOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs quintic easing out-in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.SineIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs sine easing in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.SineIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs sine easing in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.SineOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs sine easing out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.SineOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs sine easing out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.SineInOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs sine easing in-out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.SineInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs sine easing in-out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.SineOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs sine easing out-in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.SineOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs sine easing out-in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.ExpoIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs exponential easing in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.ExpoIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs exponential easing in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.ExpoOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs exponential easing out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.ExpoOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs exponential easing out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.ExpoInOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs exponential easing in-out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.ExpoInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs exponential easing in-out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.ExpoOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs exponential easing out-in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.ExpoOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs exponential easing out-in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.CircIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs circular easing in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.CircIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs circular easing in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.CircOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs circular easing out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.CircOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs circular easing out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.CircInOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs circular easing in-out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.CircInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs circular easing in-out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.CircOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs circular easing out-in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.CircOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs circular easing out-in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.ElasticIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs elastic easing in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.ElasticIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs elastic easing in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.ElasticOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs elastic easing out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.ElasticOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs elastic easing out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.ElasticInOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs elastic easing in-out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.ElasticInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs elastic easing in-out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.ElasticOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs elastic easing out-in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.ElasticOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs elastic easing out-in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.BackIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs back easing in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.BackIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs back easing in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.BackOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs back easing out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.BackOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs back easing out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.BackInOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs back easing in-out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.BackInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs back easing in-out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.BackOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs back easing out-in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.BackOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs back easing out-in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.BounceIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs bounce easing in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.BounceIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs bounce easing in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.BounceOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs bounce easing out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.BounceOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs bounce easing out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.BounceInOut(System.Single,System.Single,System.Single)">
            <summary>
            Performs bounce easing in-out interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.BounceInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs bounce easing in-out interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.BounceOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Performs bounce easing out-in interpolation between two float values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated float value.</returns>
        </member>
        <member name="M:Box.Utils.Easing.BounceOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single)">
            <summary>
            Performs bounce easing out-in interpolation between two Vect2 values.
            </summary>
            <param name="from">Starting value.</param>
            <param name="to">Target value.</param>
            <param name="time">Interpolation time (normalized, typically 0 to 1).</param>
            <returns>Interpolated Vect2 value.</returns>
        </member>
        <member name="T:Box.Utils.Rand">
            <summary>
            Provides fast random number generation.
            </summary>
        </member>
        <member name="P:Box.Utils.Rand.Instance">
            <summary>
            Gets the instance of the Rand class for accessing fast random number generation.
            </summary>
        </member>
        <member name="M:Box.Utils.Rand.#ctor">
            <summary>
            Initialises a new instance using time dependent seed.
            </summary>
        </member>
        <member name="M:Box.Utils.Rand.Reinitialise(System.Int32)">
            <summary>
            Reinitialises using an int value as a seed.
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:Box.Utils.Rand.Integer">
            <summary>
            Generates a random int over the range 0 to int.MaxValue-1.
            MaxValue is not generated in order to remain functionally equivalent to System.Random.Next().
            This does slightly eat into some of the performance gain over System.Random, but not much.
            For better performance see:
            
            Call NextInt() for an int over the range 0 to int.MaxValue.
            
            Call NextUInt() and cast the result to an int to generate an int over the full Int32 value range
            including negative values. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Box.Utils.Rand.Integer(System.Int32)">
            <summary>
            Generates a random int over the range 0 to upperBound-1, and not including upperBound.
            </summary>
            <param name="upperBound"></param>
            <returns></returns>
        </member>
        <member name="M:Box.Utils.Rand.Integer(System.Int32,System.Int32)">
            <summary>
            Generates a random int over the range lowerBound to upperBound-1, and not including upperBound.
            upperBound must be >= lowerBound. lowerBound may be negative.
            </summary>
            <param name="lowerBound"></param>
            <param name="upperBound"></param>
            <returns></returns>
        </member>
        <member name="M:Box.Utils.Rand.Double">
            <summary>
            Generates a random double. Values returned are from 0.0 up to but not including 1.0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Box.Utils.Rand.Float">
            <summary>
            Generates a random float value between 0 (inclusive) and 1 (exclusive).
            </summary>
            <returns>A random float value.</returns>
        </member>
        <member name="M:Box.Utils.Rand.Float(System.Single,System.Single)">
            <summary>
            Generates a random float value within the specified range.
            </summary>
            <param name="min">The inclusive minimum value of the range.</param>
            <param name="max">The exclusive maximum value of the range.</param>
            <returns>A random float value within the specified range.</returns>
        </member>
        <member name="M:Box.Utils.Rand.Bytes(System.Byte[])">
            <summary>
            Fills the provided byte array with random bytes.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Box.Utils.Rand.UInteger">
            <summary>
            Generates a uint. Values returned are over the full range of a uint, 
            uint.MinValue to uint.MaxValue, inclusive.
            
            This is the fastest method for generating a single random number because the underlying
            random number generator algorithm generates 32 random bits that can be cast directly to 
            a uint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Box.Utils.Rand.Boolean">
            <summary>
            Generates a single random bit.
            This method's performance is improved by generating 32 bits in one operation and storing them
            ready for future calls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Box.Utils.Rand.Byte">
            <summary>
            Generates a random byte value.
            </summary>
            <returns>A random byte value.</returns>
        </member>
        <member name="M:Box.Utils.Rand.Range(System.Single,System.Single)">
            <summary>
            Generates a random float value between <paramref name="min"/> and <paramref name="max"/>, inclusive.
            </summary>
            <param name="min">The inclusive minimum value of the range.</param>
            <param name="max">The inclusive maximum value of the range.</param>
            <returns>A random float value in the range [min, max], including both ends.</returns>
        </member>
        <member name="M:Box.Utils.Rand.Range(System.Int32,System.Int32)">
            <summary>
            Generates a random double value between <paramref name="min"/> and <paramref name="max"/>, inclusive.
            </summary>
            <param name="min">The inclusive minimum value of the range.</param>
            <param name="max">The inclusive maximum value of the range.</param>
            <returns>A random double value in the range [min, max], including both ends.</returns>
        </member>
        <member name="M:Box.Utils.Rand.Range(System.Double,System.Double)">
            <summary>
            Generates a random double value within the specified range.
            </summary>
            <param name="min">The inclusive minimum value of the range.</param>
            <param name="max">The exclusive maximum value of the range.</param>
            <returns>A random double value within the specified range.</returns>
        </member>
        <member name="T:Box.Utils.Ranges.FloatRange">
            <summary>
            Represents a floating-point range with a current clamped value between Min and Max.
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.FloatRange.Zero">
            <summary>
            Gets a <see cref="T:Box.Utils.Ranges.FloatRange"/> instance with all values (Min, Max, and Value) set to zero.
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.FloatRange.IsZero">
            <summary>
            Gets a value indicating whether the <see cref="T:Box.Utils.Ranges.FloatRange"/> has Min, Max, and Value all equal to zero.
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.FloatRange.Min">
            <summary>
            The minimum value of the range.
            If set greater than Max, Max is adjusted to match.
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.FloatRange.Max">
            <summary>
            The maximum value of the range.
            If set less than Min, Min is adjusted to match.
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.FloatRange.Value">
            <summary>
            The current value, automatically clamped between Min and Max.
            </summary>
        </member>
        <member name="M:Box.Utils.Ranges.FloatRange.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new FloatRange with the specified value, minimum, and maximum.
            </summary>
            <param name="value">Initial value (will be clamped).</param>
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
        </member>
        <member name="M:Box.Utils.Ranges.FloatRange.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new FloatRange with a value and maximum. Min is assumed to be 0.
            </summary>
            <param name="value">Initial value.</param>
            <param name="max">Maximum value.</param>
        </member>
        <member name="M:Box.Utils.Ranges.FloatRange.#ctor(System.Single)">
            <summary>
            Initializes a new FloatRange with Min = 0, Max = Value = value.
            </summary>
            <param name="value">Initial value used as both Max and Value.</param>
        </member>
        <member name="P:Box.Utils.Ranges.FloatRange.Sum">
            <summary>
            Returns the sum of Min and Max. Rarely used.
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.FloatRange.Total">
            <summary>
            Returns the total size of the range (Max - Min).
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.FloatRange.Percent">
            <summary>
            Returns the normalized percent (0 to 1) of the current Value within the range.
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.FloatRange.AtStart">
            <summary>
            True if Value is at or below Min.
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.FloatRange.AtEnd">
            <summary>
            True if Value is at or above Max.
            </summary>
        </member>
        <member name="M:Box.Utils.Ranges.FloatRange.Clamp(System.Single)">
            <summary>
            Clamps the given value to the current Min and Max range.
            </summary>
            <param name="value">The value to clamp.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Box.Utils.Ranges.FloatRange.Random">
            <summary>
            Returns a random float between Min and Max using the global Rand instance.
            </summary>
        </member>
        <member name="M:Box.Utils.Ranges.FloatRange.ToString">
            <summary>
            Returns a string representation of the range and current value.
            </summary>
        </member>
        <member name="T:Box.Utils.Ranges.IntRange">
            <summary>
            Represents an integer range with a current clamped value between Min and Max.
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.IntRange.Zero">
            <summary>
            Gets a <see cref="T:Box.Utils.Ranges.IntRange"/> instance with all values (Min, Max, and Value) set to zero.
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.IntRange.IsZero">
            <summary>
            Gets a value indicating whether the <see cref="T:Box.Utils.Ranges.IntRange"/> has Min, Max, and Value all equal to zero.
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.IntRange.Min">
            <summary>
            The minimum value of the range.
            If set greater than Max, Max is adjusted to match.
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.IntRange.Max">
            <summary>
            The maximum value of the range.
            If set less than Min, Min is adjusted to match.
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.IntRange.Value">
            <summary>
            The current value, automatically clamped between Min and Max.
            </summary>
        </member>
        <member name="M:Box.Utils.Ranges.IntRange.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new IntRange with the specified value, minimum, and maximum.
            </summary>
            <param name="value">Initial value (will be clamped).</param>
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
        </member>
        <member name="M:Box.Utils.Ranges.IntRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new IntRange with a value and maximum. Min is assumed to be 0.
            </summary>
            <param name="value">Initial value.</param>
            <param name="max">Maximum value.</param>
        </member>
        <member name="M:Box.Utils.Ranges.IntRange.#ctor(System.Int32)">
            <summary>
            Initializes a new IntRange with Min = 0, Max = Value = value.
            </summary>
            <param name="value">Initial value used as both Max and Value.</param>
        </member>
        <member name="P:Box.Utils.Ranges.IntRange.Sum">
            <summary>
            Returns the sum of Min and Max. Rarely used.
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.IntRange.Total">
            <summary>
            Returns the total size of the range (Max - Min).
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.IntRange.Percent">
            <summary>
            Returns the normalized percent (0 to 1) of the current Value within the range.
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.IntRange.AtStart">
            <summary>
            True if Value is at or below Min.
            </summary>
        </member>
        <member name="P:Box.Utils.Ranges.IntRange.AtEnd">
            <summary>
            True if Value is at or above Max.
            </summary>
        </member>
        <member name="M:Box.Utils.Ranges.IntRange.Clamp(System.Int32)">
            <summary>
            Clamps the given value to the current Min and Max range.
            </summary>
            <param name="value">The value to clamp.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Box.Utils.Ranges.IntRange.Random">
            <summary>
            Returns a random integer between Min and Max using the global Rand instance.
            </summary>
        </member>
        <member name="M:Box.Utils.Ranges.IntRange.ToString">
            <summary>
            Returns a string representation of the range and current value.
            </summary>
        </member>
        <member name="T:Box.Utils.Tables.DropEntry">
            <summary>
            Represents a single drop entry in a drop table, including item ID, drop chance, and quantity range.
            </summary>
        </member>
        <member name="P:Box.Utils.Tables.DropEntry.ItemId">
            <summary>
            Gets the ID of the item to be dropped.
            </summary>
        </member>
        <member name="P:Box.Utils.Tables.DropEntry.Chance">
            <summary>
            Gets the chance (0 to 1) for this item to drop.
            </summary>
        </member>
        <member name="P:Box.Utils.Tables.DropEntry.MinAmount">
            <summary>
            Gets the minimum amount of the item to drop.
            </summary>
        </member>
        <member name="P:Box.Utils.Tables.DropEntry.MaxAmount">
            <summary>
            Gets the maximum amount of the item to drop.
            </summary>
        </member>
        <member name="M:Box.Utils.Tables.DropEntry.#ctor(System.String,System.Single,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Box.Utils.Tables.DropEntry"/> struct.
            </summary>
            <param name="itemId">The ID of the item to drop.</param>
            <param name="chance">The drop chance, clamped between 0 and 1.</param>
            <param name="min">The minimum quantity to drop. Must not be greater than <paramref name="max"/>.</param>
            <param name="max">The maximum quantity to drop.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="min"/> is greater than <paramref name="max"/>.
            </exception>
        </member>
        <member name="T:Box.Utils.Tables.DropEntryResult">
            <summary>
            Represents the result of a drop roll, including the item ID and quantity.
            </summary>
        </member>
        <member name="P:Box.Utils.Tables.DropEntryResult.ItemId">
            <summary>
            Gets the ID of the dropped item.
            </summary>
        </member>
        <member name="P:Box.Utils.Tables.DropEntryResult.Count">
            <summary>
            Gets the quantity of the dropped item.
            </summary>
        </member>
        <member name="M:Box.Utils.Tables.DropEntryResult.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Box.Utils.Tables.DropEntryResult"/> struct.
            </summary>
            <param name="itemId">The ID of the dropped item.</param>
            <param name="count">The quantity of the dropped item. Must be greater than zero.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="count"/> is less than 1.
            </exception>
        </member>
        <member name="T:Box.Utils.Tables.DropTable">
            <summary>
            Represents a loot table containing multiple drop entries that can be rolled to produce loot results.
            </summary>
        </member>
        <member name="M:Box.Utils.Tables.DropTable.Add(Box.Utils.Tables.DropEntry)">
            <summary>
            Adds a new drop entry to the drop table.
            </summary>
            <param name="entry">The <see cref="T:Box.Utils.Tables.DropEntry"/> to add to the drop table.</param>
        </member>
        <member name="M:Box.Utils.Tables.DropTable.Add(System.String,System.Single,System.Int32,System.Int32)">
            <summary>
            Adds a new drop entry to the table.
            </summary>
            <param name="itemId">The ID of the item to drop.</param>
            <param name="chance">The chance for the item to drop (0 to 1).</param>
            <param name="min">The minimum quantity to drop.</param>
            <param name="max">The maximum quantity to drop.</param>
        </member>
        <member name="M:Box.Utils.Tables.DropTable.Add(Box.Utils.Tables.DropEntry[])">
            <summary>
            Adds a range of drop entries to the table.
            </summary>
            <param name="entries">The array of drop entries to add.</param>
        </member>
        <member name="M:Box.Utils.Tables.DropTable.RollLoot">
            <summary>
            Rolls the drop table and returns a list of items that were successfully dropped.
            </summary>
            <returns>A list of <see cref="T:Box.Utils.Tables.DropEntryResult"/> representing the dropped items.</returns>
        </member>
        <member name="T:Box.Utils.Tables.TableDirectory`1">
            <summary>
            A utility class that maps enum keys to snake_case string identifiers.
            </summary>
        </member>
        <member name="P:Box.Utils.Tables.TableDirectory`1.Item(`0)">
            <summary>
            Gets the string identifier associated with the specified enum key.
            </summary>
            <param name="key">The enum key.</param>
            <returns>The snake_case string associated with the key.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the key does not exist in the directory.</exception>
        </member>
        <member name="M:Box.Utils.Tables.TableDirectory`1.TryGetValue(`0,System.String@)">
            <summary>
            Attempts to retrieve the string value associated with the given enum key.
            </summary>
            <param name="key">The enum key to look up.</param>
            <param name="value">When this method returns, contains the value associated with the key, if found; otherwise, null.</param>
            <returns><c>true</c> if the key was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Box.Utils.Tables.TableDirectory`1.Add(`0)">
            <summary>
            Adds a new enum key to the directory, generating and assigning a snake_case identifier.
            </summary>
            <param name="key">The enum key to add.</param>
        </member>
        <member name="M:Box.Utils.Tables.TableDirectory`1.EnumToSnakeCase(`0)">
            <summary>
            Converts an enum value to a snake_case string with double underscores around it.
            </summary>
            <param name="event">The enum value to convert.</param>
            <returns>A snake_case string representation of the enum value, wrapped in double underscores.</returns>
        </member>
        <member name="T:Box.Utils.TimeManager">
            <summary>
            Manages time-related operations and calculations in the game.
            </summary>
        </member>
        <member name="P:Box.Utils.TimeManager.Count">
            <summary>
            Gets the number of active timers managed by the TimeManager.
            </summary>
        </member>
        <member name="M:Box.Utils.TimeManager.Add(System.String,System.Single,System.Boolean,System.Action)">
            <summary>
            Adds a timed action to be managed by the TimeManager.
            </summary>
            <param name="name">The unique name of the timed action.</param>
            <param name="delay">The delay in seconds before the action starts.</param>
            <param name="repeat">Specifies if the action should repeat.</param>
            <param name="action">The action to execute when the timer expires.</param>
        </member>
        <member name="M:Box.Utils.TimeManager.Add(System.Enum,System.Single,System.Boolean,System.Action)">
            <summary>
            Adds a timed action identified by an enum name to be managed by the TimeManager.
            </summary>
            <param name="name">The enum value that identifies the timed action.</param>
            <param name="delay">The delay in seconds before the action starts.</param>
            <param name="repeat">Specifies if the action should repeat.</param>
            <param name="action">The action to execute when the timer expires.</param>
        </member>
        <member name="M:Box.Utils.TimeManager.Add(System.Single,System.Boolean,System.Action)">
            <summary>
            Adds a timed action to be managed by the TimeManager.
            </summary>
            <param name="delay">The delay in seconds before the action starts.</param>
            <param name="repeat">Specifies if the action should repeat.</param>
            <param name="action">The action to execute when the timer expires.</param>
        </member>
        <member name="M:Box.Utils.TimeManager.Exists(System.String)">
            <summary>
            Checks if a timer with the specified name exists in the TimeManager.
            </summary>
            <param name="name">The name of the timer to check.</param>
            <returns>True if a timer with the specified name exists; otherwise, false.</returns>
        </member>
        <member name="M:Box.Utils.TimeManager.Exists(System.Enum)">
            <summary>
            Checks if a timer with the specified enum name exists in the TimeManager.
            </summary>
            <param name="name">The enum representing the name of the timer to check.</param>
            <returns>True if a timer with the specified enum name exists; otherwise, false.</returns>
        </member>
        <member name="M:Box.Utils.TimeManager.Stop(System.String)">
            <summary>
            Stops and removes the timer with the specified name from the TimeManager.
            </summary>
            <param name="name">The name of the timer to stop and remove.</param>
            <returns>True if the timer was successfully found and stopped; otherwise, false.</returns>
        </member>
        <member name="M:Box.Utils.TimeManager.Stop(System.Enum)">
            <summary>
            Stops and removes the timer associated with the specified Enum identifier from the TimeManager.
            </summary>
            <param name="name">The Enum identifier of the timer to stop and remove.</param>
            <returns>True if the timer was successfully found and stopped; otherwise, false.</returns>
        </member>
        <member name="M:Box.Utils.TimeManager.Clear">
            <summary>
            Clears all timers managed by the TimeManager.
            </summary>
        </member>
        <member name="T:Box.Utils.Tweens">
            <summary>
            Provides methods and properties for managing and executing tween animations.
            </summary>
        </member>
        <member name="M:Box.Utils.Tweens.BackIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using a back-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.BackIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using a back-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.BackOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using a back-out easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.BackOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using a back-out easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.BackOutIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using a back-out-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.BackOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using a back-out-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.BackInOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using a back-in-out easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.BackInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using a back-in-out easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.BounceIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using a bounce-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.BounceIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Performs a bounce-in interpolation between two Vect2 (Vector2) values over time.
            </summary>
            <param name="min">The starting Vect2 (Vector2) value.</param>
            <param name="max">The ending Vect2 (Vector2) value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated Vect2 (Vector2) value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.BounceOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Performs a bounce-out interpolation between two float values over time.
            </summary>
            <param name="min">The starting float value.</param>
            <param name="max">The ending float value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated float value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.BounceOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Performs a bounce-out interpolation between two Vect2 (Vector2) values over time.
            </summary>
            <param name="min">The starting Vect2 (Vector2) value.</param>
            <param name="max">The ending Vect2 (Vector2) value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated Vect2 (Vector2) value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.BounceOutIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Performs a bounce-out-in interpolation between two float values over time.
            </summary>
            <param name="min">The starting float value.</param>
            <param name="max">The ending float value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated float value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.BounceOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Performs a bounce-out-in interpolation between two Vect2 (Vector2) values over time.
            </summary>
            <param name="min">The starting Vect2 (Vector2) value.</param>
            <param name="max">The ending Vect2 (Vector2) value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated Vect2 (Vector2) value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.BounceInOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Performs a bounce-in-out interpolation between two float values over time.
            </summary>
            <param name="min">The starting float value.</param>
            <param name="max">The ending float value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated float value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.BounceInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Performs a bounce-in-out interpolation between two Vect2 (Vector2) values over time.
            </summary>
            <param name="min">The starting Vect2 (Vector2) value.</param>
            <param name="max">The ending Vect2 (Vector2) value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated Vect2 (Vector2) value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.CircIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using a circular-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.CircIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using a circular-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.CircOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Performs a circular-out interpolation between two float values over time.
            </summary>
            <param name="min">The starting float value.</param>
            <param name="max">The ending float value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated float value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.CircOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using a circular-out easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.CircOutIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using a circular-out-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.CircOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using a circular-out-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.CircInOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Performs a circular-in-out interpolation between two float values over time.
            </summary>
            <param name="min">The starting float value.</param>
            <param name="max">The ending float value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated float value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.CircInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using a circular-in-out easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.CubicIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using a cubic-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.CubicIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using a cubic-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.CubicOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Performs a cubic-out interpolation between two float values over time.
            </summary>
            <param name="min">The starting float value.</param>
            <param name="max">The ending float value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated float value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.CubicOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using a cubic-out easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.CubicOutIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Performs a cubic-out-in interpolation between two float values over time.
            </summary>
            <param name="min">The starting float value.</param>
            <param name="max">The ending float value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated float value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.CubicOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Performs a cubic-out-in interpolation between two Vect2 values over time.
            </summary>
            <param name="min">The starting Vect2 value.</param>
            <param name="max">The ending Vect2 value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated Vect2 value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.CubicInOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using a cubic-in-out easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.CubicInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Performs a cubic-in-out interpolation between two Vect2 values over time.
            </summary>
            <param name="min">The starting Vect2 value.</param>
            <param name="max">The ending Vect2 value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated Vect2 value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.ElasticIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using an elastic-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.ElasticIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using an elastic-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.ElasticOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using an elastic-out easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.ElasticOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using an elastic-out easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.ElasticOutIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using an elastic-out-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.ElasticOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using an elastic-out-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.ElasticInOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using an elastic-in-out easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.ElasticInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Performs an elastic-in-out interpolation between two Vect2 values over time.
            </summary>
            <param name="min">The starting Vect2 value.</param>
            <param name="max">The ending Vect2 value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated Vect2 value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.ExpoIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using an exponential-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.ExpoIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using an exponential-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.ExpoOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using an exponential-out easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.ExpoOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using an exponential-out easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.ExpoOutIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using an exponential-out-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.ExpoOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using an exponential-out-in easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.ExpoInOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Interpolates a float value from min to max over a specified duration using an exponential-in-out easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>>
        </member>
        <member name="M:Box.Utils.Tweens.ExpoInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Interpolates a Vect2 value from min to max over a specified duration using an exponential-in-out easing function.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.Linear(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Linearly interpolates a float value from min to max over a specified duration.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.Linear(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Linearly interpolates a Vect2 value from min to max over a specified duration.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuadIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Quadratic easing function: accelerating from zero velocity.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuadIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Quadratic easing function: accelerating from zero velocity for Vect2.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuadOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Quadratic easing function: decelerating to zero velocity.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuadOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Quadratic easing function: decelerating to zero velocity for Vect2.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuadInOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Quadratic easing function: accelerating from zero velocity, then decelerating to zero velocity.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuadInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Quadratic easing function: accelerating from zero velocity, then decelerating to zero velocity for Vect2.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuadOutIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Quadratic easing function: decelerating to zero velocity, then accelerating back to starting velocity.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuadOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Quadratic easing function: decelerating to zero velocity, then accelerating back to starting velocity for Vect2.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuartIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Quartic easing function: accelerating from zero velocity.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuartIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Quartic easing function: accelerating from zero velocity for Vect2.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuartOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Quartic easing function: decelerating to zero velocity.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuartOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Quartic easing function: decelerating to zero velocity for Vect2.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuartOutIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Quartic easing function: accelerating from zero velocity, then decelerating to zero velocity.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuartOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Quartic easing function: accelerating from zero velocity, then decelerating to zero velocity for Vect2.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuartInOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Quartic easing function: decelerating to zero velocity, then accelerating back to starting velocity.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuartInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Quartic easing function: decelerating to zero velocity, then accelerating back to starting velocity for Vect2.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuintIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Quintic easing function: accelerating from zero velocity.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuintIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Quintic easing function: accelerating from zero velocity for Vect2.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuintOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Quintic easing function: decelerating to zero velocity.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuintOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Quintic easing function: decelerating to zero velocity for Vect2.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuintOutIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Quintic easing function: accelerating from zero velocity, then decelerating to zero velocity.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuintOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Quintic easing function: accelerating from zero velocity, then decelerating to zero velocity for Vect2.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuintInOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Quintic easing function: accelerating from zero velocity, then decelerating to zero velocity for Vect2.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.QuintInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Quintic easing function: decelerating to zero velocity, then accelerating back to starting velocity.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.SineIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Sine easing function: accelerating from zero velocity.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.SineIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Sine easing function: accelerating from zero velocity for Vect2.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.SineOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Sine easing function: decelerating to zero velocity.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.SineOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Sine easing function: decelerating to zero velocity for Vect2.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.SineOutIn(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Sine easing function: accelerating from zero velocity, then decelerating to zero velocity.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.SineOutIn(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Sine easing function: decelerating to zero velocity for Vect2.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.SineInOut(System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Sine easing function: accelerating from zero velocity, then decelerating to zero velocity.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.SineInOut(Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Sine easing function: accelerating from zero velocity, then decelerating to zero velocity for Vect2.
            </summary>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.Ease(Box.Enums.EaseType,System.Single,System.Single,System.Single,System.Action{System.Single},System.Action{System.Single,System.Single,System.Single},System.Action{System.Single,System.Single,System.Single})">
            <summary>
            Performs an easing interpolation based on the specified easing type.
            </summary>
            <param name="type">The type of easing function to use.</param>
            <param name="min">The starting value.</param>
            <param name="max">The ending value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="M:Box.Utils.Tweens.Ease(Box.Enums.EaseType,Box.Systems.Vect2,Box.Systems.Vect2,System.Single,System.Action{Box.Systems.Vect2},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single},System.Action{Box.Systems.Vect2,Box.Systems.Vect2,System.Single})">
            <summary>
            Performs an easing interpolation based on the specified easing type for Vect2 (Vector2).
            </summary>
            <param name="type">The type of easing function to use.</param>
            <param name="min">The starting Vect2 (Vector2) value.</param>
            <param name="max">The ending Vect2 (Vector2) value.</param>
            <param name="time">The duration of the interpolation.</param>
            <param name="result">An action to apply the interpolated Vect2 (Vector2) value.</param>
            <param name="onStart">An optional action to call when the interpolation starts.</param>
            <param name="onEnd">An optional action to call when the interpolation ends.</param>
            <returns>Returns an IEnumerator to control the interpolation.</returns>
        </member>
        <member name="T:System.ArrayExtentions">
            <summary>
            A static class that contains extension methods for <see cref="T:System.Array"/>.
            These methods provide additional functionality to work with arrays in a more convenient way.
            </summary>
        </member>
        <member name="M:System.ArrayExtentions.AddRange``1(``0[],``0[])">
            <summary>
            Adds multiple elements to the end of the array and returns a new array with the added elements.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="array">The array to add elements to.</param>
            <param name="values">The elements to add to the array.</param>
            <returns>A new array containing the elements of the original array followed by the added elements.</returns>
        </member>
        <member name="M:System.ArrayExtentions.RemoveAt``1(``0[],System.Int32)">
            <summary>
            Removes an element at a specified index in the array and returns a new array without the element.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="array">The array to remove the element from.</param>
            <param name="index">The index of the element to remove.</param>
            <returns>A new array without the element at the specified index.</returns>
        </member>
        <member name="T:System.EnumExtentions">
            <summary>
            Extension methods for enums related to font measurement operations.
            </summary>
        </member>
        <member name="M:System.EnumExtentions.HasFlag``1(``0,``0)">
            <summary>
            Checks if a flag enum value contains a specific flag.
            </summary>
            <typeparam name="TEnum">The enum type.</typeparam>
            <param name="value">The enum value to check.</param>
            <param name="flag">The flag to check for.</param>
            <returns>True if the enum value contains the flag, false otherwise.</returns>
        </member>
        <member name="M:System.EnumExtentions.GetDescription``1(``0)">
            <summary>
            Gets the description attribute of an enum value.
            </summary>
            <typeparam name="TEnum">The enum type.</typeparam>
            <param name="value">The enum value.</param>
            <returns>The description attribute value if present, otherwise the enum value name.</returns>
        </member>
        <member name="M:System.EnumExtentions.AddFlag``1(``0,``0)">
            <summary>
            Adds a flag to the enum value.
            </summary>
            <typeparam name="TEnum">The enum type.</typeparam>
            <param name="value">The current enum value.</param>
            <param name="flag">The flag to add.</param>
            <returns>The resulting enum value with the flag added.</returns>
        </member>
        <member name="M:System.EnumExtentions.RemoveFlag``1(``0,``0)">
            <summary>
            Removes a flag from the enum value.
            </summary>
            <typeparam name="TEnum">The enum type.</typeparam>
            <param name="value">The current enum value.</param>
            <param name="flag">The flag to remove.</param>
            <returns>The resulting enum value with the flag removed.</returns>
        </member>
        <member name="M:System.EnumExtentions.Measure(System.Enum,System.String)">
            <summary>
            Measures the dimensions (width and height) of a specified text using the font associated with the enum value.
            </summary>
            <param name="value">The enum value representing the font.</param>
            <param name="text">The text to measure.</param>
            <returns>The dimensions (width and height) of the rendered text.</returns>
        </member>
        <member name="M:System.EnumExtentions.MeasureWidth(System.Enum,System.String)">
            <summary>
            Measures the width of a specified text using the font associated with the enum value.
            </summary>
            <param name="value">The enum value representing the font.</param>
            <param name="text">The text to measure.</param>
            <returns>The width of the rendered text.</returns>
        </member>
        <member name="M:System.EnumExtentions.MeasureHeight(System.Enum,System.String)">
            <summary>
            Measures the height of a specified text using the font associated with the enum value.
            </summary>
            <param name="value">The enum value representing the font.</param>
            <param name="text">The text to measure.</param>
            <returns>The height of the rendered text.</returns>
        </member>
        <member name="M:System.EnumExtentions.FormatText(System.Enum,System.String,System.Int32)">
            <summary>
            Formats a text string to fit within a specified width using the font associated with the enum value.
            </summary>
            <param name="value">The enum value representing the font.</param>
            <param name="text">The text to format.</param>
            <param name="width">The width constraint.</param>
            <returns>The formatted text string.</returns>
        </member>
        <member name="M:System.EnumExtentions.FormatTextAndMeasure(System.Enum,System.String,System.Int32)">
            <summary>
            Formats a text string to fit within a specified width using the font associated with the enum value
            and returns the dimensions (width and height) of the formatted text.
            </summary>
            <param name="value">The enum value representing the font.</param>
            <param name="text">The text to format.</param>
            <param name="width">The width constraint.</param>
            <returns>The dimensions (width and height) of the formatted text.</returns>
        </member>
        <member name="M:System.EnumExtentions.FormatTextAndMeasure(System.Enum,System.String,System.Single)">
            <summary>
            Formats a text string to fit within a specified width using the font associated with the enum value
            and returns the dimensions (width and height) of the formatted text.
            </summary>
            <param name="value">The enum value representing the font.</param>
            <param name="text">The text to format.</param>
            <param name="width">The width constraint.</param>
            <returns>The dimensions (width and height) of the formatted text.</returns>
        </member>
        <member name="T:System.FloatExtentions">
            <summary>
            Extension methods for float values providing additional functionality and operations.
            </summary>
        </member>
        <member name="M:System.FloatExtentions.IsInteger(System.Single)">
            <summary>
            Checks if the float value is an integer.
            </summary>
            <param name="value">The float value to check.</param>
            <returns>True if the value is an integer, false otherwise.</returns>
        </member>
        <member name="M:System.FloatExtentions.IsFloat(System.Single)">
            <summary>
            Checks if the float value is an float.
            </summary>
            <param name="value">The float value to check.</param>
            <returns>True if the value is an integer, false otherwise.</returns>
        </member>
        <member name="M:System.FloatExtentions.IsCloseTo(System.Single,System.Single,System.Single)">
            <summary>
            Checks if two double values are approximately equal within a specified tolerance.
            </summary>
            <param name="a">The first double value.</param>
            <param name="b">The second double value.</param>
            <param name="tolerance">The tolerance for comparison (defaults to double.Epsilon).</param>
            <returns>True if the values are approximately equal, false otherwise.</returns>
        </member>
        <member name="M:System.FloatExtentions.IsCloseTo(System.Double,System.Double,System.Double)">
            <summary>
            Checks if two double values are approximately equal within a specified tolerance.
            </summary>
            <param name="a">The first double value.</param>
            <param name="b">The second double value.</param>
            <param name="tolerance">The tolerance for comparison (defaults to double.Epsilon).</param>
            <returns>True if the values are approximately equal, false otherwise.</returns>
        </member>
        <member name="M:System.FloatExtentions.IsBetween(System.Single,System.Single,System.Single)">
            <summary>
            Checks if the value is between the specified minimum and maximum values (inclusive).
            </summary>
            <param name="value">The value to check.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>True if the value is between the min and max values (inclusive), otherwise false.</returns>
        </member>
        <member name="M:System.FloatExtentions.IsPositive(System.Single)">
            <summary>
            Checks if the value is positive (greater than zero).
            </summary>
            <param name="value">The value to check.</param>
            <returns>True if the value is greater than zero, otherwise false.</returns>
        </member>
        <member name="M:System.FloatExtentions.IsNegative(System.Single)">
            <summary>
            Checks if the value is negative (less than zero).
            </summary>
            <param name="value">The value to check.</param>
            <returns>True if the value is less than zero, otherwise false.</returns>
        </member>
        <member name="M:System.FloatExtentions.ToPercent(System.Single,System.Single,System.Boolean)">
            <summary>
            Converts a part of a whole value to a percentage.
            </summary>
            <param name="part">The part value.</param>
            <param name="whole">The whole value.</param>
            <param name="isFullPercent">True if the result should be multiplied by 100 (full percent), false if already in percentage form.</param>
            <returns>The percentage value.</returns>
        </member>
        <member name="M:System.FloatExtentions.ToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">Degrees value to convert.</param>
            <returns>Radians equivalent of the degrees.</returns>
        </member>
        <member name="M:System.FloatExtentions.ToDegrees(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">Radians value to convert.</param>
            <returns>Degrees equivalent of the radians.</returns>
        </member>
        <member name="M:System.FloatExtentions.ToSign(System.Single)">
            <summary>
            Gets the sign of the float value.
            </summary>
            <param name="value">Float value to determine the sign of.</param>
            <returns>Sign of the float value: -1 if negative, 0 if zero, 1 if positive.</returns>
            
        </member>
        <member name="M:System.FloatExtentions.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the value between a minimum and maximum.
            </summary>
            <param name="value">Float value to clamp.</param>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <returns>Clamped value.</returns>
        </member>
        <member name="M:System.FloatExtentions.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Performs linear interpolation between two values.
            </summary>
            <param name="start">Starting value.</param>
            <param name="end">Ending value.</param>
            <param name="amount">Interpolation amount (0 to 1).</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:System.FloatExtentions.Round(System.Single,System.Int32)">
            <summary>
            Rounds the float value to the specified number of decimal places.
            </summary>
            <param name="value">Float value to round.</param>
            <param name="digits">Number of decimal places to round to.</param>
            <returns>Rounded value.</returns>
        </member>
        <member name="M:System.FloatExtentions.IsZero(System.Single,System.Single)">
            <summary>
            Checks if the float value is approximately zero.
            </summary>
            <param name="value">Float value to check.</param>
            <param name="epsilon">Optional tolerance for the check. Default is float.Epsilon.</param>
            <returns>True if the value is approximately zero, false otherwise.</returns>
        </member>
        <member name="M:System.FloatExtentions.IsNonZero(System.Single,System.Single)">
            <summary>
            Checks if the float value is not approximately zero.
            </summary>
            <param name="value">Float value to check.</param>
            <param name="epsilon">Optional tolerance for the check. Default is float.Epsilon.</param>
            <returns>True if the value is not approximately zero, false otherwise.</returns>
        </member>
        <member name="T:System.IEnumerableExtentions">
            <summary>
            Provides extension methods for operations on IEnumerable collections.
            </summary>
        </member>
        <member name="M:System.IEnumerableExtentions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks if the IEnumerable collection is empty.
            </summary>
            <typeparam name="T">Type of elements in the collection.</typeparam>
            <param name="source">IEnumerable collection to check.</param>
            <returns>True if the collection is empty, false otherwise.</returns>
        </member>
        <member name="M:System.IEnumerableExtentions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Searches for the specified value and returns the zero-based index of the first occurrence within the IEnumerable collection.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="source">The IEnumerable collection to search.</param>
            <param name="value">The value to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:System.IEnumerableExtentions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Finds the index of the first occurrence of a value in the IEnumerable collection using a specified comparer.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="source">The IEnumerable collection to search.</param>
            <param name="value">The value to locate in the collection.</param>
            <param name="comparer">The equality comparer to use for comparing elements.</param>
            <returns>The zero-based index of the first occurrence of the value within the entire collection, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when source is null.</exception>
        </member>
        <member name="M:System.IEnumerableExtentions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shuffles the elements in the IEnumerable collection using the Fisher-Yates (Knuth) shuffle algorithm.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="items">The IEnumerable collection to shuffle.</param>
            <returns>A shuffled IEnumerable collection of elements.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when items is null.</exception>
        </member>
        <member name="M:System.IEnumerableExtentions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the element with the minimum value based on the specified key selector.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the key returned by the key selector function.</typeparam>
            <param name="source">The sequence to return the minimum element from.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>The element with the minimum value.</returns>
        </member>
        <member name="M:System.IEnumerableExtentions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the element with the maximum value based on the specified key selector.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the key returned by the key selector function.</typeparam>
            <param name="source">The sequence to return the maximum element from.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>The element with the maximum value.</returns>
        </member>
        <member name="M:System.IEnumerableExtentions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of the IEnumerable collection.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="source">The IEnumerable collection to iterate over.</param>
            <param name="action">The action to perform on each element.</param>
        </member>
        <member name="M:System.IEnumerableExtentions.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Splits the IEnumerable collection into chunks of the specified size.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="source">The IEnumerable collection to split.</param>
            <param name="chunkSize">The size of each chunk.</param>
            <returns>An IEnumerable of IEnumerable collections representing the chunks.</returns>
            <exception cref="T:System.ArgumentException">Thrown when chunkSize is less than or equal to zero.</exception>
        </member>
        <member name="T:System.ListExtentions">
            <summary>
            A static class that contains extension methods for <see cref="T:System.Collections.Generic.List`1"/>.
            These methods provide additional functionality to work with lists in a more convenient way.
            </summary>
        </member>
        <member name="M:System.ListExtentions.RemoveNulls``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes all null elements from a list.
            </summary>
            <param name="list">The list to clean.</param>
            <returns>The list without null elements.</returns>
        </member>
        <member name="M:System.ListExtentions.Flatten``1(System.Collections.Generic.List{System.Collections.Generic.List{``0}})">
            <summary>
            Flattens a list of lists into a single list.
            </summary>
            <param name="list">The list of lists to flatten.</param>
            <returns>A single list containing all elements from the inner lists.</returns>
        </member>
        <member name="M:System.ListExtentions.RemoveFirst``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes the first element from the list.
            </summary>
            <param name="list">The list to remove from.</param>
            <returns>The removed element, or default value if the list is empty.</returns>
        </member>
        <member name="M:System.ListExtentions.RemoveLast``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes the last element from the list.
            </summary>
            <param name="list">The list to remove from.</param>
            <returns>The removed element, or default value if the list is empty.</returns>
        </member>
        <member name="M:System.ListExtentions.CountOccurrences``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Counts how many times a specified element occurs in the list.
            </summary>
            <param name="list">The list to search in.</param>
            <param name="element">The element to count.</param>
            <returns>The number of occurrences of the element.</returns>
        </member>
        <member name="M:System.ListExtentions.Replace``1(System.Collections.Generic.List{``0},``0,``0)">
            <summary>
            Replaces the first occurrence of a specified element in the list with another element.
            </summary>
            <param name="list">The list to modify.</param>
            <param name="oldElement">The element to replace.</param>
            <param name="newElement">The element to replace with.</param>
            <returns>True if the element was replaced, otherwise false.</returns>
        </member>
        <member name="M:System.ListExtentions.Push``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Adds an element to the end of the list (Push operation).
            </summary>
            <param name="list">The list to which the element will be added.</param>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="M:System.ListExtentions.Pop``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes and returns the last element of the list (Pop operation).
            </summary>
            <param name="list">The list to remove the element from.</param>
            <returns>The last element of the list, or default value if the list is empty.</returns>
        </member>
        <member name="T:System.ProfilingExtensions">
            <summary>
            Contains extension methods for profiling code execution and measuring performance.
            </summary>
        </member>
        <member name="M:System.ProfilingExtensions.MeasureExecutionTime(System.Action)">
            <summary>
            Measures the execution time of an action.
            </summary>
            <param name="action">The action to measure.</param>
            <returns>The time taken to execute the action.</returns>
        </member>
        <member name="M:System.ProfilingExtensions.MeasureExecutionTime``1(System.Func{``0},``0@)">
            <summary>
            Measures the execution time of a function and returns the result.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="func">The function to measure.</param>
            <param name="result">The result returned by the function.</param>
            <returns>The time taken to execute the function.</returns>
        </member>
        <member name="T:System.RandomExtentions">
            <summary>
            Contains extension methods for generating random values and making random choices using a specified random generator.
            </summary>
        </member>
        <member name="M:System.RandomExtentions.Choice``1(Box.Utils.Rand,``0[])">
            <summary>
            Returns a randomly chosen element from the provided choices array using the specified random generator.
            </summary>
            <typeparam name="T">The type of elements in the choices array.</typeparam>
            <param name="random">The random generator instance.</param>
            <param name="choices">The array of choices.</param>
            <returns>The randomly chosen element.</returns>
        </member>
        <member name="M:System.RandomExtentions.RandomColor(Box.Utils.Rand)">
            <summary>
            Generates and returns a random color using the specified random generator.
            </summary>
            <param name="random">The random generator instance.</param>
            <returns>A randomly generated color.</returns>
        </member>
        <member name="M:System.RandomExtentions.RandomVector(Box.Utils.Rand)">
            <summary>
            Generates and returns a random 2D vector within the range [-1, 1] for both X and Y coordinates using the specified random generator.
            </summary>
            <param name="random">The random generator instance.</param>
            <returns>A randomly generated 2D vector.</returns>
        </member>
        <member name="M:System.RandomExtentions.RandomDirection(Box.Utils.Rand)">
            <summary>
            Generates and returns a random direction vector (Up, Right, Down, Left) using the specified random generator.
            </summary>
            <param name="random">The random generator instance.</param>
            <returns>A randomly chosen direction vector.</returns>
        </member>
        <member name="M:System.RandomExtentions.RandomVector(Box.Utils.Rand,System.Single,System.Single)">
            <summary>
            Generates a random 2D vector with components within the specified minimum and maximum bounds.
            </summary>
            <param name="random">The Rand instance used to generate the random values.</param>
            <param name="minimum">The minimum value for each component of the vector.</param>
            <param name="maximum">The maximum value for each component of the vector.</param>
            <returns>A randomly generated vector whose components are between <paramref name="minimum"/> and <paramref name="maximum"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="minimum"/> is greater than <paramref name="maximum"/>.</exception>
        </member>
        <member name="T:System.SoundExtentions">
            <summary>
            Provides extension methods for retrieving the volume of a sound channel.
            </summary>
        </member>
        <member name="M:System.SoundExtentions.GetSoundVolume(System.Enum)">
            <summary>
            Gets the volume of the specified sound channel using an <see cref="T:System.Enum"/> identifier.
            </summary>
            <param name="channel">The enumerated sound channel.</param>
            <returns>The volume level of the specified sound channel, ranging from 0.0 to 1.0.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the specified channel does not exist.</exception>
        </member>
        <member name="M:System.SoundExtentions.GetSoundVolume(System.Int32)">
            <summary>
            Gets the volume of the specified sound channel using an integer identifier.
            </summary>
            <param name="channel">The ID of the sound channel.</param>
            <returns>The volume level of the specified sound channel, ranging from 0.0 to 1.0.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the specified channel does not exist.</exception>
        </member>
        <member name="M:System.SoundExtentions.SetSoundVolume(System.Enum,System.Single)">
            <summary>
            Sets the volume for a specific sound channel based on its enum value.
            </summary>
            <param name="channel">An enum value representing the sound channel whose volume you want to modify.</param>
            <param name="volume">A float value representing the desired volume level (usually between 0.0f and 1.0f).</param>
            <returns>The volume value after being set on the specified sound channel.</returns>
        </member>
        <member name="M:System.SoundExtentions.SetSoundVolume(System.Int32,System.Single)">
            <summary>
            Sets the volume for a specific sound channel based on an integer channel identifier.
            </summary>
            <param name="channel">An integer representing the sound channel's identifier.</param>
            <param name="volume">A float value representing the desired volume level (usually between 0.0f and 1.0f).</param>
            <returns>The volume value after being set on the specified sound channel.</returns>
        </member>
        <member name="T:System.StringExtentions">
            <summary>
            Extensions for string manipulation and validation.
            </summary>
        </member>
        <member name="M:System.StringExtentions.ToEnumString(System.Enum)">
            <summary>
            Converts the enum value to a string representation in the format "EnumTypeName.EnumValue".
            </summary>
            <param name="text">The enum value to convert.</param>
            <returns>A string representation of the enum value.</returns>
        </member>
        <member name="M:System.StringExtentions.IsEmpty(System.String)">
            <summary>
            Checks whether the string is null or empty.
            </summary>
            <param name="text">The string to check.</param>
            <returns>True if the string is null or empty; otherwise, false.</returns>
        </member>
        <member name="M:System.StringExtentions.ToTitleCase(System.String)">
            <summary>
            Converts the string to title case using the current culture.
            </summary>
            <param name="text">The string to convert.</param>
            <returns>The string converted to title case.</returns>
        </member>
        <member name="M:System.StringExtentions.Truncate(System.String,System.Int32)">
            <summary>
            Truncates the string to the specified maximum length.
            </summary>
            <param name="text">The string to truncate.</param>
            <param name="length">The maximum length of the truncated string.</param>
            <returns>The truncated string.</returns>
        </member>
        <member name="M:System.StringExtentions.CountOccurrences(System.String,System.Char)">
            <summary>
            Counts the number of times a specific character appears in the given string.
            </summary>
            <param name="text">The input string to search.</param>
            <param name="character">The character to count occurrences of.</param>
            <returns>The number of times the specified character appears in the string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="text"/> is null.</exception>
        </member>
        <member name="M:System.StringExtentions.Encode(System.String)">
            <summary>
            Encodes the input string to Base64.
            </summary>
            <param name="text">The input string to encode.</param>
            <returns>The Base64 encoded string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="text"/> is null or empty.</exception>
        </member>
        <member name="M:System.StringExtentions.Decode(System.String)">
            <summary>
            Decodes a Base64 encoded string to its original form.
            </summary>
            <param name="text">The Base64 encoded string to decode.</param>
            <returns>The decoded string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="text"/> is null or empty.</exception>
        </member>
        <member name="M:System.StringExtentions.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Compares two strings for equality ignoring case.
            </summary>
            <param name="a">The first string to compare.</param>
            <param name="b">The second string to compare.</param>
            <returns>True if the strings are equal ignoring case; otherwise, false.</returns>
        </member>
        <member name="M:System.StringExtentions.Firstcase(System.String)">
            <summary>
            Converts the first character of the string to uppercase.
            </summary>
            <param name="text">The string to modify.</param>
            <returns>The string with the first character in uppercase.</returns>
        </member>
        <member name="M:System.StringExtentions.RemoveNumbers(System.String)">
            <summary>
            Removes numeric digits from the string.
            </summary>
            <param name="text">The input string.</param>
            <returns>The string with numeric digits removed.</returns>
        </member>
        <member name="M:System.StringExtentions.Uppercase(System.String)">
            <summary>
            Converts the string to uppercase.
            </summary>
            <param name="text">The input string.</param>
            <returns>The string converted to uppercase.</returns>
        </member>
        <member name="M:System.StringExtentions.Lowercase(System.String)">
            <summary>
            Converts the string to lowercase.
            </summary>
            <param name="text">The input string.</param>
            <returns>The string converted to lowercase.</returns>
        </member>
        <member name="M:System.StringExtentions.CountOccurrences(System.String,System.String)">
            <summary>
            Count the occurrences of a substring within a string.
            </summary>
            <param name="text">the string to input</param>
            <param name="substring">the word you are trying to search.</param>
            <returns>Returns zero if couldnt be found or returns the amount of words based on keyword</returns>
        </member>
        <member name="M:System.StringExtentions.IsNumeric(System.String)">
            <summary>
            Checks if the string represents a numeric value.
            </summary>
            <param name="text">The string to check.</param>
            <returns>True if the string is numeric; otherwise, false.</returns>
        </member>
        <member name="M:System.StringExtentions.ToSnakeCase(System.String)">
            <summary>
            Converts the given string to snake_case formatting.
            </summary>
            <param name="text">The input string to convert.</param>
            <returns>A new string in snake_case format.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="text"/> is null.</exception>
        </member>
        <member name="M:System.StringExtentions.RemoveWhitespace(System.String)">
            <summary>
            Removes all whitespace characters from the given string.
            </summary>
            <param name="text">The input string from which whitespace will be removed.</param>
            <returns>A new string with all whitespace characters removed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="text"/> is null.</exception>
        </member>
        <member name="M:System.StringExtentions.ToHash(System.String)">
            <summary>
            Computes the hash value of the string using a hashing algorithm.
            </summary>
            <param name="value">The input string.</param>
            <returns>The hash value of the string.</returns>
        </member>
    </members>
</doc>
